/**
 * @fileoverview AI Provider Interface - —É–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å—ñ—Ö AI backends
 * –ü—ñ–¥—Ç—Ä–∏–º—É—î Goose Desktop —Ç–∞ –ø—Ä—è–º—ñ MCP —Å–µ—Ä–≤–µ—Ä–∏ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º routing —Ç–∞ fallback
 * 
 * @version 4.0.0
 * @date 2025-10-13
 */

import logger from '../utils/logger.js';

/**
 * –ì–æ–ª–æ–≤–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ AI backends
 * –ü—ñ–¥—Ç—Ä–∏–º—É—î: Goose Desktop, Direct MCP, Hybrid mode
 */
export class AIProviderInterface {
  /**
   * @param {Object} config - AI_BACKEND_CONFIG –∑ global-config.js
   */
  constructor(config) {
    this.config = config;
    this.providers = {};
    this.metrics = {
      goose: { requests: 0, errors: 0, totalLatency: 0 },
      mcp: { requests: 0, errors: 0, totalLatency: 0 }
    };
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—Å—ñ—Ö enabled backends
   */
  async initialize() {
    logger.system('ai-provider', '[AI Provider] Initializing backends...');

    // –î–∏–Ω–∞–º—ñ—á–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è circular dependencies
    if (this.config.providers.goose?.enabled) {
      const { GooseBackend } = await import('./backends/goose-backend.js');
      this.providers.goose = new GooseBackend(this.config.providers.goose);
      await this.providers.goose.initialize();
      logger.system('ai-provider', '[AI Provider] ‚úÖ Goose backend initialized');
    }

    if (this.config.providers.mcp?.enabled) {
      const { MCPBackend } = await import('./backends/mcp-backend.js');
      this.providers.mcp = new MCPBackend(this.config.providers.mcp);
      await this.providers.mcp.initialize();
      logger.system('ai-provider', '[AI Provider] ‚úÖ MCP backend initialized');
    }

    const enabledBackends = Object.keys(this.providers);
    logger.system('ai-provider', `[AI Provider] Mode: ${this.config.mode}, Primary: ${this.config.primary}, Enabled: ${enabledBackends.join(', ')}`);
  }

  /**
   * –í–∏–∫–æ–Ω–∞—Ç–∏ AI –∑–∞–ø–∏—Ç —á–µ—Ä–µ–∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π backend
   * 
   * @param {string} prompt - –¢–µ–∫—Å—Ç –∑–∞–ø–∏—Ç—É
   * @param {Object} context - –ö–æ–Ω—Ç–µ–∫—Å—Ç (sessionId, history, etc)
   * @param {Object} options - –û–ø—Ü—ñ—ó –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
   * @param {string} options.agent - –ù–∞–∑–≤–∞ –∞–≥–µ–Ω—Ç–∞ (atlas, tetyana, grisha)
   * @param {boolean} options.enableTools - –î–æ–∑–≤–æ–ª–∏—Ç–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è tools
   * @param {string} options.forceBackend - –ü—Ä–∏–º—É—Å–æ–≤–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ backend ('goose' | 'mcp')
   * @returns {Promise<Object>} –í—ñ–¥–ø–æ–≤—ñ–¥—å AI –∑ –º–µ—Ç–∞–¥–∞–Ω–∏–º–∏
   */
  async execute(prompt, context, options = {}) {
    const startTime = Date.now();

    // –í–∏–±—Ä–∞—Ç–∏ backend
    const backend = this.selectBackend(prompt, options);
    
    logger.debug('ai-provider', `[AI Provider] Executing via ${backend} backend`, {
      agent: options.agent,
      enableTools: options.enableTools,
      promptLength: prompt.length
    });

    try {
      // –°–ø—Ä–æ–±–∞ —á–µ—Ä–µ–∑ primary backend
      const result = await this._executeWithBackend(backend, prompt, context, options);
      
      // –ú–µ—Ç—Ä–∏–∫–∏
      const latency = Date.now() - startTime;
      this.metrics[backend].requests++;
      this.metrics[backend].totalLatency += latency;

      logger.debug('ai-provider', `[AI Provider] ‚úÖ Success via ${backend} (${latency}ms)`);

      return {
        ...result,
        metadata: {
          backend,
          latency,
          fallback: false
        }
      };

    } catch (error) {
      logger.error('ai-provider', `[AI Provider] ‚ùå ${backend} failed: ${error.message}`);
      this.metrics[backend].errors++;

      // Fallback —è–∫—â–æ —î —ñ–Ω—à–∏–π backend
      if (this.config.fallback && this.config.fallback !== backend && this.providers[this.config.fallback]) {
        logger.warn('ai-provider', `[AI Provider] üîÑ Switching to fallback: ${this.config.fallback}`);
        
        try {
          const result = await this._executeWithBackend(this.config.fallback, prompt, context, options);
          const latency = Date.now() - startTime;

          return {
            ...result,
            metadata: {
              backend: this.config.fallback,
              latency,
              fallback: true,
              originalBackend: backend,
              originalError: error.message
            }
          };
        } catch (fallbackError) {
          logger.error('ai-provider', `[AI Provider] ‚ùå Fallback also failed: ${fallbackError.message}`);
          throw new Error(`Both ${backend} and ${this.config.fallback} backends failed`);
        }
      }

      throw error;
    }
  }

  /**
   * –í–∏–∫–æ–Ω–∞—Ç–∏ —á–µ—Ä–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π backend
   * @private
   */
  async _executeWithBackend(backend, prompt, context, options) {
    const provider = this.providers[backend];
    
    if (!provider) {
      throw new Error(`Backend ${backend} not available`);
    }

    return await provider.execute(prompt, context, options);
  }

  /**
   * –í–∏–±—Ä–∞—Ç–∏ backend –Ω–∞ –æ—Å–Ω–æ–≤—ñ prompt, options, —Ç–∞ routing rules
   * 
   * @param {string} prompt - –¢–µ–∫—Å—Ç –∑–∞–ø–∏—Ç—É
   * @param {Object} options - –û–ø—Ü—ñ—ó (–º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ forceBackend)
   * @returns {string} –ù–∞–∑–≤–∞ backend ('goose' | 'mcp')
   */
  selectBackend(prompt, options) {
    // –Ø–∫—â–æ —è–≤–Ω–æ –≤–∫–∞–∑–∞–Ω–æ backend
    if (options.forceBackend) {
      logger.debug('ai-provider', `[AI Provider] Backend forced: ${options.forceBackend}`);
      return options.forceBackend;
    }

    // –Ø–∫—â–æ mode –Ω–µ hybrid - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ primary
    if (this.config.mode !== 'hybrid') {
      return this.config.primary;
    }

    // Hybrid mode: –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ routing rules
    const promptLower = prompt.toLowerCase();

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ MCP keywords (–ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –¥–ª—è simple operations)
    const mcpMatches = this.config.routing?.mcpKeywords?.some(kw => 
      promptLower.includes(kw.toLowerCase())
    );

    if (mcpMatches && this.providers.mcp) {
      logger.debug('ai-provider', '[AI Provider] Routing to MCP (keyword match)');
      return 'mcp';
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Goose keywords (–¥–ª—è reasoning)
    const gooseMatches = this.config.routing?.gooseKeywords?.some(kw => 
      promptLower.includes(kw.toLowerCase())
    );

    if (gooseMatches && this.providers.goose) {
      logger.debug('ai-provider', '[AI Provider] Routing to Goose (keyword match)');
      return 'goose';
    }

    // Default: primary backend
    logger.debug('ai-provider', `[AI Provider] Using primary backend: ${this.config.primary}`);
    return this.config.primary;
  }

  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ –º–µ—Ç—Ä–∏–∫–∏ –≤—Å—ñ—Ö backends
   * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
   */
  getMetrics() {
    const metrics = {};

    for (const [name, stats] of Object.entries(this.metrics)) {
      metrics[name] = {
        ...stats,
        avgLatency: stats.requests > 0 ? Math.round(stats.totalLatency / stats.requests) : 0,
        errorRate: stats.requests > 0 ? (stats.errors / stats.requests * 100).toFixed(2) + '%' : '0%'
      };
    }

    return metrics;
  }

  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö backends
   * @returns {string[]} –ú–∞—Å–∏–≤ –Ω–∞–∑–≤ backends
   */
  getAvailableBackends() {
    return Object.keys(this.providers);
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ backend –¥–æ—Å—Ç—É–ø–Ω–∏–π
   * @param {string} backend - –ù–∞–∑–≤–∞ backend
   * @returns {boolean}
   */
  isBackendAvailable(backend) {
    return !!this.providers[backend];
  }

  /**
   * Graceful shutdown –≤—Å—ñ—Ö backends
   */
  async shutdown() {
    logger.system('ai-provider', '[AI Provider] Shutting down backends...');

    for (const [name, provider] of Object.entries(this.providers)) {
      try {
        if (provider.shutdown) {
          await provider.shutdown();
          logger.system('ai-provider', `[AI Provider] ‚úÖ ${name} backend stopped`);
        }
      } catch (error) {
        logger.error('ai-provider', `[AI Provider] ‚ùå Error stopping ${name}: ${error.message}`);
      }
    }
  }
}

export default AIProviderInterface;
