#!/usr/bin/env node
/**
 * Test DI Container - MCP Services Registration
 * 
 * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —â–æ –≤—Å—ñ MCP —Å–µ—Ä–≤—ñ—Å–∏ —Ç–∞ processors –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ
 * —Ç–∞ –º–æ–∂—É—Ç—å –±—É—Ç–∏ resolved —á–µ—Ä–µ–∑ DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
 */

import { DIContainer } from '../orchestrator/core/di-container.js';
import { registerAllServices } from '../orchestrator/core/service-registry.js';

async function testMCPServices() {
    console.log('üß™ Testing DI Container - MCP Services Registration\n');

    try {
        // 1. –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        const container = new DIContainer();
        console.log('‚úÖ DIContainer created');

        // 2. –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏ –≤—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏
        registerAllServices(container);
        console.log('‚úÖ All services registered');

        // 3. –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        await container.initialize();
        console.log('‚úÖ Container initialized\n');

        // 4. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ core —Å–µ—Ä–≤—ñ—Å–∏
        console.log('üì¶ Core Services:');
        const logger = container.resolve('logger');
        console.log('  - logger:', logger ? '‚úÖ' : '‚ùå');
        
        const config = container.resolve('config');
        console.log('  - config:', config ? '‚úÖ' : '‚ùå');

        // 5. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ MCP workflow —Å–µ—Ä–≤—ñ—Å–∏
        console.log('\nüì¶ MCP Workflow Services:');
        const ttsSyncManager = container.resolve('ttsSyncManager');
        console.log('  - ttsSyncManager:', ttsSyncManager ? '‚úÖ' : '‚ùå');
        
        const mcpTodoManager = container.resolve('mcpTodoManager');
        console.log('  - mcpTodoManager:', mcpTodoManager ? '‚úÖ' : '‚ùå');

        // 6. –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ MCP processors
        console.log('\nüì¶ MCP Stage Processors:');
        const processors = [
            'backendSelectionProcessor',
            'atlasTodoPlanningProcessor',
            'tetyana–ülanToolsProcessor',
            'tetyanaExecuteToolsProcessor',
            'grishaVerifyItemProcessor',
            'atlasAdjustTodoProcessor',
            'mcpFinalSummaryProcessor'
        ];

        let processorCount = 0;
        for (const name of processors) {
            const processor = container.resolve(name);
            const status = processor ? '‚úÖ' : '‚ùå';
            console.log(`  - ${name}: ${status}`);
            if (processor) processorCount++;
        }

        // 7. –ü—ñ–¥—Å—É–º–æ–∫
        console.log('\nüìä Summary:');
        console.log(`  Total services: ${container.getServices().length}`);
        console.log(`  MCP processors: ${processorCount}/7`);

        if (processorCount === 7 && ttsSyncManager && mcpTodoManager) {
            console.log('\n‚úÖ All MCP services registered successfully!');
            process.exit(0);
        } else {
            console.log('\n‚ùå Some services missing!');
            process.exit(1);
        }

    } catch (error) {
        console.error('\n‚ùå Test failed:', error.message);
        console.error(error.stack);
        process.exit(1);
    }
}

testMCPServices();
