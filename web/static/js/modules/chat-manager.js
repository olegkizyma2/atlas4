/**
 * CHAT MANAGER MODULE
 * –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ —á–∞—Ç—É, –≤–∏–Ω–µ—Å–µ–Ω–∞ –∑ intelligent-chat-manager.js
 */

import { logger } from '../core/logger.js';
import { AGENTS, CHAT_CONFIG } from '../core/config.js';
import { orchestratorClient } from '../core/api-client.js';
import { TTSManager } from './tts-manager.js';

export class ChatManager {
  constructor() {
    this.logger = new logger.constructor('CHAT');
    this.ttsManager = new TTSManager();

    this.messages = [];
    this.isStreaming = false;
    this.isStreamPending = false;
    this.currentSession = null;

    /** @type {Map<string, Set<Function>>} */
    this.eventHandlers = new Map();

    this.ttsFailureCount = 0;
    this.ttsBackoffTimer = null;
    this.ttsPollingIntervalDuration = CHAT_CONFIG?.tts?.ttsPollingInterval || CHAT_CONFIG?.ttsPollingInterval || 500;

    // –ù–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –æ–∑–≤—É—á–µ–Ω–Ω—è
    this.fullTextMode = CHAT_CONFIG?.tts?.fullTextMode ?? true;
    this.enableChunking = CHAT_CONFIG?.tts?.enableChunking ?? true;
    this.continuousPlayback = CHAT_CONFIG?.tts?.continuousPlayback ?? true;
    this.autoPlay = CHAT_CONFIG?.tts?.autoPlay ?? true;

    // –¢–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è —è–∫—â–æ —â–æ—Å—å –∑–∞—Å—Ç—Ä—è–ª–æ
    this.streamingTimeout = null;

    // –í–ò–î–ê–õ–ï–ù–û: this.init() - –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è —è–≤–Ω–æ –≤ app-refactored.js
    // –¶–µ –∑–∞–ø–æ–±—ñ–≥–∞—î –ø–æ–¥–≤—ñ–π–Ω—ñ–π —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
  }

  on(event, handler) {
    if (!this.eventHandlers.has(event)) {
      this.eventHandlers.set(event, new Set());
    }
    this.eventHandlers.get(event).add(handler);
    return () => this.off(event, handler);
  }

  off(event, handler) {
    const handlers = this.eventHandlers.get(event);
    if (handlers) {
      handlers.delete(handler);
      if (!handlers.size) {
        this.eventHandlers.delete(event);
      }
    }
  }

  emit(event, payload) {
    const handlers = this.eventHandlers.get(event);
    if (!handlers) return;
    handlers.forEach(handler => {
      try {
        handler(payload);
      } catch (error) {
        this.logger.warn(`Event handler error for ${event}`, error?.message || error);
      }
    });
  }

  async init() {
    if (this._initialized) {
      this.logger.debug('Chat Manager already initialized, skipping');
      return;
    }

    this.logger.info('Initializing Chat Manager...');

    // –î–æ–¥–∞—î–º–æ –ª–æ–≥ —É –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    if (window.atlasLogger) {
      window.atlasLogger.info('üí¨ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Chat Manager', 'ChatManager');
    }

    await this.ttsManager.init();
    this.setupUI();
    this.setupEventListeners();
    // –ù–ï –∑–∞–ø—É—Å–∫–∞—î–º–æ TTS polling, –æ—Å–∫—ñ–ª—å–∫–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä—è–º–∏–π TTS
    // this.startTTSPolling();
    this._initialized = true;

    window.atlasChat = {
      chatManager: this,
      ttsManager: this.ttsManager
    };

    this.logger.info('Chat Manager initialized');

    // –î–æ–¥–∞—î–º–æ –ª–æ–≥ —É –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    if (window.atlasLogger) {
      window.atlasLogger.success('‚úÖ Chat Manager –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏', 'ChatManager');
    }
  }

  setupUI() {
    this.chatContainer = document.getElementById('chat-container');
    this.inputElement = document.getElementById('message-input');
    this.sendButton = document.getElementById('send-button');

    this.logger.info(`UI Elements found: chat-container=${!!this.chatContainer}, message-input=${!!this.inputElement}, send-button=${!!this.sendButton}`);

    if (!this.chatContainer || !this.inputElement || !this.sendButton) {
      this.logger.error('Required UI elements not found');
      return;
    }

    // –ó–∞–±–µ–∑–ø–µ—á—É—î–º–æ —â–æ –ø–æ–ª–µ –≤–≤–æ–¥—É —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–µ –ø—Ä–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    if (this.inputElement) {
      this.inputElement.disabled = false;
      this.inputElement.focus(); // –î–æ–¥–∞—î–º–æ —Ñ–æ–∫—É—Å –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
    }
    if (this.sendButton) {
      this.sendButton.disabled = false;
    }

    this.setupAutoScroll();
  }

  setupEventListeners() {
    if (this.sendButton) {
      this.sendButton.addEventListener('click', (e) => {
        e.preventDefault();
        if (!this.isStreaming && this.inputElement?.value?.trim()) {
          this.sendMessage();
        }
      });
    }

    if (this.inputElement) {
      this.inputElement.addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
          e.preventDefault();
          if (!this.isStreaming && this.inputElement.value.trim()) {
            this.sendMessage();
          }
        }
      });
    }

    window.addEventListener('atlas-tts-completed', (e) => {
      this.logger.info(`TTS completed for ${e.detail.agent}`);
    });
  }

  setupAutoScroll() {
    if (!this.chatContainer) return;

    const observer = new MutationObserver(() => {
      this.scrollToBottom();
    });

    observer.observe(this.chatContainer, {
      childList: true,
      subtree: true
    });
  }

  scrollToBottom() {
    if (this.chatContainer) {
      this.chatContainer.scrollTop = this.chatContainer.scrollHeight;
    }
  }

  addMessage(content, agent = 'user', signature = null) {
    const message = {
      id: `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      content,
      agent,
      signature: signature || AGENTS[agent]?.signature || `[${agent.toUpperCase()}]`,
      timestamp: Date.now(),
      color: AGENTS[agent]?.color || '#ffffff'
    };

    this.messages.push(message);
    this.renderMessage(message);

    if (this.messages.length > CHAT_CONFIG.maxMessages) {
      this.messages.shift();
      this.removeOldestMessage();
    }

    return message;
  }

  addUserMessage(content) {
    return this.addMessage(content, 'user');
  }

  renderMessage(message) {
    if (!this.chatContainer) return;

    const messageElement = document.createElement('div');
    const agentClass = `agent-${message.agent || 'system'}`;
    messageElement.className = `chat-entry ${agentClass}`;
    messageElement.setAttribute('data-message-id', message.id);

    const timestamp = new Date(message.timestamp).toLocaleTimeString('uk-UA', {
      hour12: false,
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });

    messageElement.innerHTML = `
            <span class="chat-timestamp">${timestamp}</span>
            <span class="chat-agent">${message.signature || message.agent}</span>
            <span class="chat-message">${this.formatMessageContent(message.content)}</span>
        `;

    this.chatContainer.appendChild(messageElement);
  }

  formatMessageContent(content) {
    return content
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      .replace(/\*(.*?)\*/g, '<em>$1</em>')
      .replace(/`(.*?)`/g, '<code>$1</code>')
      .replace(/\n/g, '<br>');
  }

  removeOldestMessage() {
    if (!this.chatContainer) return;
    const firstMessage = this.chatContainer.querySelector('.message');
    if (firstMessage) {
      firstMessage.remove();
    }
  }

  async sendMessage(message) {
    const input = (typeof message === 'string' && message.trim())
      ? message.trim()
      : this.inputElement?.value?.trim();

    this.logger.info(`üí¨ sendMessage called with: "${input}" (isStreaming: ${this.isStreaming})`);

    if (!input || this.isStreaming) {
      this.logger.warn(`‚ùå Message rejected - ${!input ? 'empty input' : 'already streaming'}`);
      return;
    }

    const isManualInput = typeof message !== 'string';
    if (this.inputElement && isManualInput) {
      // –û—á–∏—â—É—î–º–æ –ø–æ–ª–µ —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—è, —â–æ–± –ø—Ä–æ–≥—Ä–∞–º–Ω—ñ –≤–∏–∫–ª–∏–∫–∏ –º–æ–≥–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ç–µ–∫—Å—Ç
      this.inputElement.value = '';
    }

    this.addMessage(input, 'user');
    this.emit('message-sent', { message: input });

    this.setStreamingState(true);

    try {
      this.logger.info('Starting message stream...');
      await this.streamFromOrchestrator(input);
      this.logger.info('Message stream completed successfully');
    } catch (error) {
      this.logger.error('Failed to send message', error.message);
      this.addMessage(`‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.message}`, 'error');
    } finally {
      this.logger.info('Cleaning up streaming state...');
      this.setStreamingState(false);
    }
  }

  async streamFromOrchestrator(message) {
    this.logger.info(`Streaming to orchestrator: ${message.substring(0, 50)}...`);

    // –î–æ–¥–∞—î–º–æ –ª–æ–≥ —É –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    if (window.atlasLogger) {
      window.atlasLogger.info('üì§ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ Orchestrator', 'Chat-System');
    }

    const sessionId = this.currentSession || `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    this.currentSession = sessionId;

    return new Promise((resolve, reject) => {
      orchestratorClient.stream(
        '/chat/stream',
        {
          message,
          sessionId,
          enableTTS: this.ttsManager.isEnabled()
        },
        (data) => this.handleStreamMessage(data),
        (error) => {
          this.logger.error('Stream error', error.message);

          // –î–æ–¥–∞—î–º–æ –ª–æ–≥ —É –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
          if (window.atlasLogger) {
            window.atlasLogger.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—Ç–æ–∫—É: ${error.message}`, 'Chat-System');
          }

          reject(error);
        },
        async () => {
          this.logger.info('Stream completed');

          // –î–æ–¥–∞—î–º–æ –ª–æ–≥ —É –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
          if (window.atlasLogger) {
            window.atlasLogger.success('‚úÖ –ü–æ—Ç—ñ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ', 'Chat-System');
          }
          if (this._ttsSequence) {
            try {
              await this._ttsSequence;
            } catch (waitError) {
              this.logger.debug('TTS sequence wait failed:', waitError?.message || waitError);
            }
          }
          resolve();
        }
      );
    });
  }

  async streamFromOrchestratorWithOptions(message, options = {}) {
    this.logger.info(`Streaming (opts) to orchestrator: ${message.substring(0, 50)}...`);

    const sessionId = this.currentSession || `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    this.currentSession = sessionId;

    return new Promise((resolve, reject) => {
      orchestratorClient.stream(
        '/chat/stream',
        {
          message,
          sessionId,
          enableTTS: this.ttsManager.isEnabled(),
          ...options
        },
        (data) => this.handleStreamMessage(data),
        (error) => {
          this.logger.error('Stream error', error.message);
          reject(error);
        },
        () => {
          this.logger.info('Stream completed');
          resolve();
        }
      );
    });
  }

  async handleStreamMessage(data) {
    // –ë—É–¥—å-—è–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–æ—Ç–æ–∫—É –æ–∑–Ω–∞—á–∞—î –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å ‚Äî –æ–Ω–æ–≤–ª—é—î–º–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π —Ç–∞–π–º–µ—Ä
    if (this.isStreaming && this.streamingTimeout) {
      clearTimeout(this.streamingTimeout);
      // –ø–æ–¥–æ–≤–∂—É—î–º–æ —â–µ –Ω–∞ 150—Å –≤—ñ–¥ –º–æ–º–µ–Ω—Ç—É –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
      this.streamingTimeout = setTimeout(() => {
        this.logger.warn('Streaming timeout after 150s - force unlocking input. Check orchestrator connection.');
        if (window.atlasLogger) {
          window.atlasLogger.warn('‚è∞ –¢–∞–π–º-–∞—É—Ç streaming - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è', 'Chat-System');
        }
        this.setStreamingState(false);
      }, 150000);
    }

    switch (data.type) {
      case 'agent_message':
        this._ttsSequence = (this._ttsSequence || Promise.resolve()).then(() =>
          this.handleAgentMessage(data.data)
        );
        await this._ttsSequence;
        break;
      case 'status_update':
        this.handleStatusUpdate(data.data);
        break;
      case 'error':
        this.handleError(data.data);
        break;
      case 'workflow_started':
        this.handleWorkflowStarted(data.data);
        break;
      case 'workflow_complete':
        this.handleWorkflowComplete(data.data);
        break;
      case 'tts_start':
        this.emit('tts-start', data.data);
        break;
      case 'tts_stop':
        this.emit('tts-stop', data.data);
        break;
      default:
        this.logger.debug('Unknown stream message type', data.type);
    }
  }

  handleWorkflowStarted(data) {
    this.logger.info('üöÄ Workflow started - enabling global stop listening');
    try {
      const voiceIntegration = window.atlasApp?.managers?.voiceControl;
      const voiceManager = voiceIntegration?.voiceControl;
      const microphoneService = voiceManager?.getService?.('microphone');

      if (microphoneService?.onWorkflowStarted) {
        microphoneService.onWorkflowStarted();
      }
    } catch (error) {
      this.logger.debug('Failed to notify microphone service about workflow start:', error?.message || error);
    }

    this.emit('workflow-started', data);
  }

  handleWorkflowComplete(data) {
    this.logger.info('‚úÖ Workflow completed - disabling global stop listening');
    try {
      const voiceIntegration = window.atlasApp?.managers?.voiceControl;
      const voiceManager = voiceIntegration?.voiceControl;
      const microphoneService = voiceManager?.getService?.('microphone');
      if (microphoneService?.onWorkflowCompleted) {
        microphoneService.onWorkflowCompleted();
      }
    } catch (error) {
      this.logger.debug('Failed to notify microphone service about workflow completion:', error?.message || error);
    }

    this.addMessage('‚úÖ –ó–∞–≤–¥–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ', 'system');
    this.emit('workflow-complete', data);
  }

  async handleAgentMessage(messageData) {
    const { content, agent, ttsContent, voice, messageId, mode, ttsOptimized } = messageData;

    // –î–æ–¥–∞—î–º–æ –ª–æ–≥ —É –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    if (window.atlasLogger) {
      const agentName = agent.toUpperCase();
      const statusText = `üìù –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ ${agentName}`;
      window.atlasLogger.success(statusText, `Agent-${agentName}`);
    }

    this.emit('agent-response-start', messageData);
    const message = this.addMessage(content, agent);
    this.emit('agent-response-complete', { agent, message });

    // –ú–∏—Ç—Ç—î–≤–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ä–µ–Ω–¥–µ—Ä–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¢–µ—Ç—è–Ω–∏ –¥–ª—è —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è workflow –Ω–∞ –±–µ–∫–µ–Ω–¥—ñ
    if (agent === 'tetyana' && this.currentSession && messageId) {
      // –ß–µ–∫–∞—î–º–æ –æ–¥–∏–Ω –∫–∞–¥—Ä, —â–æ–± –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –≤—ñ–¥–±—É–ª–∞—Å—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ DOM
      requestAnimationFrame(() => {
        orchestratorClient.post('/chat/confirm', {
          sessionId: this.currentSession,
          messageId
        }).catch(err => {
          this.logger.debug('Failed to send chat confirmation:', err?.message || err);
        });
      });
    }

    // –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ –¥—É–±–ª—é–≤–∞–Ω–Ω—è TTS –∑–∞ messageId
    const ttsKey = `tts_${messageId || 'unknown'}`;
    if (this._processedTTS?.has(ttsKey)) {
      this.logger.debug(`TTS already processed for message: ${ttsKey}`);
      return message;
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Set –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö TTS
    if (!this._processedTTS) {
      this._processedTTS = new Set();
    }

    // TTS –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è - –≤—ñ–¥–¥–∞—î–º–æ –ø–µ—Ä–µ–≤–∞–≥—É –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É, —è–∫—â–æ –≤—ñ–Ω –¥–æ—Å—Ç—É–ø–Ω–∏–π
    let textForTTS;
    if (ttsOptimized && ttsContent && ttsContent.trim()) {
      textForTTS = ttsContent.trim();
      this.logger.debug(`Using optimized TTS content: ${textForTTS.length} characters`);
    } else if (this.fullTextMode) {
      // –ü–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç (content) - –∑–∞–º—ñ—Å—Ç—å —Å–∫–æ—Ä–æ—á–µ–Ω–æ–≥–æ ttsContent
      textForTTS = content;
      this.logger.debug(`Using full text mode for TTS: ${content?.length || 0} characters`);
    } else {
      // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ä–µ–∂–∏–º (—Å–∫–æ—Ä–æ—á–µ–Ω–∏–π —Ç–µ–∫—Å—Ç)
      textForTTS = ttsContent || content;
    }

    // –ö–†–ò–¢–ò–ß–ù–ï –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –í–∏–¥–∞–ª—è—î–º–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–∏ –∞–≥–µ–Ω—Ç—ñ–≤ [ATLAS], [–¢–ï–¢–Ø–ù–ê], [–ì–†–ò–®–ê] –ø–µ—Ä–µ–¥ TTS
    // –©–æ–± –Ω–µ –æ–∑–≤—É—á—É–≤–∞–ª–∏—Å—å –ª–µ–π–±–µ–ª–∏, —è–∫—ñ –≤–∂–µ —î –≤ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ —á–∞—Ç—É
    textForTTS = textForTTS?.replace(/^\[.*?\]\s*/, '').trim();

    if (textForTTS && textForTTS.trim() && this.ttsManager.isEnabled()) {
      try {
        const agentConfig = AGENTS[agent];
        const ttsVoice = voice || agentConfig?.voice;

        if (ttsVoice) {
          // –ü–æ–∑–Ω–∞—á–∞—î–º–æ —è–∫ –æ–±—Ä–æ–±–ª–µ–Ω–µ
          this._processedTTS.add(ttsKey);

          // –í–∏–∑–Ω–∞—á–∞—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ —á–∞–Ω–∫—É–≤–∞–Ω–Ω—è: —Ç—ñ–ª—å–∫–∏ –¥–ª—è task —Ä–µ–∂–∏–º—É
          const isTaskMode = mode === 'task';
          const shouldChunk = isTaskMode && this.enableChunking && textForTTS.length > 500;

          this.logger.info(`üéµ Queueing TTS for ${agent} (voice: ${ttsVoice}, mode: ${mode || 'chat'}, fullText: ${this.fullTextMode ? 'YES' : 'NO'}, chunking: ${shouldChunk ? 'YES' : 'NO'}, length: ${textForTTS.length})`);

          // –ï–º—ñ—Ç–∏–º–æ –ø–æ–¥—ñ—ó –¥–ª—è UI
          this.emit('tts-start', { agent, voice: ttsVoice, text: textForTTS, mode });

          const voiceIntegration = window.atlasApp?.managers?.voiceControl;
          const voiceManager = voiceIntegration?.voiceControl;
          const microphoneService = voiceManager?.getService?.('microphone');
          if (microphoneService?.pauseForTTS) {
            try {
              microphoneService.pauseForTTS(agent);
            } catch (pauseError) {
              this.logger.debug('Microphone pause for TTS failed:', pauseError?.message || pauseError);
            }
          }

          // CRITICAL FIX: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —á–µ—Ä–≥—É TTS —â–æ–± –ø–æ—Ç–æ—á–Ω–µ –æ–∑–≤—É—á–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º
          // –¶–µ –∑–∞–ø–æ–±—ñ–≥–∞—î —Å–∏—Ç—É–∞—Ü—ñ—ó –∫–æ–ª–∏ –ê—Ç–ª–∞—Å —â–µ –≥–æ–≤–æ—Ä–∏—Ç—å –∑–∞–≤–¥–∞–Ω–Ω—è, –∞ –¢–µ—Ç—è–Ω–∞ –≤–∂–µ –≤–∏–∫–æ–Ω—É—î –π–æ–≥–æ
          const ttsOptions = { mode: mode || 'chat' };
          await this.ttsManager.addToQueue(textForTTS, agent, ttsOptions);

          this.logger.info(`‚úÖ TTS completed for ${agent}`);

          // CRITICAL (11.10.2025 - 17:40): Debug logging –¥–ª—è conversation loop
          const eventData = { agent, voice: ttsVoice, mode: mode || 'chat' };
          console.log('[CHAT] üì¢ Emitting tts-stop event:', eventData, {
            hasEventHandlers: this.eventHandlers.has('tts-stop'),
            handlersCount: this.eventHandlers.get('tts-stop')?.size || 0
          });

          // CRITICAL: –ü–µ—Ä–µ–¥–∞—î–º–æ mode –¥–ª—è conversation loop detection
          this.emit('tts-stop', eventData);

          if (microphoneService?.resumeAfterTTS) {
            try {
              microphoneService.resumeAfterTTS(agent);
            } catch (resumeError) {
              this.logger.debug('Microphone resume after TTS failed:', resumeError?.message || resumeError);
            }
          }

          // –û—á–∏—â–∞—î–º–æ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –ø–µ—Ä–µ–ø–æ–≤–Ω–µ–Ω–Ω—è –ø–∞–º'—è—Ç—ñ
          setTimeout(() => {
            this._processedTTS?.delete(ttsKey);
          }, 30000);
        } else {
          this.logger.debug(`No voice configured for agent: ${agent}`);
        }
      } catch (error) {
        this.logger.error(`TTS failed for ${agent}:`, error?.message || error);
        // –í–∏–¥–∞–ª—è—î–º–æ –∑ –æ–±—Ä–æ–±–ª–µ–Ω–æ–≥–æ –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ –¥–ª—è –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –ø–æ–≤—Ç–æ—Ä—É
        this._processedTTS?.delete(ttsKey);
      }
    }

    return message;
  }

  handleStatusUpdate(statusData) {
    const { agent, stage, status } = statusData;
    this.logger.info(`Status update: ${agent} - ${stage} - ${status}`);
    this.showStatusIndicator(agent, stage, status);
  }

  handleError(errorData) {
    const { message, agent } = errorData;
    this.logger.error(`Agent error: ${agent}`, message);
    this.addMessage(`‚ùå ${agent}: ${message}`, 'error');
    this.emit('agent-error', { agent, message });
  }

  showStatusIndicator(agent, stage, status) {
    const agentName = AGENTS[agent]?.name || agent;
    const statusMessage = `${agentName}: ${stage} - ${status}`;
    this.logger.debug(statusMessage);
    this.emit('status-update', { agent, stage, status });
  }

  setStreamingState(isStreaming) {
    this.isStreaming = isStreaming;

    // –û—á–∏—â—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∞–π–º–µ—Ä
    if (this.streamingTimeout) {
      clearTimeout(this.streamingTimeout);
      this.streamingTimeout = null;
    }

    if (this.sendButton) {
      this.sendButton.disabled = isStreaming;
      this.sendButton.textContent = isStreaming ? '–û–±—Ä–æ–±–∫–∞...' : '–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏';
    }

    if (this.inputElement) {
      this.inputElement.disabled = isStreaming;
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ 2.5 —Ö–≤–∏–ª–∏–Ω–∏ —è–∫—â–æ —â–æ—Å—å –∑–∞—Å—Ç—Ä—è–ª–æ (–¥–ª—è –¥–æ–≤–≥–∏—Ö TTS)
    if (isStreaming) {
      this.streamingTimeout = setTimeout(() => {
        this.logger.warn('Streaming timeout after 150s - force unlocking input. Check orchestrator connection.');

        // –î–æ–¥–∞—î–º–æ –ª–æ–≥ —É –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        if (window.atlasLogger) {
          window.atlasLogger.warn('‚è∞ –¢–∞–π–º-–∞—É—Ç streaming - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ä–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è', 'Chat-System');
        }

        this.setStreamingState(false);
      }, 150000);
    }
  }

  // ==========================================
  // TTS POLLING –í–ò–î–ê–õ–ï–ù–û - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä—è–º–∏–π TTS
  // ==========================================
  // –°—Ç–∞—Ä–∏–π –º–µ—Ö–∞–Ω—ñ–∑–º TTS polling –ø—Ä–∏–∑–≤–æ–¥–∏–≤ –¥–æ –¥—É–±–ª—é–≤–∞–Ω–Ω—è TTS –≤–∏–∫–ª–∏–∫—ñ–≤
  // –¢–µ–ø–µ—Ä TTS –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –≤ handleAgentMessage()

  enableTTS() {
    localStorage.setItem('atlas_voice_enabled', 'true');
    this.logger.info('TTS enabled');
  }

  disableTTS() {
    localStorage.setItem('atlas_voice_enabled', 'false');
    this.ttsManager.stop();
    this.logger.info('TTS disabled');
  }

  setTTSMode(mode) {
    this.ttsManager.setMode(mode);
  }

  getTTSMode() {
    return this.ttsManager.getMode();
  }

  clearChat() {
    this.messages = [];
    if (this.chatContainer) {
      this.chatContainer.innerHTML = '';
    }
    this.logger.info('Chat cleared');
  }

  destroy() {
    if (this.ttsPollingInterval) {
      clearInterval(this.ttsPollingInterval);
      this.ttsPollingInterval = null;
    }

    if (this.eventHandlers) {
      this.eventHandlers.clear();
    }

    if (this.ttsPollingInterval) {
      clearInterval(this.ttsPollingInterval);
      this.ttsPollingInterval = null;
    }

    if (this.ttsBackoffTimer) {
      clearTimeout(this.ttsBackoffTimer);
      this.ttsBackoffTimer = null;
    }

    if (this.sendButton) {
      this.sendButton.disabled = false;
      this.sendButton.textContent = '–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏';
    }

    if (this.inputElement) {
      this.inputElement.disabled = false;
    }

    this.logger.info('Chat Manager destroyed');
  }
}
