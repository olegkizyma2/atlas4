/**
 * @fileoverview –£—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –≥–æ–ª–æ—Å–æ–≤–∏–º —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è–º
 * –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó, —Ñ—ñ–ª—å—Ç—Ä–∏ —Ç–∞ –≤–∞–ª—ñ–¥–∞—Ç–æ—Ä–∏
 */

import { VOICE_CONFIG } from '../core/config.js';
import { createLogger } from '../core/logger.js';

const logger = createLogger('VOICE_UTILS');

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î —Ñ—Ä–∞–∑–∞ —Ñ–æ–Ω–æ–≤–æ—é (–ø–æ—Ç—Ä—ñ–±–Ω–æ —ñ–≥–Ω–æ—Ä—É–≤–∞—Ç–∏)
 * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
 * @param {Object} [config] - –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Ñ—ñ–ª—å—Ç—Ä–∞
 * @returns {boolean} - –ß–∏ —î —Ñ—Ä–∞–∑–∞ —Ñ–æ–Ω–æ–≤–æ—é
 */
export function isBackgroundPhrase(text, config = VOICE_CONFIG.backgroundFilter) {
  if (!text || typeof text !== 'string') {
    return true;
  }

  if (!config.enabled) {
    return false;
  }

  const cleanText = text.toLowerCase().trim();

  // –ó–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–∞ —Ñ—Ä–∞–∑–∞
  if (cleanText.length < config.minPhraseLength) {
    return true;
  }

  // ‚úÖ –§–Ü–ö–° (12.10.2025 - 16:25): –†–æ–∑—à–∏—Ä–µ–Ω–æ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é —Ñ–æ–Ω–æ–≤–∏—Ö —Ñ—Ä–∞–∑
  // –ü—Ä–æ–±–ª–µ–º–∞: "–î—è–∫—É—é", "–î–æ–±—Ä–µ", "–¢–∞–∫" –∑ YouTube –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —Ñ—ñ–ª—å—Ç—Ä
  // –†—ñ—à–µ–Ω–Ω—è: –î–æ–¥–∞–Ω–æ YouTube endings + –∫–æ—Ä–æ—Ç–∫—ñ —Ñ–æ–Ω–æ–≤—ñ —Ñ—Ä–∞–∑–∏
  
  // –§–Ü–õ–¨–¢–† 1: YouTube/video endings —Ç–∞ credits
  const youtubeEndings = [
    '–¥—è–∫—É—é –∑–∞ –ø–µ—Ä–µ–≥–ª—è–¥',
    '–¥—è–∫—É—é –∑–∞ —É–≤–∞–≥—É',
    '–ø—ñ–¥–ø–∏—Å—É–π—Å—è –Ω–∞ –∫–∞–Ω–∞–ª',
    '—Å—Ç–∞–≤—Ç–µ –ª–∞–π–∫',
    '—Å—É–±—Ç–∏—Ç—Ä—É–≤–∞–ª—å–Ω–∏—Ü—è',
    '–æ–ª—è —à–æ—Ä',
    '—Å—É–±—Ç–∏—Ç—Ä',
    '–∞–≤—Ç–æ—Ä –ø—Ä–æ—î–∫—Ç—É',
    '–∫—ñ–Ω–µ—Ü—å',
    'the end',
    'ending',
    'credits',
    '–∞–ø–ª–æ–¥–∏—Ä—É—é—Ç—å',
    '–¥–æ –∑—É—Å—Ç—Ä—ñ—á—ñ',
    '–¥–æ –ø–æ–±–∞—á–µ–Ω–Ω—è',
    '–∫–æ–º–µ–Ω—Ç—É–π—Ç–µ',
    '–ø—ñ–¥–ø–∏—Å—É–π—Ç–µ—Å—å'
  ];

  for (const ending of youtubeEndings) {
    if (cleanText.includes(ending)) {
      logger.debug(`üé¨ YouTube ending detected: "${text}" (contains: "${ending}")`);
      return true;
    }
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω—ñ —Ñ—Ä–∞–∑–∏
  for (const ignoredPhrase of config.ignoredPhrases) {
    if (cleanText.includes(ignoredPhrase.toLowerCase())) {
      logger.debug(`Background phrase detected: "${text}" (contains: "${ignoredPhrase}")`);
      return true;
    }
  }

  // –ö–æ—Ä–æ—Ç–∫–∞ —Ñ—Ä–∞–∑–∞ –∑ –ø–æ—à–∏—Ä–µ–Ω–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
  if (cleanText.length <= config.maxBackgroundLength) {
    const commonWords = [
      '—Ç–∞–∫', '–Ω—ñ', '–¥–æ–±—Ä–µ', '–≥–∞—Ä–∞–∑–¥', '–æ–∫–µ–π', '–æ–∫', '—É–≥—É', '–∞–≥–∞',
      '—Ö–º', '–µ–º', '–Ω—É', '–æ—Ç', '—Ü–µ', '—Ç–æ', '–∞', '—ñ', '–∞–±–æ', '–∞–ª–µ',
      '–¥—è–∫—É—é', '—Å–ø–∞—Å–∏–±—ñ', '–±—É–¥—å –ª–∞—Å–∫–∞', '–≤–∏–±–∞—á—Ç–µ', '–ø—Ä–æ–±–∞—á—Ç–µ',
      '–¥–∞', '–Ω–µ—Ç', '—Ö–æ—Ä–æ—à–æ', 'yes', 'no', 'okay'
    ];

    const words = cleanText.split(/\s+/).filter(w => w.length > 0);
    if (words.length <= 2 && words.every(word => commonWords.includes(word))) {
      logger.debug(`Background phrase detected: "${text}" (common words only)`);
      return true;
    }
  }

  return false;
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥–æ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
 * @param {number} [confidence=1.0] - –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è [0-1]
 * @param {Object} [config] - –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Ñ—ñ–ª—å—Ç—Ä–∞
 * @returns {boolean} - –ß–∏ —î —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥–æ—é
 */
export function isUserCommand(text, confidence = 1.0, config = VOICE_CONFIG.backgroundFilter) {
  if (isBackgroundPhrase(text, config)) {
    return false;
  }

  // –ù–∏–∑—å–∫–∞ –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ —Ç–µ–∫—Å—Ç—É
  if (confidence < config.confidenceThreshold && text.length < 20) {
    logger.debug(`Low confidence command rejected: "${text}" (confidence: ${confidence})`);
    return false;
  }

  // –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ –∫–æ–º–∞–Ω–¥
  const commandIndicators = [
    // –ü–∏—Ç–∞–ª—å–Ω—ñ —Å–ª–æ–≤–∞
    '—â–æ', '—è–∫', '–¥–µ', '–∫–æ–ª–∏', '—á–æ–º—É', '—Ö—Ç–æ', '—Å–∫—ñ–ª—å–∫–∏', '—è–∫–∏–π', '—è–∫–∞', '—è–∫–µ', '—è–∫—ñ',
    'what', 'how', 'where', 'when', 'why', 'who', 'which',
    // –î—ñ—î—Å–ª–æ–≤–∞ –∫–æ–º–∞–Ω–¥
    '–∑—Ä–æ–±–∏', '—Å—Ç–≤–æ—Ä–∏', '–Ω–∞–ø–∏—à–∏', '–ø–æ–∫–∞–∂–∏', '–∑–Ω–∞–π–¥–∏', '–≤—ñ–¥–∫—Ä–∏–π', '–∑–∞–∫—Ä–∏–π', '–∑–∞–ø—É—Å—Ç–∏',
    'do', 'make', 'create', 'write', 'show', 'find', 'open', 'close', 'run',
    // –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—Ä–∞–∑–∏
    '–¥–æ–ø–æ–º–æ–∂–∏', '–ø–æ—è—Å–Ω–∏', '—Ä–æ–∑–∫–∞–∂–∏', '—Å–∫–∞–∂–∏', '–º–æ–∂–µ—à', '—Ö–æ—á—É', '–ø–æ—Ç—Ä—ñ–±–Ω–æ', '—Ç—Ä–µ–±–∞',
    'help', 'explain', 'tell', 'say', 'can', 'want', 'need'
  ];

  const lowerText = text.toLowerCase();
  const hasCommandIndicator = commandIndicators.some(indicator =>
    lowerText.includes(indicator));

  if (hasCommandIndicator) {
    logger.debug(`Command indicator found: "${text}"`);
    return true;
  }

  // –î–æ–≤–≥–∏–π —Ç–µ–∫—Å—Ç –π–º–æ–≤—ñ—Ä–Ω–æ –∫–æ–º–∞–Ω–¥–∞
  if (text.length > 30) {
    logger.debug(`Long text treated as command: "${text}"`);
    return true;
  }

  // –í–∏—Å–æ–∫–∞ –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å
  const isCommand = confidence >= config.confidenceThreshold;
  if (isCommand) {
    logger.debug(`High confidence command: "${text}" (confidence: ${confidence})`);
  }

  return isCommand;
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î —Ç–µ–∫—Å—Ç —Å—Ç–æ–ø-–∫–æ–º–∞–Ω–¥–æ—é
 * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
 * @param {string[]} [stopCommands] - –°–ø–∏—Å–æ–∫ —Å—Ç–æ–ø-–∫–æ–º–∞–Ω–¥
 * @returns {boolean} - –ß–∏ —î —Ç–µ–∫—Å—Ç —Å—Ç–æ–ø-–∫–æ–º–∞–Ω–¥–æ—é
 */
export function isStopCommand(text, stopCommands = VOICE_CONFIG.stopCommands) {
  if (!text || typeof text !== 'string') {
    return false;
  }

  const lowerText = text.toLowerCase().trim();

  return stopCommands.some(stopCmd =>
    lowerText.includes(stopCmd.toLowerCase()));
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –º—ñ—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó
 * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
 * @param {string[]} [keywords] - –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞
 * @returns {boolean} - –ß–∏ –º—ñ—Å—Ç–∏—Ç—å –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ
 */
export function containsActivationKeyword(text, keywords = VOICE_CONFIG.activation.keywords) {
  if (!text || typeof text !== 'string') {
    return false;
  }

  const normalizedText = normalizeText(text);
  logger.debug(`[KEYWORD] üîç Checking text: "${text}"`);

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Ç–æ—á–Ω–µ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è –∑ keywords
  for (const keyword of keywords) {
    const normalizedKeyword = normalizeText(keyword);
    if (normalizedText.includes(normalizedKeyword)) {
      logger.info(`[KEYWORD] ‚úÖ Exact match found: "${keyword}" in "${text}"`);
      return true;
    }
  }

  // Fuzzy matching –¥–ª—è –≤–∞—Ä—ñ–∞—Ü—ñ–π "–∞—Ç–ª–∞—Å" - –í–ò–ü–†–ê–í–õ–ï–ù–û (11.10.2025 - 21:05)
  // –í–ò–î–ê–õ–ï–ù–û –ù–ï–ë–ï–ó–ü–ï–ß–ù–Ü –ö–û–†–û–¢–ö–Ü –í–ê–†–Ü–ê–¶–Ü–á: '–ª–∞—Å', '–ª–∞—Å—Å', '—Ç–ª–∞—Å', '—Ç–ª—É—Å', '—Ç–ª–∞–∑'
  // –ü—Ä–∏—á–∏–Ω–∞: "–±—É–¥—å –ª–∞—Å–∫–∞" —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–ª–æ—Å—å —è–∫ "–∞—Ç–ª–∞—Å"
  const atlasVariations = [
    // –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –≤–∞—Ä—ñ–∞—Ü—ñ—ó (–º—ñ–Ω—ñ–º—É–º 5 —Å–∏–º–≤–æ–ª—ñ–≤)
    '–∞—Ç–ª–∞—Å', '–∞—Ç–ª–∞–∑', '–∞—Ç–ª—É—Å', '–∞—Ç–ª–µ—Å', '–∞—Ç–ª–æ—Å', '–∞—Ç–ª—è—Å',
    '–æ—Ç–ª–∞—Å', '–æ—Ç–ª–∞–∑', '–æ—Ç–ª—É—Å', '–∞–¥–ª–∞—Å', '–∞–¥–ª–∞–∑',
    '–∞—Ç–ª–∞—Å—å', '–∞—Ç–ª–∞—Å–µ', '–∞—Ç–ª–∞—Å–æ', '–∞—Ç–ª–∞—à–∞',
    // –ê–Ω–≥–ª—ñ–π—Å—å–∫—ñ –≤–∞—Ä—ñ–∞—Ü—ñ—ó (–º—ñ–Ω—ñ–º—É–º 5 —Å–∏–º–≤–æ–ª—ñ–≤)
    'atlas', 'atlus', 'atlass', 'atlaz', 'atlos',
    'adlas', 'adlus', 'atlash', 'atlase',
    // –§–æ–Ω–µ—Ç–∏—á–Ω—ñ –≤–∞—Ä—ñ–∞—Ü—ñ—ó (–º—ñ–Ω—ñ–º—É–º 5 —Å–∏–º–≤–æ–ª—ñ–≤)
    '—ñ—Ç–ª–∞—Å', '—ñ—Ç–ª—É—Å', '–µ—Ç–ª–∞—Å', '–µ—Ç–ª—É—Å',
    '–∞—Ç–ª–∞–∞—Å', '–∞—Ç–ª–∞—à', '–∞—Ç–ª–∞—á'
  ];

  for (const variation of atlasVariations) {
    const normalizedVariation = normalizeText(variation);
    if (normalizedText.includes(normalizedVariation)) {
      logger.info(`[KEYWORD] ‚úÖ Fuzzy match found: "${variation}" in "${text}"`);
      return true;
    }
  }

  logger.debug(`[KEYWORD] ‚ùå No keyword match in: "${text}"`);
  return false;
}

/**
 * –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–µ–∫—Å—Ç—É –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
 * @param {string} text - –¢–µ–∫—Å—Ç –¥–ª—è –Ω–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—ó
 * @returns {string} - –ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç
 */
export function normalizeText(text) {
  return text.toLowerCase()
    .replace(/['".,!?;:()[\]{}]/g, '')
    .replace(/\s+/g, ' ')
    .trim();
}

/**
 * –í–∏—Ç—è–≥ —á–∏—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç—É –∫–æ–º–∞–Ω–¥–∏ (–≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó)
 * @param {string} text - –ü–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç
 * @param {string[]} [keywords] - –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
 * @returns {string} - –û—á–∏—â–µ–Ω–∏–π —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥–∏
 */
export function extractCommand(text, keywords = VOICE_CONFIG.activation.keywords) {
  if (!text) return '';

  let cleanText = text.trim();

  // –í–∏–¥–∞–ª—è—î–º–æ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –∑ –ø–æ—á–∞—Ç–∫—É
  for (const keyword of keywords) {
    const regex = new RegExp(`^\\s*${keyword}\\s*,?\\s*`, 'i');
    cleanText = cleanText.replace(regex, '').trim();
  }

  return cleanText;
}

/**
 * –ö–æ—Ä–µ–∫—Ü—ñ—è –≤–∞—Ä—ñ–∞—Ü—ñ–π —Å–ª–æ–≤–∞ "–ê—Ç–ª–∞—Å" —É —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ–º—É —Ç–µ–∫—Å—Ç—ñ
 * –í–∏–ø—Ä–∞–≤–ª—è—î –ø–æ—à–∏—Ä–µ–Ω—ñ –ø–æ—Ö–∏–±–∫–∏ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è Whisper
 * ADDED (12.10.2025): Frontend-—à–∞—Ä –∫–æ—Ä–µ–∫—Ü—ñ—ó –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Ç–æ—á–Ω–æ—Å—Ç—ñ
 *
 * @param {string} text - –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç
 * @returns {string} - –¢–µ–∫—Å—Ç –∑ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–º "–ê—Ç–ª–∞—Å"
 */
export function correctAtlasWord(text) {
  if (!text || typeof text !== 'string') {
    return text;
  }

  // –°–ª–æ–≤–Ω–∏–∫ –∫–æ—Ä–µ–∫—Ü—ñ—ó "–ê—Ç–ª–∞—Å" (66+ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤)
  const atlasCorrections = {
    // –£–∫—Ä–∞—ó–Ω—Å—å–∫—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏
    '–∞—Ç–ª–∞–∑': '–ê—Ç–ª–∞—Å', '–∞—Ç–ª—É—Å': '–ê—Ç–ª–∞—Å', '–∞—Ç–ª–µ—Å': '–ê—Ç–ª–∞—Å', '–∞—Ä—Ç–ª–∞—Å': '–ê—Ç–ª–∞—Å',
    '–∞—Ç–ª–æ—Å—å': '–ê—Ç–ª–∞—Å', '–∞—Ç–ª–∞–Ω—Å': '–ê—Ç–ª–∞—Å', '–∞–¥–ª–∞—Å': '–ê—Ç–ª–∞—Å', '–æ—Ç–ª–∞—Å': '–ê—Ç–ª–∞—Å',
    '–µ—Ç–ª–∞—Å': '–ê—Ç–ª–∞—Å', '–∞—Ç–ª–∞—Å—å': '–ê—Ç–ª–∞—Å', '–∞—Ç–ª–∞—Å–µ': '–ê—Ç–ª–∞—Å', '–∞—Ç–ª–∞—Å–æ': '–ê—Ç–ª–∞—Å',
    '–∞—Ç–ª—è—Å': '–ê—Ç–ª–∞—Å', '–∞—Ç–ª–∞—à–∞': '–ê—Ç–ª–∞—Å', '—ñ—Ç–ª–∞—Å': '–ê—Ç–ª–∞—Å', '—ñ—Ç–ª—É—Å': '–ê—Ç–ª–∞—Å',
    '–∞—Ç–ª–∞–∞—Å': '–ê—Ç–ª–∞—Å', '–∞—Ç–ª–∞—à': '–ê—Ç–ª–∞—Å', '–∞—Ç–ª–∞—á': '–ê—Ç–ª–∞—Å', '—Ç–ª–∞—Å': '–ê—Ç–ª–∞—Å',
    '—Ç–ª—É—Å': '–ê—Ç–ª–∞—Å', '—Ç–ª–∞–∑': '–ê—Ç–ª–∞—Å',

    // –ê–Ω–≥–ª—ñ–π—Å—å–∫—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏
    'atlas': '–ê—Ç–ª–∞—Å', 'atlass': '–ê—Ç–ª–∞—Å', 'atlus': '–ê—Ç–ª–∞—Å', 'adlas': '–ê—Ç–ª–∞—Å',
    'atles': '–ê—Ç–ª–∞—Å', 'atlantis': '–ê—Ç–ª–∞—Å', 'atlaz': '–ê—Ç–ª–∞—Å', 'atlos': '–ê—Ç–ª–∞—Å',
    'adlus': '–ê—Ç–ª–∞—Å', 'atlash': '–ê—Ç–ª–∞—Å', 'atlase': '–ê—Ç–ª–∞—Å',

    // –†–æ–∑–¥—ñ–ª–µ–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏
    '–∞ —Ç –ª –∞ —Å': '–ê—Ç–ª–∞—Å', '–∞-—Ç-–ª-–∞-—Å': '–ê—Ç–ª–∞—Å', '–∞—Ç–ª –∞—Å': '–ê—Ç–ª–∞—Å',
    '–∞—Ç –ª–∞—Å': '–ê—Ç–ª–∞—Å', '–∞—Ç–ª–∞ —Å': '–ê—Ç–ª–∞—Å',

    // –ó –∞–∫—Ü–µ–Ω—Ç–∞–º–∏
    '–∞ÃÅ—Ç–ª–∞—Å': '–ê—Ç–ª–∞—Å', '–∞—Ç–ª–∞ÃÅ—Å': '–ê—Ç–ª–∞—Å'
  };

  let correctedText = text;

  // –ü–æ—à—É–∫ —Ç–∞ –∑–∞–º—ñ–Ω–∞ –∫–æ–∂–Ω–æ–≥–æ –≤–∞—Ä—ñ–∞–Ω—Ç–∞
  for (const [incorrect, correct] of Object.entries(atlasCorrections)) {
    // Word boundary regex –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è —Å–ª—ñ–≤
    const pattern = new RegExp(`\\b${incorrect}\\b`, 'gi');
    correctedText = correctedText.replace(pattern, correct);
  }

  // –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ä–µ–≥—É–ª—è—Ä–Ω—ñ –≤–∏—Ä–∞–∑–∏ –¥–ª—è —Å–∫–ª–∞–¥–Ω–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤
  const additionalPatterns = [
    // –í–∞—Ä—ñ–∞—Ü—ñ—ó –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–∞–º–∏ "–∞—Ç-"
    { pattern: /\b(–∞—Ç[—Ç–ª][–∞–æ]?[–ª–∑—Å]{1,2})\b/gi, replacement: '–ê—Ç–ª–∞—Å' },
    // –†–æ–∑–¥—ñ–ª–µ–Ω—ñ –ø—Ä–æ–±—ñ–ª–∞–º–∏/–¥–µ—Ñ—ñ—Å–∞–º–∏ (–∞-—Ç-–ª-–∞-—Å, –∞ —Ç –ª –∞ —Å)
    { pattern: /\b(–∞[\s-]?—Ç[\s-]?–ª[\s-]?–∞[\s-]?—Å)\b/gi, replacement: '–ê—Ç–ª–∞—Å' },
    // –í–∞—Ä—ñ–∞—Ü—ñ—ó –∑ "–æ—Ç-", "–µ—Ç-", "–∞–¥-"
    { pattern: /\b([–æ–µ–∞][—Ç–¥]–ª[–∞—É–æ][–∑—Å])\b/gi, replacement: '–ê—Ç–ª–∞—Å' }
  ];

  for (const { pattern, replacement } of additionalPatterns) {
    correctedText = correctedText.replace(pattern, replacement);
  }

  // –õ–æ–≥—É–≤–∞–Ω–Ω—è —è–∫—â–æ –±—É–ª–∞ –∫–æ—Ä–µ–∫—Ü—ñ—è
  if (correctedText !== text) {
    logger.info(`[ATLAS_CORRECTION] ‚úÖ Corrected: "${text}" ‚Üí "${correctedText}"`);
  }

  return correctedText;
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏—Å—å –¥–æ keyword mode
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ conversation mode –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ–≤–∏—Ä–∞–∑–Ω–∏—Ö —Ñ—Ä–∞–∑
 *
 * @param {string} text - –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç
 * @param {number} [confidence=1.0] - –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å Whisper [0-1]
 * @param {Object} [_options] - –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó (reserved for future use)
 * @returns {boolean} - true = –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ keyword mode, false = –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤ chat
 *
 * @example
 * shouldReturnToKeywordMode("—Ö–º", 0.5) // true - –Ω–µ–≤–∏—Ä–∞–∑–Ω–∞ —Ñ—Ä–∞–∑–∞
 * shouldReturnToKeywordMode("–≤—ñ–¥–∫—Ä–∏–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", 0.95) // false - —á—ñ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥–∞
 */
export function shouldReturnToKeywordMode(text, confidence = 1.0, _options = {}) {
  if (!text || typeof text !== 'string') {
    logger.debug('[KEYWORD_CHECK] Empty text - return to keyword mode');
    return true;
  }

  const cleanText = text.trim();
  const textLower = cleanText.toLowerCase();

  // 1. –î–£–ñ–ï –ö–û–†–û–¢–ö–ê –§–†–ê–ó–ê (1-3 —Å–∏–º–≤–æ–ª–∏) = –Ω–µ–≤–∏—Ä–∞–∑–Ω–∞
  if (cleanText.length <= 3) {
    logger.debug(`[KEYWORD_CHECK] Too short (${cleanText.length} chars): "${text}" - return to keyword mode`);
    return true;
  }

  // 2. –ù–ò–ó–¨–ö–ê –í–ü–ï–í–ù–ï–ù–Ü–°–¢–¨ + –ö–û–†–û–¢–ö–ê (< 10 —Å–∏–º–≤–æ–ª—ñ–≤)
  if (confidence < 0.6 && cleanText.length < 10) {
    logger.debug(`[KEYWORD_CHECK] Low confidence (${confidence}) + short text: "${text}" - return to keyword mode`);
    return true;
  }

  // 3. –§–û–ù–û–í–Ü –§–†–ê–ó–ò (—á–µ—Ä–µ–∑ isBackgroundPhrase)
  if (isBackgroundPhrase(text)) {
    logger.debug(`[KEYWORD_CHECK] Background phrase: "${text}" - return to keyword mode`);
    return true;
  }

  // 4. –¢–Ü–õ–¨–ö–ò –í–ò–ì–£–ö–ò / –ö–û–†–û–¢–ö–Ü –°–õ–û–í–ê
  const meaninglessWords = [
    '—Ö–º', '–µ–º', '–µ', '–º', '–Ω—É', '–æ—Ç', '—Ü–µ', '—Ç–æ', '–∞', '—ñ', '—Ç–∞',
    '—É–≥—É', '–∞–≥–∞', '—Ç–∞–∫', '–Ω—ñ', '–æ–∫', '–æ–∫–µ–π',
    'um', 'uh', 'eh', 'mm', 'hmm', 'er', 'ah'
  ];

  const words = textLower.split(/\s+/).filter(w => w.length > 0);

  // –Ø–∫—â–æ –í–°–Ü —Å–ª–æ–≤–∞ meaningless = –Ω–µ–≤–∏—Ä–∞–∑–Ω–∞ —Ñ—Ä–∞–∑–∞
  if (words.length > 0 && words.every(word => meaninglessWords.includes(word))) {
    logger.debug(`[KEYWORD_CHECK] Only meaningless words: "${text}" - return to keyword mode`);
    return true;
  }

  // 5. –ü–ï–†–ï–í–Ü–†–ö–ê –ù–ê –ù–ê–Ø–í–ù–Ü–°–¢–¨ –°–ú–ò–°–õ–û–í–ò–• –Ü–ù–î–ò–ö–ê–¢–û–†–Ü–í
  const meaningfulIndicators = [
    // –ü–∏—Ç–∞–ª—å–Ω—ñ —Å–ª–æ–≤–∞
    '—â–æ', '—è–∫', '–¥–µ', '–∫–æ–ª–∏', '—á–æ–º—É', '—Ö—Ç–æ', '—Å–∫—ñ–ª—å–∫–∏', '—è–∫–∏–π',
    'what', 'how', 'where', 'when', 'why', 'who', 'which',
    // –î—ñ—î—Å–ª–æ–≤–∞
    '–∑—Ä–æ–±–∏', '—Å—Ç–≤–æ—Ä–∏', '–ø–æ–∫–∞–∂–∏', '–∑–Ω–∞–π–¥–∏', '–≤—ñ–¥–∫—Ä–∏–π', '–∑–∞–∫—Ä–∏–π', '–∑–∞–ø—É—Å—Ç–∏',
    '—Ä–æ–∑–∫–∞–∂–∏', '–ø–æ—è—Å–Ω–∏', '–¥–æ–ø–æ–º–æ–∂–∏', '—Å–∫–∞–∂–∏', '–Ω–∞–ø–∏—à–∏',
    'do', 'make', 'show', 'find', 'open', 'close', 'run', 'tell', 'help',
    // –Ü–º–µ–Ω–Ω–∏–∫–∏/–∫–æ–Ω—Ç–µ–∫—Å—Ç
    '–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä', '—Ñ–∞–π–ª', '–ø—Ä–æ–≥—Ä–∞–º–∞', '–¥–æ–¥–∞—Ç–æ–∫', '—Å–∞–π—Ç', '–±—Ä–∞—É–∑–µ—Ä',
    'calculator', 'file', 'program', 'app', 'website', 'browser'
  ];

  const hasMeaningfulContent = meaningfulIndicators.some(indicator =>
    textLower.includes(indicator)
  );

  if (hasMeaningfulContent) {
    logger.info(`[KEYWORD_CHECK] ‚úÖ Meaningful content found: "${text}" - send to chat`);
    return false; // –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤ chat
  }

  // 6. –î–û–í–ì–ò–ô –¢–ï–ö–°–¢ (>15 —Å–∏–º–≤–æ–ª—ñ–≤) –∑ –°–ï–†–ï–î–ù–¨–û–Æ –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—é (>0.5)
  if (cleanText.length > 15 && confidence > 0.5) {
    logger.info(`[KEYWORD_CHECK] ‚úÖ Long text with decent confidence: "${text}" (${confidence}) - send to chat`);
    return false; // –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤ chat
  }

  // 7. –ó–ê –ó–ê–ú–û–í–ß–£–í–ê–ù–ù–Ø–ú: –∫–æ—Ä–æ—Ç–∫–∞ –Ω–µ–∑—Ä–æ–∑—É–º—ñ–ª–∞ —Ñ—Ä–∞–∑–∞ = –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ keyword
  logger.debug(`[KEYWORD_CHECK] Unclear phrase: "${text}" (confidence: ${confidence}) - return to keyword mode`);
  return true;
}

/**
 * –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞
 * @param {Object} constraints - MediaStreamConstraints
 * @returns {boolean} - –ß–∏ –≤–∞–ª—ñ–¥–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
 */
export function validateAudioConstraints(constraints) {
  if (!constraints || typeof constraints !== 'object') {
    return false;
  }

  const audio = constraints.audio;
  if (!audio || typeof audio !== 'object') {
    return false;
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
  const required = ['sampleRate', 'channelCount'];
  return required.every(param => param in audio);
}

/**
 * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏—Ö constraint'—ñ–≤ –¥–ª—è –∞—É–¥—ñ–æ –∑–∞–ø–∏—Å—É
 * @param {Object} [overrides] - –ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
 * @returns {MediaStreamConstraints} - –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è getUserMedia
 */
export function createAudioConstraints(overrides = {}) {
  return {
    audio: {
      sampleRate: 16000,
      channelCount: 1,
      echoCancellation: true,
      noiseSuppression: true,
      autoGainControl: true,
      ...overrides
    },
    video: false
  };
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ Web API –≤ –±—Ä–∞—É–∑–µ—Ä—ñ
 * @returns {Object} - –°—Ç–∞—Ç—É—Å –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —Ä—ñ–∑–Ω–∏—Ö API
 */
export function checkBrowserSupport() {
  const support = {
    getUserMedia: !!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia),
    speechRecognition: !!(window.SpeechRecognition || window.webkitSpeechRecognition),
    mediaRecorder: !!(window.MediaRecorder),
    audioContext: !!(window.AudioContext || window.webkitAudioContext),
    fetch: !!(window.fetch)
  };

  support.voiceControl = support.getUserMedia &&
    support.speechRecognition &&
    support.mediaRecorder &&
    support.audioContext;

  logger.debug('Browser support check:', support);
  return support;
}

/**
 * –û–±—á–∏—Å–ª–µ–Ω–Ω—è —è–∫–æ—Å—Ç—ñ –∞—É–¥—ñ–æ —Å–∏–≥–Ω–∞–ª—É
 * @param {Float32Array} audioData - –ê—É–¥—ñ–æ –¥–∞–Ω—ñ
 * @returns {Object} - –ú–µ—Ç—Ä–∏–∫–∏ —è–∫–æ—Å—Ç—ñ
 */
export function analyzeAudioQuality(audioData) {
  if (!audioData || audioData.length === 0) {
    return { rms: 0, peak: 0, snr: 0, quality: 'poor' };
  }

  // RMS (Root Mean Square) - —Å–µ—Ä–µ–¥–Ω—è –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—å
  let sumSquares = 0;
  let peak = 0;

  for (let i = 0; i < audioData.length; i++) {
    const sample = audioData[i];
    sumSquares += sample * sample;
    peak = Math.max(peak, Math.abs(sample));
  }

  const rms = Math.sqrt(sumSquares / audioData.length);

  // –û—Ü—ñ–Ω–∫–∞ SNR (–ø—Ä–∏–±–ª–∏–∑–Ω–∞)
  const noiseFloor = 0.01; // –ü—Ä–∏–ø—É—Å—Ç–∏–º–∏–π —Ä—ñ–≤–µ–Ω—å —à—É–º—É
  const snr = rms > 0 ? 20 * Math.log10(rms / noiseFloor) : 0;

  // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —è–∫–æ—Å—Ç—ñ
  let quality = 'poor';
  if (snr > 20) quality = 'excellent';
  else if (snr > 15) quality = 'good';
  else if (snr > 10) quality = 'fair';

  return {
    rms: Math.round(rms * 1000) / 1000,
    peak: Math.round(peak * 1000) / 1000,
    snr: Math.round(snr * 10) / 10,
    quality
  };
}

/**
 * Throttle —Ñ—É–Ω–∫—Ü—ñ—è (–æ–±–º–µ–∂–µ–Ω–Ω—è —á–∞—Å—Ç–æ—Ç–∏ –≤–∏–∫–ª–∏–∫—ñ–≤)
 * @param {Function} func - –§—É–Ω–∫—Ü—ñ—è –¥–ª—è throttle
 * @param {number} limit - –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º—ñ–∂ –≤–∏–∫–ª–∏–∫–∞–º–∏
 * @returns {Function} - Throttled —Ñ—É–Ω–∫—Ü—ñ—è
 */
export function throttle(func, limit) {
  let inThrottle;
  return function (...args) {
    if (!inThrottle) {
      func.apply(this, args);
      inThrottle = true;
      setTimeout(() => inThrottle = false, limit);
    }
  };
}

/**
 * Debounce —Ñ—É–Ω–∫—Ü—ñ—è (–≤—ñ–¥–∫–ª–∞–¥–µ–Ω–∏–π –≤–∏–∫–ª–∏–∫)
 * @param {Function} func - –§—É–Ω–∫—Ü—ñ—è –¥–ª—è debounce
 * @param {number} delay - –ó–∞—Ç—Ä–∏–º–∫–∞ –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö
 * @returns {Function} - Debounced —Ñ—É–Ω–∫—Ü—ñ—è
 */
export function debounce(func, delay) {
  let timeoutId;
  return function (...args) {
    clearTimeout(timeoutId);
    timeoutId = setTimeout(() => func.apply(this, args), delay);
  };
}

/**
 * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ —É –∑—Ä—É—á–Ω–æ–º—É –≤–∏–≥–ª—è–¥—ñ
 * @param {number} milliseconds - –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö
 * @returns {string} - –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å
 */
export function formatDuration(milliseconds) {
  if (milliseconds < 1000) {
    return `${Math.round(milliseconds)}–º—Å`;
  }

  const seconds = Math.round(milliseconds / 1000);
  if (seconds < 60) {
    return `${seconds}—Å`;
  }

  const minutes = Math.floor(seconds / 60);
  const remainingSeconds = seconds % 60;

  if (minutes < 60) {
    return remainingSeconds > 0 ? `${minutes}—Ö–≤ ${remainingSeconds}—Å` : `${minutes}—Ö–≤`;
  }

  const hours = Math.floor(minutes / 60);
  const remainingMinutes = minutes % 60;
  return `${hours}–≥–æ–¥ ${remainingMinutes}—Ö–≤`;
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä–∞
 * @param {string} [prefix=''] - –ü—Ä–µ—Ñ—ñ–∫—Å –¥–ª—è ID
 * @returns {string} - –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä
 */
export function generateId(prefix = '') {
  const timestamp = Date.now().toString(36);
  const random = Math.random().toString(36).substr(2, 9);
  return prefix ? `${prefix}_${timestamp}_${random}` : `${timestamp}_${random}`;
}

/**
 * –ë–µ–∑–ø–µ—á–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥ JSON –∑ fallback
 * @param {string} jsonString - JSON —Ä—è–¥–æ–∫
 * @param {*} [fallback=null] - –ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
 * @returns {*} - –†–æ–∑–ø–∞—Ä—Å–µ–Ω–∏–π –æ–±'—î–∫—Ç –∞–±–æ fallback
 */
export function safeJsonParse(jsonString, fallback = null) {
  try {
    return JSON.parse(jsonString);
  } catch (error) {
    logger.warn('Failed to parse JSON', { jsonString, error: error.message });
    return fallback;
  }
}

/**
 * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–æ–≥–æ Promise
 * @param {number} ms - –ó–∞—Ç—Ä–∏–º–∫–∞ –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö
 * @param {*} [value] - –ó–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è resolve
 * @returns {Promise} - Promise —â–æ resolve —á–µ—Ä–µ–∑ –∑–∞—Ç—Ä–∏–º–∫—É
 */
export function delay(ms, value) {
  return new Promise(resolve => setTimeout(() => resolve(value), ms));
}

/**
 * Retry wrapper –∑ –µ–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–∏–º backoff
 * @param {Function} operation - –û–ø–µ—Ä–∞—Ü—ñ—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è
 * @param {Object} [options] - –û–ø—Ü—ñ—ó retry
 * @param {number} [options.maxRetries=3] - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–±
 * @param {number} [options.initialDelay=1000] - –ü–æ—á–∞—Ç–∫–æ–≤–∞ –∑–∞—Ç—Ä–∏–º–∫–∞
 * @param {number} [options.maxDelay=30000] - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞
 * @param {Function} [options.shouldRetry] - –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ retry
 * @returns {Promise} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü—ñ—ó
 */
export async function retry(operation, options = {}) {
  const {
    maxRetries = 3,
    initialDelay = 1000,
    maxDelay = 30000,
    shouldRetry = () => true
  } = options;

  let lastError;

  for (let attempt = 0; attempt <= maxRetries; attempt++) {
    try {
      return await operation();
    } catch (error) {
      lastError = error;

      if (attempt === maxRetries || !shouldRetry(error, attempt)) {
        break;
      }

      const delayTime = Math.min(initialDelay * Math.pow(2, attempt), maxDelay);
      logger.debug(`Retry attempt ${attempt + 1}/${maxRetries + 1} after ${delayTime}ms`);
      await delay(delayTime);
    }
  }

  throw lastError;
}

export default {
  isBackgroundPhrase,
  isUserCommand,
  isStopCommand,
  containsActivationKeyword,
  normalizeText,
  extractCommand,
  validateAudioConstraints,
  createAudioConstraints,
  checkBrowserSupport,
  analyzeAudioQuality,
  throttle,
  debounce,
  formatDuration,
  generateId,
  safeJsonParse,
  delay,
  retry
};
