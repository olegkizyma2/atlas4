/**
 * Voice Control Service Manager - v4.0
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é, —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü—ñ—é –≤—Å—ñ—Ö voice —Å–µ—Ä–≤—ñ—Å—ñ–≤
 */

import { createLogger } from '../core/logger.js';
import { EventManager, Events } from '../events/event-manager.js';

// –Ü–º–ø–æ—Ä—Ç —Å–µ—Ä–≤—ñ—Å—ñ–≤
import { WhisperService } from '../services/whisper-service.js';
import { KeywordDetectionService } from '../services/keyword-detection-service.js';
import { PostChatAnalysisService } from '../services/post-chat-analysis-service.js';
import { SpeechResultsService } from '../services/speech-results-service.js';
import { MicrophoneButtonService } from '../services/microphone-button-service.js';

export class ServiceManager {
  constructor(config = {}, eventManager, logger) {
    this.config = config;
    this.eventManager = eventManager;
    this.logger = logger || createLogger('SERVICE-MANAGER');

    // –°–µ—Ä–≤—ñ—Å–∏ —Å–∏—Å—Ç–µ–º–∏
    this.services = new Map();
    this.serviceOrder = [
      'whisper',
      'microphone',
      'results',
      'keyword',
      'postChat'
    ];

    // –ü–æ–º–∏–ª–∫–∏ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
    this.startupErrors = [];
  }

  /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
     */
  async initializeServices() {
    const serviceConfigs = this.config.serviceConfigs || {};

    this.logger.info('Initializing voice control services...');

    // Whisper Service (–æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π)
    await this.createWhisperService(serviceConfigs.whisper);

    // Microphone Button Service (–æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π)
    await this.createMicrophoneService(serviceConfigs.microphone);

    // Speech Results Service (–æ–±–æ–≤'—è–∑–∫–æ–≤–∏–π)
    await this.createResultsService(serviceConfigs.results);

    // Keyword Detection Service (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π)
    if (this.config.enableKeywordDetection) {
      this.logger.info('üîë Creating Keyword Detection Service (enableKeywordDetection=true)');
      await this.createKeywordService(serviceConfigs.keyword);
    } else {
      this.logger.warn('‚ö†Ô∏è Keyword Detection Service DISABLED (enableKeywordDetection=false)');
    }

    // Post Chat Analysis Service (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π)
    if (this.config.enablePostChatAnalysis) {
      await this.createPostChatService(serviceConfigs.postChat);
    }

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—ñ–≤ —É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
    await this.initializeServicesInOrder();

    this.logger.info(`Successfully initialized ${this.services.size} services`);
  }

  /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Whisper —Å–µ—Ä–≤—ñ—Å—É
     */
  async createWhisperService(config = {}) {
    const whisperService = new WhisperService({
      logger: typeof this.logger.category === 'function'
        ? this.logger.category('WHISPER')
        : this.logger,
      eventManager: this.eventManager,
      ...config
    });
    this.services.set('whisper', whisperService);
  }

  /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Microphone —Å–µ—Ä–≤—ñ—Å—É
     */
  async createMicrophoneService(config = {}) {
    const microphoneService = new MicrophoneButtonService({
      logger: typeof this.logger.category === 'function'
        ? this.logger.category('MICROPHONE')
        : this.logger,
      eventManager: this.eventManager,
      ...config
    });
    this.services.set('microphone', microphoneService);
  }

  /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Results —Å–µ—Ä–≤—ñ—Å—É
     */
  async createResultsService(config = {}) {
    const resultsService = new SpeechResultsService({
      logger: typeof this.logger.category === 'function'
        ? this.logger.category('RESULTS')
        : this.logger,
      eventManager: this.eventManager,
      ...config
    });
    this.services.set('results', resultsService);
  }

  /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Keyword Detection —Å–µ—Ä–≤—ñ—Å—É
     */
  async createKeywordService(config = {}) {
    console.log('[SERVICE-MANAGER] üîë Creating KeywordDetectionService with config:', {
      hasEventManager: !!this.eventManager,
      hasLogger: !!this.logger,
      config
    });

    const keywordService = new KeywordDetectionService({
      logger: typeof this.logger.category === 'function'
        ? this.logger.category('KEYWORD')
        : this.logger,
      eventManager: this.eventManager,
      ...config
    });

    console.log('[SERVICE-MANAGER] ‚úÖ KeywordDetectionService created, adding to services map');
    this.services.set('keyword', keywordService);
  }

  /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Post Chat Analysis —Å–µ—Ä–≤—ñ—Å—É
     */
  async createPostChatService(config = {}) {
    const postChatService = new PostChatAnalysisService({
      logger: typeof this.logger.category === 'function'
        ? this.logger.category('POST_CHAT')
        : this.logger,
      eventManager: this.eventManager,
      ...config
    });
    this.services.set('postChat', postChatService);
  }

  /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—ñ–≤ —É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
     */
  async initializeServicesInOrder() {
    for (const serviceName of this.serviceOrder) {
      const service = this.services.get(serviceName);

      if (service) {
        try {
          this.logger.debug(`Initializing service: ${serviceName}`);
          const success = await service.initialize();

          if (!success) {
            throw new Error(`Service ${serviceName} failed to initialize`);
          }

          this.logger.debug(`Service ${serviceName} initialized successfully`);

        } catch (error) {
          this.logger.error(`Failed to initialize service ${serviceName}`, null, error);

          // –ö—Ä–∏—Ç–∏—á–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏
          const criticalServices = ['whisper', 'microphone'];
          if (criticalServices.includes(serviceName)) {
            throw error;
          } else {
            // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏ - –ø—Ä–æ—Å—Ç–æ –≤–∏–¥–∞–ª—è—î–º–æ
            this.services.delete(serviceName);
            this.startupErrors.push({
              error,
              service: serviceName,
              timestamp: new Date(),
              phase: 'service_initialization'
            });
          }
        }
      }
    }
  }

  /**
     * –ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
     */
  async startServices() {
    this.logger.info('Starting voice control services...');

    for (const serviceName of this.serviceOrder) {
      const service = this.services.get(serviceName);

      if (service && typeof service.start === 'function') {
        try {
          await service.start();
          this.logger.debug(`Service ${serviceName} started`);
        } catch (error) {
          this.logger.error(`Failed to start service ${serviceName}`, null, error);

          // –ö—Ä–∏—Ç–∏—á–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏ –∑—É–ø–∏–Ω—è—é—Ç—å –≤–µ—Å—å –∑–∞–ø—É—Å–∫
          if (['whisper', 'microphone'].includes(serviceName)) {
            throw error;
          }
        }
      }
    }

    this.logger.info('All services started successfully');
  }

  /**
     * –ó—É–ø–∏–Ω–∫–∞ –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
     */
  async stopServices() {
    this.logger.info('Stopping voice control services...');

    // –ó—É–ø–∏–Ω–∫–∞ —Å–µ—Ä–≤—ñ—Å—ñ–≤ —É –∑–≤–æ—Ä–æ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
    const reverseOrder = [...this.serviceOrder].reverse();

    for (const serviceName of reverseOrder) {
      const service = this.services.get(serviceName);

      if (service && typeof service.stop === 'function') {
        try {
          await service.stop();
          this.logger.debug(`Service ${serviceName} stopped`);
        } catch (error) {
          this.logger.error(`Error stopping service ${serviceName}`, null, error);
        }
      }
    }

    this.logger.info('All services stopped');
  }

  /**
     * –ó–Ω–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
     */
  async destroyServices() {
    this.logger.info('Destroying voice control services...');

    for (const [name, service] of this.services) {
      try {
        await service.destroy();
        this.logger.debug(`Service ${name} destroyed`);
      } catch (error) {
        this.logger.error(`Error destroying service ${name}`, null, error);
      }
    }

    this.services.clear();
    this.logger.info('All services destroyed');
  }

  /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤—ñ—Å—ñ–≤
     */
  async checkServicesHealth() {
    const healthResults = new Map();

    for (const [name, service] of this.services) {
      try {
        const isHealthy = await service.checkHealth();
        healthResults.set(name, isHealthy);
      } catch (error) {
        this.logger.warn(`Health check failed for service ${name}`, null, error);
        healthResults.set(name, false);
      }
    }

    return healthResults;
  }

  /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—É –∑–∞ –Ω–∞–∑–≤–æ—é
     */
  getService(name) {
    return this.services.get(name);
  }

  /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
     */
  getAllServices() {
    return new Map(this.services);
  }

  /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞–Ω—É —Å–µ—Ä–≤—ñ—Å—ñ–≤
     */
  getServicesStatus() {
    const status = {};

    for (const [name, service] of this.services) {
      status[name] = {
        initialized: !!service,
        healthy: false // –ë—É–¥–µ –æ–Ω–æ–≤–ª–µ–Ω–æ async
      };
    }

    return status;
  }

  /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
     */
  getStartupErrors() {
    return [...this.startupErrors];
  }
}
