/**
 * @fileoverview –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π Whisper —Å–µ—Ä–≤—ñ—Å –¥–ª—è –≤–∏—Å–æ–∫–æ—è–∫—ñ—Å–Ω–æ–≥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –º–æ–≤–∏
 * –ó–∞–±–µ–∑–ø–µ—á—É—î —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é –∑ –ª–æ–∫–∞–ª—å–Ω–∏–º Whisper API —Ç–∞ –æ–±—Ä–æ–±–∫—É –∞—É–¥—ñ–æ –¥–∞–Ω–∏—Ö
 */

import { BaseService } from '../core/base-service.js';
import { API_ENDPOINTS, AUDIO_CONFIG } from '../core/config.js';
import { Events } from '../events/event-manager.js';
import { retry, createAudioConstraints } from '../utils/voice-utils.js';

/**
 * @typedef {Object} TranscriptionOptions
 * @property {string} [model='whisper-1'] - –ú–æ–¥–µ–ª—å Whisper
 * @property {string} [language='uk'] - –ú–æ–≤–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
 * @property {string} [response_format='json'] - –§–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
 * @property {number} [temperature=0.2] - –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ [0-1]
 * @property {number} [maxDuration=60000] - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å (–º—Å)
 */

/**
 * @typedef {Object} TranscriptionResult
 * @property {string} text - –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç
 * @property {string} language - –í–∏—è–≤–ª–µ–Ω–∞ –º–æ–≤–∞
 * @property {number} duration - –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∞—É–¥—ñ–æ (—Å–µ–∫)
 * @property {number} confidence - –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è [0-1]
 * @property {Array<{text: string, start: number, end: number}>} [segments] - –°–µ–≥–º–µ–Ω—Ç–∏
 */

/**
 * –°–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ Whisper API
 */
export class WhisperService extends BaseService {
  constructor(config = {}) {
    super({
      name: 'WHISPER_SERVICE',
      version: '2.0.0',
      healthCheckInterval: 30000,
      maxRetries: 3,
      ...config
    });

    this.serviceUrl = config.serviceUrl || API_ENDPOINTS.whisper;
    this.defaultOptions = {
      model: 'whisper-1',
      language: 'uk',
      response_format: 'json',
      temperature: 0.2,
      maxDuration: 60000,
      ...config.defaultOptions
    };

    // –°—Ç–∞–Ω –∑–∞–ø–∏—Å—É
    this.mediaRecorder = null;
    this.audioStream = null;
    this.isRecording = false;
    this.recordingPromise = null;

    // –ë—É—Ñ–µ—Ä –∞—É–¥—ñ–æ –¥–∞–Ω–∏—Ö
    this.audioChunks = [];

    // –ú–µ—Ç—Ä–∏–∫–∏
    this.transcriptionMetrics = {
      totalRequests: 0,
      successfulRequests: 0,
      failedRequests: 0,
      averageLatency: 0,
      totalDuration: 0,
      averageAccuracy: 0
    };
  }

  /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É
     * @returns {Promise<boolean>} - –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
     */
  async onInitialize() {
    try {
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—É
      const available = await this.checkServiceAvailability();
      if (!available) {
        this.logger.warn('Whisper service not available, service will work in fallback mode');
        return false;
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ MediaRecorder
      if (!window.MediaRecorder) {
        this.logger.error('MediaRecorder not supported in this browser');
        return false;
      }

      // –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–¥—ñ—ó –≤—ñ–¥ MicrophoneButtonService
      this.subscribeToMicrophoneEvents();

      this.logger.info(`Whisper service initialized (URL: ${this.serviceUrl})`);
      return true;

    } catch (error) {
      this.logger.error('Failed to initialize Whisper service', null, error);
      return false;
    }
  }

  /**
     * –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–¥—ñ—ó –≤—ñ–¥ –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞
     */
  subscribeToMicrophoneEvents() {
    // –û–±—Ä–æ–±–∫–∞ –≥–æ—Ç–æ–≤–æ–≥–æ –∞—É–¥—ñ–æ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó
    this.subscribe(Events.AUDIO_READY_FOR_TRANSCRIPTION, (event) => {
      this.handleAudioReadyForTranscription(event.payload);
    });

    this.logger.debug('Subscribed to microphone events (AUDIO_READY_FOR_TRANSCRIPTION)');
  }

  /**
     * –û–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ—ó –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –∞—É–¥—ñ–æ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó
     * @param {Object} payload - –î–∞–Ω—ñ –ø–æ–¥—ñ—ó
     */
  async handleAudioReadyForTranscription(payload) {
    try {
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ audioBlob - —Ç–∏—Ö–æ –≤–∏—Ö–æ–¥–∏–º–æ —è–∫—â–æ –Ω–µ–º–∞—î
      if (!payload || !payload.audioBlob) {
        // –ü–æ–¥—ñ—è –º–æ–∂–µ –µ–º—ñ—Ç—É–≤–∞—Ç–∏—Å—å —ñ –¥–ª—è —ñ–Ω—à–∏—Ö —Ü—ñ–ª–µ–π, –Ω–µ —Ç—ñ–ª—å–∫–∏ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó
        return;
      }

      this.logger.info(`üéôÔ∏è Received audio for transcription (session: ${payload.sessionId}, size: ${payload.audioBlob.size} bytes)`);

      // –í–∏–∫–æ–Ω–∞–Ω–Ω—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó
      const result = await this.transcribeAudio(payload.audioBlob, {
        mode: payload.mode,
        language: 'uk'
      });

      this.logger.info(`‚úÖ Transcription successful: "${result.text}"`);

    } catch (error) {
      this.logger.error('Failed to process audio for transcription', {
        sessionId: payload?.sessionId
      }, error);
    }
  }

  /**
     * –ó–Ω–∏—â–µ–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—É
     * @returns {Promise<void>}
     */
  async onDestroy() {
    await this.stopRecording();
    this.cleanupAudioResources();
  }

  /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤—ñ—Å—É
     * @returns {Promise<boolean>} - –ß–∏ –∑–¥–æ—Ä–æ–≤–∏–π —Å–µ—Ä–≤—ñ—Å
     */
  async onHealthCheck() {
    try {
      const response = await fetch(`${this.serviceUrl}/health`, {
        method: 'GET',
        timeout: 5000
      });
      return response.ok;
    } catch (error) {
      this.logger.debug('Health check failed', null, error);
      return false;
    }
  }

  /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ Whisper —Å–µ—Ä–≤—ñ—Å—É
     * @returns {Promise<boolean>} - –ß–∏ –¥–æ—Å—Ç—É–ø–Ω–∏–π —Å–µ—Ä–≤—ñ—Å
     */
  async checkServiceAvailability() {
    try {
      const response = await fetch(`${this.serviceUrl}/health`, {
        method: 'GET',
        headers: { 'Accept': 'application/json' }
      });

      if (!response.ok) {
        return false;
      }

      const data = await response.json();
      this.logger.info(`Whisper service available: ${data.backend || data.model || 'unknown'} on ${data.device}`);

      // –ï–º—ñ—Å—ñ—è –ø–æ–¥—ñ—ó –ø—Ä–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å —Å–µ—Ä–≤—ñ—Å—É
      await this.emit(Events.WHISPER_SERVICE_AVAILABLE, {
        model: data.backend || data.model || 'unknown',
        device: data.device,
        version: data.version
      });

      return true;

    } catch (error) {
      this.logger.warn(`Whisper service not available: ${error.message}`);

      await this.emit(Events.WHISPER_SERVICE_UNAVAILABLE, {
        error: error.message,
        url: this.serviceUrl
      });

      return false;
    }
  }

  /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞–ø–∏—Å—É –∞—É–¥—ñ–æ
     * @param {Object} [constraints] - MediaStream constraints
     * @returns {Promise<boolean>} - –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
     */
  async initializeRecording(constraints = null) {
    try {
      if (this.isRecording) {
        this.logger.warn('Recording already in progress');
        return false;
      }

      // –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ –ø–æ—Ç–æ–∫—É –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ
      if (!this.audioStream) {
        const audioConstraints = constraints || createAudioConstraints(AUDIO_CONFIG);
        this.audioStream = await navigator.mediaDevices.getUserMedia(audioConstraints);

        await this.emit(Events.MICROPHONE_PERMISSION_GRANTED, {
          constraints: audioConstraints
        });
      }

      // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è MediaRecorder
      const options = {
        mimeType: this.getSupportedMimeType()
      };

      this.mediaRecorder = new MediaRecorder(this.audioStream, options);
      this.setupRecorderEventHandlers();

      this.logger.debug('Audio recording initialized', {
        mimeType: options.mimeType,
        audioTracks: this.audioStream.getAudioTracks().length
      });

      return true;

    } catch (error) {
      this.logger.error('Failed to initialize recording', null, error);

      if (error.name === 'NotAllowedError' || error.name === 'PermissionDeniedError') {
        await this.emit(Events.MICROPHONE_PERMISSION_DENIED, {
          error: error.message
        });
      }

      return false;
    }
  }

  /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π MediaRecorder
     */
  setupRecorderEventHandlers() {
    if (!this.mediaRecorder) return;

    this.mediaRecorder.ondataavailable = (event) => {
      if (event.data && event.data.size > 0) {
        this.audioChunks.push(event.data);
        this.logger.debug(`Audio chunk received: ${event.data.size} bytes`);
      }
    };

    this.mediaRecorder.onstart = () => {
      this.isRecording = true;
      this.audioChunks = [];
      this.logger.info('Audio recording started');
    };

    this.mediaRecorder.onstop = () => {
      this.isRecording = false;
      this.logger.info('Audio recording stopped');
    };

    this.mediaRecorder.onerror = (event) => {
      this.logger.error('MediaRecorder error', null, event.error);
      this.isRecording = false;
    };
  }

  /**
     * –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–æ–≥–æ MIME —Ç–∏–ø—É –¥–ª—è –∑–∞–ø–∏—Å—É
     * @returns {string} - MIME —Ç–∏–ø
     */
  getSupportedMimeType() {
    const mimeTypes = [
      'audio/webm;codecs=opus',
      'audio/webm',
      'audio/mp4',
      'audio/ogg;codecs=opus'
    ];

    for (const mimeType of mimeTypes) {
      if (MediaRecorder.isTypeSupported(mimeType)) {
        return mimeType;
      }
    }

    this.logger.warn('No supported MIME type found, using default');
    return '';
  }

  /**
     * –ó–∞–ø—É—Å–∫ –∑–∞–ø–∏—Å—É –∞—É–¥—ñ–æ
     * @param {Object} [options] - –û–ø—Ü—ñ—ó –∑–∞–ø–∏—Å—É
     * @param {number} [options.maxDuration] - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å (–º—Å)
     * @param {number} [options.timeslice] - –Ü–Ω—Ç–µ—Ä–≤–∞–ª –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö (–º—Å)
     * @returns {Promise<void>}
     */
  async startRecording(options = {}) {
    if (this.isRecording) {
      throw new Error('Recording already in progress');
    }

    if (!this.mediaRecorder) {
      const initialized = await this.initializeRecording();
      if (!initialized) {
        throw new Error('Failed to initialize recording');
      }
    }

    const { maxDuration = this.defaultOptions.maxDuration, timeslice } = options;

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Promise –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É
    this.recordingPromise = new Promise((resolve, reject) => {
      const startTime = Date.now();
      let maxDurationTimer;

      const cleanup = () => {
        if (maxDurationTimer) {
          clearTimeout(maxDurationTimer);
        }
      };

      this.mediaRecorder.onstop = () => {
        cleanup();
        const duration = Date.now() - startTime;

        this.logger.info(`Recording completed (duration: ${duration}ms, chunks: ${this.audioChunks.length})`);

        if (this.audioChunks.length === 0) {
          reject(new Error('No audio data recorded'));
        } else {
          resolve(this.createAudioBlob());
        }
      };

      this.mediaRecorder.onerror = (event) => {
        cleanup();
        reject(event.error || new Error('Recording error'));
      };

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –∑—É–ø–∏–Ω–∫–∞ –ø—ñ—Å–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ
      if (maxDuration > 0) {
        maxDurationTimer = setTimeout(() => {
          if (this.isRecording) {
            this.logger.debug(`Auto-stopping recording after ${maxDuration}ms`);
            this.stopRecording();
          }
        }, maxDuration);
      }
    });

    // –ï–º—ñ—Å—ñ—è –ø–æ–¥—ñ—ó –ø–æ—á–∞—Ç–∫—É –∑–∞–ø–∏—Å—É
    await this.emit(Events.MICROPHONE_RECORDING_STARTED, {
      maxDuration,
      timeslice
    });

    // –ó–∞–ø—É—Å–∫ –∑–∞–ø–∏—Å—É
    if (timeslice) {
      this.mediaRecorder.start(timeslice);
    } else {
      this.mediaRecorder.start();
    }
  }

  /**
     * –ó—É–ø–∏–Ω–∫–∞ –∑–∞–ø–∏—Å—É –∞—É–¥—ñ–æ
     * @returns {Promise<Blob>} - Blob –∑ –∞—É–¥—ñ–æ –¥–∞–Ω–∏–º–∏
     */
  async stopRecording() {
    if (!this.isRecording || !this.mediaRecorder) {
      this.logger.warn('No active recording to stop');
      return null;
    }

    // –ó—É–ø–∏–Ω–∫–∞ –∑–∞–ø–∏—Å—É
    this.mediaRecorder.stop();

    // –ï–º—ñ—Å—ñ—è –ø–æ–¥—ñ—ó –∑—É–ø–∏–Ω–∫–∏ –∑–∞–ø–∏—Å—É
    await this.emit(Events.MICROPHONE_RECORDING_STOPPED, {
      chunks: this.audioChunks.length
    });

    // –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É
    try {
      const audioBlob = await this.recordingPromise;
      return audioBlob;
    } finally {
      this.recordingPromise = null;
    }
  }

  /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Blob –∑ –∞—É–¥—ñ–æ –¥–∞–Ω–∏—Ö
     * @returns {Blob} - Blob –∑ –∞—É–¥—ñ–æ –¥–∞–Ω–∏–º–∏
     */
  createAudioBlob() {
    if (this.audioChunks.length === 0) {
      throw new Error('No audio chunks to create blob');
    }

    const mimeType = this.mediaRecorder.mimeType || 'audio/webm';
    const blob = new Blob(this.audioChunks, { type: mimeType });

    this.logger.debug(`Created audio blob: ${blob.size} bytes, type: ${blob.type}`);
    return blob;
  }

  /**
     * –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è –∞—É–¥—ñ–æ —Ñ–∞–π–ª—É
     * @param {Blob} audioBlob - –ê—É–¥—ñ–æ –¥–∞–Ω—ñ
     * @param {TranscriptionOptions} [options] - –û–ø—Ü—ñ—ó —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó
     * @returns {Promise<TranscriptionResult>} - –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó
     */
  async transcribeAudio(audioBlob, options = {}) {
    if (!audioBlob || audioBlob.size === 0) {
      throw new Error('Invalid audio data provided');
    }

    const transcriptionOptions = {
      ...this.defaultOptions,
      ...options
    };

    // –ï–º—ñ—Å—ñ—è –ø–æ–¥—ñ—ó –ø–æ—á–∞—Ç–∫—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó
    await this.emit(Events.WHISPER_TRANSCRIPTION_STARTED, {
      audioSize: audioBlob.size,
      options: transcriptionOptions
    });

    const startTime = Date.now();

    try {
      const result = await this.executeWithRetry(async () => {
        return await this.performTranscription(audioBlob, transcriptionOptions);
      }, {
        maxRetries: this.config.maxRetries
      });

      const latency = Date.now() - startTime;

      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫
      this.updateTranscriptionMetrics(latency, true, result.confidence);

      // –ï–º—ñ—Å—ñ—è –ø–æ–¥—ñ—ó –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó
      // FIXED (11.10.2025 - 17:10): –î–æ–¥–∞—î–º–æ text –Ω–∞ –≤–µ—Ä—Ö–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å –¥–ª—è conversation-mode
      await this.emit(Events.WHISPER_TRANSCRIPTION_COMPLETED, {
        text: result.text,      // –î–ª—è conversation-mode compatibility
        result,                 // –ü–æ–≤–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        latency,
        audioSize: audioBlob.size,
        confidence: result.confidence
      });

      this.logger.info(`Transcription completed in ${latency}ms: "${result.text}"`);
      return result;

    } catch (error) {
      const latency = Date.now() - startTime;
      this.updateTranscriptionMetrics(latency, false);

      await this.emit(Events.WHISPER_TRANSCRIPTION_ERROR, {
        error: error.message,
        latency,
        audioSize: audioBlob.size
      });

      this.logger.error('Transcription failed', { latency, audioSize: audioBlob.size }, error);
      throw error;
    }
  }

  /**
     * –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –¥–æ Whisper API
     * @param {Blob} audioBlob - –ê—É–¥—ñ–æ –¥–∞–Ω—ñ
     * @param {TranscriptionOptions} options - –û–ø—Ü—ñ—ó —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó
     * @returns {Promise<TranscriptionResult>} - –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó
     */
  async performTranscription(audioBlob, options) {
    const formData = new FormData();

    // Whisper.cpp –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —ñ–º'—è –ø–æ–ª—è 'audio' –∑–∞–º—ñ—Å—Ç—å 'file'
    formData.append('audio', audioBlob, 'audio.webm');

    // –î–æ–¥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
    Object.entries(options).forEach(([key, value]) => {
      if (value !== undefined && key !== 'maxDuration') {
        formData.append(key, value.toString());
      }
    });

    // Whisper.cpp endpoint: /transcribe (–ù–ï /v1/audio/transcriptions —è–∫ OpenAI)
    const response = await fetch(`${this.serviceUrl}/transcribe`, {
      method: 'POST',
      body: formData
    });

    if (!response.ok) {
      let errorMessage = `HTTP ${response.status}: ${response.statusText}`;

      try {
        const errorData = await response.json();
        errorMessage = errorData.error?.message || errorMessage;
      } catch (e) {
        // –Ü–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥—É JSON
      }

      throw new Error(`Whisper API error: ${errorMessage}`);
    }

    const data = await response.json();

    // –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
    return this.normalizeTranscriptionResult(data);
  }

  /**
     * –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó
     * @param {Object} rawResult - –°–∏—Ä–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ñ–¥ API
     * @returns {TranscriptionResult} - –ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
     */
  normalizeTranscriptionResult(rawResult) {
    return {
      text: rawResult.text || '',
      language: rawResult.language || this.defaultOptions.language,
      duration: rawResult.duration || 0,
      confidence: rawResult.confidence || 1.0,
      segments: rawResult.segments || []
    };
  }

  /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó
     * @param {number} latency - –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è (–º—Å)
     * @param {boolean} success - –ß–∏ —É—Å–ø—ñ—à–Ω–æ
     * @param {number} [confidence] - –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
     */
  updateTranscriptionMetrics(latency, success, confidence = null) {
    const metrics = this.transcriptionMetrics;

    metrics.totalRequests++;

    if (success) {
      metrics.successfulRequests++;

      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—å–æ—ó –∑–∞—Ç—Ä–∏–º–∫–∏
      const totalLatency = metrics.averageLatency * (metrics.successfulRequests - 1) + latency;
      metrics.averageLatency = Math.round(totalLatency / metrics.successfulRequests);

      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—å–æ—ó —Ç–æ—á–Ω–æ—Å—Ç—ñ
      if (confidence !== null) {
        const totalAccuracy = metrics.averageAccuracy * (metrics.successfulRequests - 1) + confidence;
        metrics.averageAccuracy = totalAccuracy / metrics.successfulRequests;
      }
    } else {
      metrics.failedRequests++;
    }
  }

  /**
     * –ó–∞–ø–∏—Å —ñ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è –∑–∞ –æ–¥–∏–Ω –≤–∏–∫–ª–∏–∫
     * @param {Object} [recordingOptions] - –û–ø—Ü—ñ—ó –∑–∞–ø–∏—Å—É
     * @param {TranscriptionOptions} [transcriptionOptions] - –û–ø—Ü—ñ—ó —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó
     * @returns {Promise<TranscriptionResult>} - –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó
     */
  async recordAndTranscribe(recordingOptions = {}, transcriptionOptions = {}) {
    this.logger.info('Starting record and transcribe operation');

    try {
      // –ó–∞–ø—É—Å–∫ –∑–∞–ø–∏—Å—É
      await this.startRecording(recordingOptions);

      // –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É (–º–∞—î –±—É—Ç–∏ –∑—É–ø–∏–Ω–µ–Ω–æ –∑–æ–≤–Ω—ñ –∞–±–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ)
      const audioBlob = await this.recordingPromise;

      if (!audioBlob) {
        throw new Error('Recording failed - no audio data');
      }

      // –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è
      const result = await this.transcribeAudio(audioBlob, transcriptionOptions);

      this.logger.info(`Record and transcribe completed: "${result.text}"`);
      return result;

    } catch (error) {
      // –ó—É–ø–∏–Ω–∫–∞ –∑–∞–ø–∏—Å—É —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
      if (this.isRecording) {
        try {
          this.mediaRecorder.stop();
        } catch (e) {
          this.logger.warn('Failed to stop recording during error cleanup', null, e);
        }
      }

      throw error;
    }
  }

  /**
     * –û—á–∏—â–µ–Ω–Ω—è –∞—É–¥—ñ–æ —Ä–µ—Å—É—Ä—Å—ñ–≤
     */
  cleanupAudioResources() {
    // –ó—É–ø–∏–Ω–∫–∞ –∑–∞–ø–∏—Å—É
    if (this.isRecording && this.mediaRecorder) {
      try {
        this.mediaRecorder.stop();
      } catch (error) {
        this.logger.warn('Error stopping MediaRecorder during cleanup', null, error);
      }
    }

    // –ó–∞–∫—Ä–∏—Ç—Ç—è –∞—É–¥—ñ–æ –ø–æ—Ç–æ–∫—É
    if (this.audioStream) {
      this.audioStream.getTracks().forEach(track => {
        track.stop();
      });
      this.audioStream = null;
    }

    // –û—á–∏—â–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω—å
    this.mediaRecorder = null;
    this.audioChunks = [];
    this.isRecording = false;
    this.recordingPromise = null;

    this.logger.debug('Audio resources cleaned up');
  }

  /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–µ—Ç—Ä–∏–∫ —Å–µ—Ä–≤—ñ—Å—É
     * @returns {Object} - –ú–µ—Ç—Ä–∏–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó —Ç–∞ –∑–∞–≥–∞–ª—å–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏ —Å–µ—Ä–≤—ñ—Å—É
     */
  getMetrics() {
    return {
      ...super.getMetrics(),
      transcription: { ...this.transcriptionMetrics },
      recording: {
        isRecording: this.isRecording,
        hasAudioStream: !!this.audioStream,
        audioChunks: this.audioChunks.length
      }
    };
  }
}

export default WhisperService;
