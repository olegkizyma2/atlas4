/**
 * @fileoverview –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π —Å–µ—Ä–≤—ñ—Å –¥–µ—Ç–µ–∫—Ü—ñ—ó –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤
 * –ó–∞–±–µ–∑–ø–µ—á—É—î –Ω–∞–¥—ñ–π–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–∞—Ü—ñ–π–Ω–∏—Ö –∫–æ–º–∞–Ω–¥ –∑ —Ä–æ–∑—É–º–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
 */

import { BaseService } from '../core/base-service.js';
import { VOICE_CONFIG } from '../core/config.js';
import { Events } from '../events/event-manager.js';
import { containsActivationKeyword, isStopCommand } from '../utils/voice-utils.js';

/**
 * @typedef {Object} KeywordDetectionConfig
 * @property {string[]} keywords - –ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó
 * @property {number} confidence - –ü–æ—Ä—ñ–≥ –≤–ø–µ–≤–Ω–µ–Ω–æ—Å—Ç—ñ [0-1]
 * @property {string} language - –ú–æ–≤–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
 * @property {number} timeout - –¢–∞–π–º–∞—É—Ç –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó (–º—Å)
 * @property {boolean} continuous - –ë–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
 * @property {boolean} interimResults - –ü—Ä–æ–º—ñ–∂–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
 */

/**
 * –°–µ—Ä–≤—ñ—Å –¥–ª—è –¥–µ—Ç–µ–∫—Ü—ñ—ó –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó
 */
export class KeywordDetectionService extends BaseService {
  constructor(config = {}) {
    console.log('[KEYWORD] üèóÔ∏è Constructor called with config:', {
      hasEventManager: !!config.eventManager,
      hasLogger: !!config.logger,
      keywords: config.detection?.keywords || VOICE_CONFIG.activation.keywords
    });

    super({
      name: 'KeywordDetection',
      version: '4.0.0',
      ...config
    });

    this.detectionConfig = {
      ...VOICE_CONFIG.activation,
      ...config.detection
    };

    this.errorHandling = {
      ...VOICE_CONFIG.recognition.errorHandling,
      ...config.errorHandling
    };

    // Web Speech API
    this.recognition = null;

    // –°—Ç–∞–Ω –¥–µ—Ç–µ–∫—Ü—ñ—ó
    this.isActive = false;
    this.isRecognitionRunning = false;
    this.manualStop = false;

    // –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∞–º–∏
    this.errorCounters = {
      noSpeech: 0,
      network: 0,
      consecutive: 0,
      total: 0
    };

    this.backoffState = {
      cooldownUntil: 0,
      lastErrorType: null,
      lastNetworkErrorTime: 0
    };

    // Listeners
    this.eventListeners = new Map();

    // Restart management
    this.restartTimer = null;
    this.isRestarting = false;
  }

  /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É
     * @returns {Promise<boolean>} - –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
     */
  async onInitialize() {
    try {
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ Web Speech API
      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
      if (!SpeechRecognition) {
        this.logger.error('Speech Recognition API not supported in this browser');
        return false;
      }

      // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Å—Ç–∞–Ω—Å—É —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
      this.recognition = new SpeechRecognition();
      this.configureRecognition();
      this.setupEventHandlers();
      this.bindBrowserEvents();

      // –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–¥—ñ—ó conversation mode
      this.subscribeToConversationEvents();

      this.logger.info('Keyword detection service initialized');
      return true;

    } catch (error) {
      this.logger.error('Failed to initialize keyword detection', null, error);
      return false;
    }
  }

  /**
   * –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–¥—ñ—ó conversation mode
   */
  subscribeToConversationEvents() {
    console.log('[KEYWORD] üé¨ Subscribing to conversation events...');

    // –ó–∞–ø–∏—Ç –Ω–∞ –ø–æ—á–∞—Ç–æ–∫ keyword detection –≤—ñ–¥ conversation mode
    if (!this.eventManager) {
      console.error('[KEYWORD] ‚ùå EventManager is undefined!');
      this.logger.error('EventManager not available in KeywordDetectionService');
      return;
    }

    console.log('[KEYWORD] ‚úÖ EventManager available:', typeof this.eventManager);

    this.eventManager.on('START_KEYWORD_DETECTION', async (event) => {
      const { keywords, mode } = event.payload || {};
      console.log('[KEYWORD] üì® Received START_KEYWORD_DETECTION request:', { keywords, mode });
      this.logger.info('üîç Received START_KEYWORD_DETECTION request', { keywords, mode });

      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è keywords —è–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω—ñ
      if (keywords && Array.isArray(keywords) && keywords.length > 0) {
        this.detectionConfig.keywords = keywords;
        console.log('[KEYWORD] üìù Updated keywords to:', keywords);
        this.logger.debug(`Updated keywords to: ${keywords.join(', ')}`);
      }

      // –ó–∞–ø—É—Å–∫ –¥–µ—Ç–µ–∫—Ü—ñ—ó
      console.log('[KEYWORD] üé§ Starting detection...');
      const started = await this.startDetection();
      console.log(`[KEYWORD] ${started ? '‚úÖ' : '‚ùå'} Detection start result:`, started);
    });

    console.log('[KEYWORD] ‚úÖ Subscribed to START_KEYWORD_DETECTION event');
    this.logger.debug('Subscribed to conversation mode events');
  }

  /**
     * –ó–Ω–∏—â–µ–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—É
     * @returns {Promise<void>}
     */
  async onDestroy() {
    await this.stopDetection();
    this.cleanupResources();
  }

  /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
     */
  configureRecognition() {
    if (!this.recognition) return;

    this.recognition.lang = this.detectionConfig.language;
    this.recognition.continuous = this.detectionConfig.continuous;
    this.recognition.interimResults = this.detectionConfig.interimResults;
    this.recognition.maxAlternatives = 3;

    this.logger.debug('Speech recognition configured', {
      language: this.detectionConfig.language,
      continuous: this.detectionConfig.continuous,
      interimResults: this.detectionConfig.interimResults
    });
  }

  /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π Web Speech API
     */
  setupEventHandlers() {
    if (!this.recognition) return;

    this.recognition.onstart = () => {
      this.isRecognitionRunning = true;
      this.manualStop = false;
      this.logger.info('üé§ Keyword detection started');

      // –°–∫–∏–¥–∞–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤ –ø—Ä–∏ —É—Å–ø—ñ—à–Ω–æ–º—É –∑–∞–ø—É—Å–∫—É
      this.resetErrorCounters();

      this.emit(Events.KEYWORD_DETECTION_STARTED, {
        keywords: this.detectionConfig.keywords
      });
    };

    this.recognition.onresult = (event) => {
      this.handleRecognitionResult(event);
    };

    this.recognition.onerror = (event) => {
      this.handleRecognitionError(event);
    };

    this.recognition.onend = () => {
      this.isRecognitionRunning = false;
      this.logger.info('üé§ Keyword detection ended');

      this.emit(Events.KEYWORD_DETECTION_STOPPED, {
        wasManual: this.manualStop
      });

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —è–∫—â–æ –∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º
      if (this.isActive && !this.manualStop) {
        this.scheduleRestart();
      }
    };
  }

  /**
     * –û–±—Ä–æ–±–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
     * @param {SpeechRecognitionEvent} event - –ü–æ–¥—ñ—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
     */
  handleRecognitionResult(event) {
    // –°–∫–∏–¥–∞–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤ –ø–æ–º–∏–ª–æ–∫ –ø—Ä–∏ —É—Å–ø—ñ—à–Ω–æ–º—É —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—ñ
    this.resetNoSpeechCounter();

    for (let i = event.resultIndex; i < event.results.length; i++) {
      const result = event.results[i];
      const transcript = result[0].transcript.trim();
      const confidence = result[0].confidence || 1.0;

      // ‚úÖ –î–û–î–ê–ù–û: –î–µ—Ç–∞–ª—å–Ω–µ –ª–æ–≥—É–≤–∞–Ω–Ω—è –ö–û–ñ–ù–û–ì–û —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
      console.log('[KEYWORD] üé§ Web Speech recognized:', {
        text: transcript,
        confidence: confidence.toFixed(2),
        isFinal: result.isFinal,
        alternatives: result.length
      });

      this.logger.debug(`Speech result: "${transcript}" (confidence: ${confidence}, final: ${result.isFinal})`);

      if (result.isFinal) {
        this.processFinalResult(transcript, confidence);
      }

      // –ï–º—ñ—Å—ñ—è –ø–æ–¥—ñ—ó –¥–ª—è –ø—Ä–æ–º—ñ–∂–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
      if (!result.isFinal && this.detectionConfig.interimResults) {
        this.emit(Events.SPEECH_INTERIM_RESULT, {
          text: transcript,
          confidence,
          source: 'keyword_detection'
        });
      }
    }
  }

  /**
     * –û–±—Ä–æ–±–∫–∞ —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
     * @param {string} transcript - –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç
     * @param {number} confidence - –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
     */
  processFinalResult(transcript, confidence) {
    this.logger.debug(`Processing final result: "${transcript}"`);

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ
    if (containsActivationKeyword(transcript, this.detectionConfig.keywords)) {
      this.handleKeywordDetection(transcript, confidence);
      return;
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Å—Ç–æ–ø-–∫–æ–º–∞–Ω–¥—É
    if (isStopCommand(transcript)) {
      this.handleStopCommand(transcript);
      return;
    }

    // –Ü–Ω—à—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –º–æ–≤–∏ –ø–µ—Ä–µ–¥–∞—î–º–æ –¥–∞–ª—ñ
    this.emit(Events.SPEECH_RESULT, {
      text: transcript,
      confidence,
      source: 'keyword_detection',
      isFinal: true
    });
  }

  /**
     * –û–±—Ä–æ–±–∫–∞ –≤–∏—è–≤–ª–µ–Ω–Ω—è –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
     * @param {string} transcript - –ü–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç
     * @param {number} confidence - –í–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
     */
  async handleKeywordDetection(transcript, confidence) {
    console.log('[KEYWORD] üéØ Keyword detected!:', transcript, 'confidence:', confidence);
    this.logger.info(`üéØ Keyword detected: "${transcript}" (confidence: ${confidence})`);

    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    const response = this.getRandomActivationResponse();
    console.log('[KEYWORD] üó£Ô∏è Generated response:', response);

    // –ï–º—ñ—Å—ñ—è –ø–æ–¥—ñ—ó –≤–∏—è–≤–ª–µ–Ω–Ω—è –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    console.log('[KEYWORD] üì° Emitting KEYWORD_DETECTED event...');
    await this.emit(Events.KEYWORD_DETECTED, {
      transcript,
      confidence,
      response,
      keyword: this.detectionConfig.keywords[0], // –î–æ–¥–∞—î–º–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ
      timestamp: new Date(),
      keywords: this.detectionConfig.keywords
    });
    console.log('[KEYWORD] ‚úÖ KEYWORD_DETECTED event emitted');

    this.logger.info(`üó£Ô∏è Activation response: "${response}"`);
  }

  /**
     * –û–±—Ä–æ–±–∫–∞ —Å—Ç–æ–ø-–∫–æ–º–∞–Ω–¥–∏
     * @param {string} transcript - –¢–µ–∫—Å—Ç —Å—Ç–æ–ø-–∫–æ–º–∞–Ω–¥–∏
     */
  async handleStopCommand(transcript) {
    this.logger.info(`üõë Stop command detected: "${transcript}"`);

    // –ï–º—ñ—Å—ñ—è –ø–æ–¥—ñ—ó —Å—Ç–æ–ø-–∫–æ–º–∞–Ω–¥–∏
    await this.emit(Events.STOP_COMMAND_DETECTED, {
      transcript,
      timestamp: new Date(),
      source: 'keyword_detection'
    });
  }

  /**
     * –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
     * @param {SpeechRecognitionErrorEvent} event - –ü–æ–¥—ñ—è –ø–æ–º–∏–ª–∫–∏
     */
  handleRecognitionError(event) {
    // –Ü–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ –ø—ñ—Å–ª—è —Ä—É—á–Ω–æ—ó –∑—É–ø–∏–Ω–∫–∏
    if (this.manualStop) {
      this.logger.debug('Error occurred after manual stop, ignoring');
      return;
    }

    const errorType = event.error;
    this.errorCounters.total++;

    // –†–æ–∑—Ä—ñ–∑–Ω—è—î–º–æ —Ç–∏–ø–∏ –ø–æ–º–∏–ª–æ–∫
    if (errorType === 'no-speech') {
      this.handleNoSpeechError();
    } else if (errorType === 'network') {
      this.handleNetworkError();
    } else {
      this.handleOtherError(errorType);
    }

    // –ï–º—ñ—Å—ñ—è –ø–æ–¥—ñ—ó –ø–æ–º–∏–ª–∫–∏
    this.emit(Events.KEYWORD_DETECTION_ERROR, {
      errorType,
      message: event.message || 'Unknown error',
      counters: { ...this.errorCounters },
      timestamp: new Date()
    });
  }

  /**
     * –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏ 'no-speech'
     */
  handleNoSpeechError() {
    this.errorCounters.noSpeech++;
    this.errorCounters.consecutive++;
    this.backoffState.lastErrorType = 'no-speech';

    this.logger.debug(`No speech detected (consecutive: ${this.errorCounters.consecutive}, total: ${this.errorCounters.noSpeech})`);

    // –ü–æ–º–∏–ª–∫–∞ no-speech –Ω–æ—Ä–º–∞–ª—å–Ω–∞, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ
  }

  /**
     * –û–±—Ä–æ–±–∫–∞ –º–µ—Ä–µ–∂–µ–≤–∏—Ö –ø–æ–º–∏–ª–æ–∫
     */
  handleNetworkError() {
    this.errorCounters.network++;
    this.errorCounters.consecutive++;
    this.errorCounters.noSpeech = 0; // –°–∫–∏–¥–∞—î–º–æ no-speech –ø—Ä–∏ –º–µ—Ä–µ–∂–µ–≤–∏—Ö –ø–æ–º–∏–ª–∫–∞—Ö
    this.backoffState.lastErrorType = 'network';
    this.backoffState.lastNetworkErrorTime = Date.now();

    const cooldown = this.calculateNetworkBackoff();
    this.backoffState.cooldownUntil = Math.max(this.backoffState.cooldownUntil, Date.now() + cooldown);

    this.logger.warn(`Network error (${this.errorCounters.network}). Cooldown for ${cooldown}ms`);

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –º–∞–∫—Å–∏–º—É–º—É –º–µ—Ä–µ–∂–µ–≤–∏—Ö –ø–æ–º–∏–ª–æ–∫
    if (this.errorCounters.network >= this.errorHandling.maxNetworkErrors) {
      this.logger.error(`Maximum network errors reached (${this.errorCounters.network}). Disabling keyword detection.`);
      this.stopDetection();
    }
  }

  /**
     * –û–±—Ä–æ–±–∫–∞ —ñ–Ω—à–∏—Ö –ø–æ–º–∏–ª–æ–∫
     * @param {string} errorType - –¢–∏–ø –ø–æ–º–∏–ª–∫–∏
     */
  handleOtherError(errorType) {
    this.errorCounters.consecutive++;
    this.errorCounters.noSpeech = 0; // –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ no-speech
    this.backoffState.lastErrorType = errorType;

    this.logger.warn(`Speech recognition error: ${errorType}`);
  }

  /**
     * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞—Ç—Ä–∏–º–∫–∏ –¥–ª—è –º–µ—Ä–µ–∂–µ–≤–∏—Ö –ø–æ–º–∏–ª–æ–∫
     * @returns {number} - –ó–∞—Ç—Ä–∏–º–∫–∞ –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö
     */
  calculateNetworkBackoff() {
    const baseDelay = this.errorHandling.networkBackoffBase || 2000;
    const maxDelay = this.errorHandling.networkBackoffMax || 60000;
    const count = this.errorCounters.network;

    if (count <= 1) return baseDelay;
    if (count <= 3) return baseDelay * 2;
    if (count <= 5) return baseDelay * 4;
    if (count <= 8) return baseDelay * 8;

    // –ï–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–π–Ω–∏–π backoff –∑ jitter –¥–ª—è –≤–µ–ª–∏–∫–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–º–∏–ª–æ–∫
    const multiplier = Math.min(Math.pow(1.5, count - 8), maxDelay / baseDelay);
    const jitter = Math.floor(Math.random() * 1000);
    return Math.min(baseDelay * multiplier + jitter, maxDelay);
  }

  /**
     * –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É –¥–µ—Ç–µ–∫—Ü—ñ—ó
     */
  scheduleRestart() {
    if (this.isRestarting || !this.isActive || this.manualStop) {
      return;
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ guard-—É–º–æ–≤
    const guardReason = this.getRestartGuardReason();
    if (guardReason) {
      this.logger.debug(`Restart blocked: ${guardReason}`);

      // –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ —á–µ—Ä–µ–∑ –¥–µ—è–∫–∏–π —á–∞—Å
      const retryDelay = this.backoffState.lastErrorType === 'network' ? 5000 : 1000;
      setTimeout(() => {
        if (this.isActive && !this.isRecognitionRunning) {
          this.scheduleRestart();
        }
      }, retryDelay);
      return;
    }

    this.isRestarting = true;
    const delay = this.calculateRestartDelay();

    this.logger.info(`‚è≥ Restarting keyword detection in ${delay}ms (reason: ${this.backoffState.lastErrorType || 'normal'})`);

    this.restartTimer = setTimeout(() => {
      this.isRestarting = false;
      this.restartTimer = null;

      if (this.isActive && !this.manualStop && !this.isRecognitionRunning) {
        this.startRecognition();
      }
    }, delay);
  }

  /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∏—á–∏–Ω –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É
     * @returns {string|null} - –ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∞–±–æ null
     */
  getRestartGuardReason() {
    if (this.isRestarting) return 'already restarting';
    if (!this.isOnline()) return 'browser offline';
    if (Date.now() < this.backoffState.cooldownUntil) return 'cooldown active';
    if (document && document.visibilityState === 'hidden') return 'tab hidden';
    return null;
  }

  /**
     * –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞—Ç—Ä–∏–º–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É
     * @returns {number} - –ó–∞—Ç—Ä–∏–º–∫–∞ –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö
     */
  calculateRestartDelay() {
    if (this.backoffState.lastErrorType === 'network') {
      return this.calculateNetworkBackoff();
    }

    if (this.backoffState.lastErrorType === 'no-speech') {
      const maxAttempts = this.errorHandling.maxConsecutiveNoSpeech || 3;
      if (this.errorCounters.consecutive < maxAttempts) {
        return 100; // –®–≤–∏–¥–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –¥–ª—è no-speech
      }

      // Exponential backoff –¥–ª—è –±–∞–≥–∞—Ç—å–æ—Ö no-speech
      const multiplier = Math.min(this.errorCounters.consecutive - maxAttempts + 1, 6);
      return Math.min(100 * Math.pow(2, multiplier), 10000);
    }

    // –î–ª—è —ñ–Ω—à–∏—Ö –ø–æ–º–∏–ª–æ–∫ - –ø–æ–º—ñ—Ä–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –∑ jitter
    return 500 + Math.floor(Math.random() * 300);
  }

  /**
     * –í–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π –∑–∞–ø—É—Å–∫ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
     * @returns {boolean} - –ß–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ
     */
  startRecognition() {
    console.log('[KEYWORD] üöÄ startRecognition() called');

    if (!this.recognition) {
      console.error('[KEYWORD] ‚ùå Recognition not initialized');
      this.logger.error('Recognition not initialized');
      return false;
    }

    if (this.isRecognitionRunning) {
      console.log('[KEYWORD] ‚ö†Ô∏è Recognition already running');
      this.logger.warn('Recognition already running');
      return false;
    }

    const guardReason = this.getRestartGuardReason();
    if (guardReason) {
      console.log('[KEYWORD] üö´ Start blocked:', guardReason);
      this.logger.debug(`Start blocked: ${guardReason}`);
      return false;
    }

    try {
      console.log('[KEYWORD] üìû Calling recognition.start()...');
      this.recognition.start();
      console.log('[KEYWORD] ‚úÖ Recognition started successfully');
      this.logger.debug('üîÑ Recognition started');
      return true;
    } catch (error) {
      console.error('[KEYWORD] ‚ùå Failed to start recognition:', error);
      this.logger.error('Failed to start recognition', null, error);

      // –°–ø—Ä–æ–±–∞ forced cleanup
      try {
        this.recognition.stop();
      } catch (e) {
        this.logger.warn('Failed to stop recognition during error recovery', null, e);
      }

      return false;
    }
  }

  /**
     * –ó–∞–ø—É—Å–∫ –¥–µ—Ç–µ–∫—Ü—ñ—ó –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤
     * @returns {Promise<boolean>} - –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å –∑–∞–ø—É—Å–∫—É
     */
  async startDetection() {
    console.log('[KEYWORD] üé§ startDetection() called');

    if (!this.isInitialized) {
      console.error('[KEYWORD] ‚ùå Service not initialized');
      this.logger.error('Service not initialized');
      return false;
    }

    if (this.isActive) {
      console.log('[KEYWORD] ‚ö†Ô∏è Keyword detection already active');
      this.logger.debug('Keyword detection already active');
      return true;
    }

    console.log('[KEYWORD] üéØ Starting keyword detection for:', this.detectionConfig.keywords);
    this.logger.info(`üéØ Starting keyword detection for: ${this.detectionConfig.keywords.join(', ')}`);

    this.isActive = true;
    this.manualStop = false;
    this.resetErrorCounters();

    console.log('[KEYWORD] üìû Calling startRecognition()...');
    // –ó–∞–ø—É—Å–∫ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —è–∫—â–æ –Ω–µ–º–∞—î guard-–ø—Ä–∏—á–∏–Ω
    if (!this.isRecognitionRunning) {
      const success = this.startRecognition();
      if (!success) {
        // –í—ñ–¥–∫–ª–∞–¥–µ–Ω–∏–π –∑–∞–ø—É—Å–∫
        setTimeout(() => {
          if (this.isActive && !this.isRecognitionRunning) {
            this.startRecognition();
          }
        }, 300);
      }
    }

    return true;
  }

  /**
     * –ó—É–ø–∏–Ω–∫–∞ –¥–µ—Ç–µ–∫—Ü—ñ—ó –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤
     * @returns {Promise<void>}
     */
  async stopDetection() {
    this.logger.info('üéØ Stopping keyword detection');

    this.isActive = false;
    this.isRestarting = false;
    this.manualStop = true;

    // –°–∫–∏–¥–∞–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤
    this.resetErrorCounters();
    this.backoffState.cooldownUntil = 0;

    // –ó—É–ø–∏–Ω–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É
    if (this.restartTimer) {
      clearTimeout(this.restartTimer);
      this.restartTimer = null;
    }

    // –ó—É–ø–∏–Ω–∫–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
    if (this.recognition && this.isRecognitionRunning) {
      try {
        // –¢–∏–º—á–∞—Å–æ–≤–∞ –∑–∞–º—ñ–Ω–∞ onend —â–æ–± –Ω–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
        const originalOnEnd = this.recognition.onend;
        this.recognition.onend = () => {
          this.isRecognitionRunning = false;
          this.logger.info('üé§ Keyword detection ended (manual stop)');

          // –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–æ–±–Ω–∏–∫–∞
          this.recognition.onend = originalOnEnd;

          // –°–∫–∏–¥–∞–Ω–Ω—è –ø—Ä–∞–ø–æ—Ä—Ü—è —á–µ—Ä–µ–∑ –º—ñ–∫—Ä–æ—Ç–∞—Å–∫
          setTimeout(() => {
            this.manualStop = false;
          }, 0);
        };

        this.recognition.stop();
      } catch (error) {
        this.logger.warn('Error stopping recognition', null, error);
      }
    }
  }

  /**
     * –°–∫–∏–¥–∞–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤ –ø–æ–º–∏–ª–æ–∫
     */
  resetErrorCounters() {
    this.errorCounters = {
      noSpeech: 0,
      network: 0,
      consecutive: 0,
      total: this.errorCounters.total // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –ª—ñ—á–∏–ª—å–Ω–∏–∫
    };
    this.backoffState.lastErrorType = null;
    this.backoffState.lastNetworkErrorTime = 0;
    this.logger.debug('Error counters reset');
  }

  /**
     * –°–∫–∏–¥–∞–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ no-speech (–ø—Ä–∏ —É—Å–ø—ñ—à–Ω–æ–º—É —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—ñ)
     */
  resetNoSpeechCounter() {
    if (this.errorCounters.noSpeech > 0) {
      this.logger.debug(`Speech detected, resetting no-speech counter from ${this.errorCounters.noSpeech} to 0`);
      this.errorCounters.noSpeech = 0;
      this.errorCounters.consecutive = 0;
    }

    // –°–∫–∏–¥–∞–Ω–Ω—è –º–µ—Ä–µ–∂–µ–≤–∏—Ö –ø–æ–º–∏–ª–æ–∫ –ø—Ä–∏ —É—Å–ø—ñ—à–Ω–æ–º—É —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—ñ
    if (this.errorCounters.network > 0) {
      this.logger.debug(`Successful recognition, resetting network errors from ${this.errorCounters.network} to 0`);
      this.errorCounters.network = 0;
      this.backoffState.cooldownUntil = 0;
    }
  }

  /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –∑ –ø—Ä–æ–º–ø—Ç—ñ–≤ –∞–±–æ fallback
     * @returns {string[]} - –ú–∞—Å–∏–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
     */
  getActivationResponses() {
    // Fallback –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ, —è–∫—â–æ –ø—Ä–æ–º–ø—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ
    const fallbackResponses = [
      '—è —É–≤–∞–∂–Ω–æ –í–∞—Å —Å–ª—É—Ö–∞—é –û–ª–µ–≥ –ú–∏–∫–æ–ª–∞–π–æ–≤–∏—á',
      '—Ç–∞–∫ —Ç–≤–æ—Ä–µ—Ü—å, –≤–∏ –º–µ–Ω–µ –∑–≤–∞–ª–∏',
      '–≤–µ—Å—å –≤ —É–≤–∞–∑—ñ',
      '—Å–ª—É—Ö–∞—é',
      '—Ç–∞–∫, –û–ª–µ–≥ –ú–∏–∫–æ–ª–∞–π–æ–≤–∏—á',
      '—è —Ç—É—Ç, —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ?',
      '–≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏',
      '–Ω–∞ –∑–≤\'—è–∑–∫—É',
      '—Å–ª—É—Ö–∞—é —É–≤–∞–∂–Ω–æ',
      '—Ç–∞–∫, —Ç–≤–æ—Ä–µ—Ü—å',
      '—â–æ –±–∞–∂–∞—î—Ç–µ?',
      '—è –≥–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏',
      '—É –≤–∞—à–æ–º—É —Ä–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—ñ',
      '—Å–ª—É—Ö–∞—é –∫–æ–º–∞–Ω–¥–∏',
      '–≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è',
      '—Ç–∞–∫, —à–µ—Ñ–µ',
      '–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π —Ç–∞ –≥–æ—Ç–æ–≤–∏–π',
      '–≤—Å—ñ —Å–∏—Å—Ç–µ–º–∏ –≤ –Ω–æ—Ä–º—ñ, —Å–ª—É—Ö–∞—é',
      '–ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π, –æ—á—ñ–∫—É—é —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π',
      '–≥–æ—Ç–æ–≤–∏–π –ø—Ä–∞—Ü—é–≤–∞—Ç–∏, –û–ª–µ–≥ –ú–∏–∫–æ–ª–∞–π–æ–≤–∏—á'
    ];

    // TODO: –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ prompt system –∫–æ–ª–∏ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±—Ä–∞—É–∑–µ—Ä—ñ
    // –í –º–∞–π–±—É—Ç–Ω—å–æ–º—É —Ç—É—Ç –±—É–¥–µ –≤–∏–∫–ª–∏–∫ –¥–æ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ API –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—ñ–≤

    return fallbackResponses;
  }

  /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—é
     * @returns {string} - –í–∏–ø–∞–¥–∫–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
     */
  getRandomActivationResponse() {
    const responses = this.getActivationResponses();
    const randomIndex = Math.floor(Math.random() * responses.length);
    return responses[randomIndex];
  }

  /**
     * –ü—Ä–∏–≤'—è–∑–∫–∞ –¥–æ –ø–æ–¥—ñ–π –±—Ä–∞—É–∑–µ—Ä–∞
     */
  bindBrowserEvents() {
    // –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –º–µ—Ä–µ–∂—ñ
    window.addEventListener('online', () => {
      this.logger.info('üåê Browser is online');
      this.backoffState.cooldownUntil = 0;

      if (this.isActive && !this.isRecognitionRunning) {
        setTimeout(() => this.startRecognition(), 500);
      }
    });

    window.addEventListener('offline', () => {
      this.logger.warn('üåê Browser is offline');
    });

    // –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –≤–∏–¥–∏–º–æ—Å—Ç—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    document.addEventListener('visibilitychange', () => {
      if (document.visibilityState === 'visible') {
        this.logger.debug('üëÅÔ∏è Tab visible');

        if (this.isActive && !this.isRecognitionRunning) {
          setTimeout(() => {
            if (!this.isRecognitionRunning) {
              this.startRecognition();
            }
          }, 300);
        }
      } else {
        this.logger.debug('üëÅÔ∏è Tab hidden');
      }
    });
  }

  /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å—É
     * @returns {boolean} - –ß–∏ –æ–Ω–ª–∞–π–Ω –±—Ä–∞—É–∑–µ—Ä
     */
  isOnline() {
    return typeof navigator !== 'undefined' ? (navigator.onLine !== false) : true;
  }

  /**
     * –û—á–∏—â–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤
     */
  cleanupResources() {
    // –ó—É–ø–∏–Ω–∫–∞ —Ç–∞–π–º–µ—Ä—ñ–≤
    if (this.restartTimer) {
      clearTimeout(this.restartTimer);
      this.restartTimer = null;
    }

    // –û—á–∏—â–µ–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω—å
    this.recognition = null;
    this.eventListeners.clear();

    this.logger.debug('Resources cleaned up');
  }

  /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–º–∏–ª–æ–∫
     * @returns {Object} - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–º–∏–ª–æ–∫ —Ç–∞ —Å—Ç–∞–Ω
     */
  getErrorStats() {
    return {
      counters: { ...this.errorCounters },
      backoff: { ...this.backoffState },
      isInCooldown: Date.now() < this.backoffState.cooldownUntil,
      timeUntilRestart: Math.max(0, this.backoffState.cooldownUntil - Date.now()),
      isRecognitionRunning: this.isRecognitionRunning,
      isActive: this.isActive
    };
  }

  /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∞–∫—Ç–∏–≤–Ω–∞ –¥–µ—Ç–µ–∫—Ü—ñ—è
     * @returns {boolean} - –ß–∏ –∞–∫—Ç–∏–≤–Ω–∞ –¥–µ—Ç–µ–∫—Ü—ñ—è
     */
  isDetectionActive() {
    return this.isActive;
  }
}

export default KeywordDetectionService;
