/**
 * @fileoverview Whisper-based keyword detection for conversation mode
 * –ó–∞–±–µ–∑–ø–µ—á—É—î —Ç–æ—á–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ "–ê—Ç–ª–∞—Å" —á–µ—Ä–µ–∑ Whisper API
 *
 * @version 4.0.0
 * @date 2025-10-11 - 02:50 AM
 */

import { BaseService } from '../core/base-service.js';
import { API_ENDPOINTS } from '../core/config.js';
import { Events } from '../events/event-manager.js';
import { containsActivationKeyword, correctAtlasWord } from '../utils/voice-utils.js';

/**
 * –°–µ—Ä–≤—ñ—Å –¥–µ—Ç–µ–∫—Ü—ñ—ó –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ —á–µ—Ä–µ–∑ Whisper
 * –ü—Ä–∞—Ü—é—î –≤ continuous —Ä–µ–∂–∏–º—ñ: —Å–ª—É—Ö–∞—î ‚Üí 2-3 —Å–µ–∫ –∑–∞–ø–∏—Å ‚Üí Whisper ‚Üí –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ ‚Üí repeat
 */
export class WhisperKeywordDetection extends BaseService {
    constructor(config = {}) {
        super({
            name: 'WHISPER_KEYWORD_DETECTION',
            version: '4.0.0',
            ...config
        });

        this.whisperUrl = config.whisperUrl || API_ENDPOINTS.whisper;
        this.keywords = config.keywords || ['–∞—Ç–ª–∞—Å', 'atlas'];

        // –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ continuous listening (OPTIMIZED 2025-10-11)
        this.chunkDuration = config.chunkDuration || 2000; // 2.0 —Å–µ–∫ (–±—É–ª–æ 2.5) - —à–≤–∏–¥—à–∞ —Ä–µ–∞–∫—Ü—ñ—è
        this.pauseBetweenChunks = config.pauseBetweenChunks || 100; // 100ms (–±—É–ª–æ 200ms) - –º–µ–Ω—à–∞ –∑–∞—Ç—Ä–∏–º–∫–∞

        // –§—ñ–ª—å—Ç—Ä –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–∏—Ö —Ñ—Ä–∞–∑ (—Ñ–æ–Ω–æ–≤—ñ –≤—ñ–¥–µ–æ)
        this.recentTranscripts = []; // –û—Å—Ç–∞–Ω–Ω—ñ 5 —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ–π
        this.maxRecentTranscripts = 5;
        this.backgroundPhrases = [
            '–¥—è–∫—É—é –∑–∞ –ø–µ—Ä–µ–≥–ª—è–¥',
            '–ø—ñ–¥–ø–∏—Å—É–π—Å—è –Ω–∞ –∫–∞–Ω–∞–ª',
            '—Å—Ç–∞–≤—Ç–µ –ª–∞–π–∫',
            '—Å—É–±—Ç–∏—Ç—Ä',
            '–∫—ñ–Ω–µ—Ü—å',
            'the end',
            'ending',
            'credits',
            // –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ–æ–Ω–æ–≤—ñ —Ñ—Ä–∞–∑–∏ (2025-10-11)
            '–æ–ª—è —à–æ—Ä',
            '—Å—É–±—Ç–∏—Ç—Ä—É–≤–∞–ª—å–Ω–∏—Ü—è',
            '–¥–æ –∑—É—Å—Ç—Ä—ñ—á—ñ',
            '–¥–æ –ø–æ–±–∞—á–µ–Ω–Ω—è',
            '–±—É–¥—å –ª–∞—Å–∫–∞',
            '–¥—è–∫—É—é!',
            '–¥—è–∫—É—é –∑–∞ —É–≤–∞–≥—É',
            '–∫–æ–º–µ–Ω—Ç—É–π—Ç–µ',
            '–ø—ñ–¥–ø–∏—Å—É–π—Ç–µ—Å—å'
        ];

        // –°—Ç–∞–Ω
        this.isListening = false;
        this.mediaRecorder = null;
        this.audioStream = null;
        this.audioChunks = [];
        this.loopTimer = null;
        this.recordingTimer = null;
    }

    /**
                 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
                 */
    async onInitialize() {
        try {
            // –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–¥—ñ—ó conversation mode
            this.subscribeToEvents();

            this.logger.info('Whisper keyword detection initialized');
            return true;
        } catch (error) {
            this.logger.error('Failed to initialize Whisper keyword detection', null, error);
            return false;
        }
    }

    /**
                 * –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–æ–¥—ñ—ó
                 */
    subscribeToEvents() {
        if (!this.eventManager) {
            this.logger.error('EventManager not available');
            return;
        }

        this.logger.info('üîó Subscribing to START_KEYWORD_DETECTION event...');
        console.log('[WHISPER_KEYWORD] üîó Subscribing to START_KEYWORD_DETECTION event...', {
            eventManager: !!this.eventManager,
            eventManagerOn: typeof this.eventManager.on
        });

        // –ó–∞–ø—É—Å–∫ keyword listening
        this.eventManager.on('START_KEYWORD_DETECTION', async (event) => {
            const { keywords, mode } = event.payload || {};
            this.logger.info('üîç Received START_KEYWORD_DETECTION event!', { keywords, mode });
            console.log('[WHISPER_KEYWORD] üîç Received START_KEYWORD_DETECTION event!', { keywords, mode, event });

            if (keywords && Array.isArray(keywords)) {
                this.keywords = keywords;
            }

            await this.startListening();
        });

        this.logger.info('‚úÖ Subscribed to START_KEYWORD_DETECTION event');
        console.log('[WHISPER_KEYWORD] ‚úÖ Subscribed to START_KEYWORD_DETECTION event');

        // –ó—É–ø–∏–Ω–∫–∞ keyword listening
        this.eventManager.on('STOP_KEYWORD_DETECTION', async () => {
            this.logger.info('üõë Stopping Whisper keyword detection');
            await this.stopListening();
        });
    }

    /**
                 * –ü–æ—á–∞—Ç–æ–∫ continuous listening
                 */
    async startListening() {
        if (this.isListening) {
            console.log('[WHISPER_KEYWORD] Already listening');
            return;
        }

        try {
            console.log('[WHISPER_KEYWORD] üéôÔ∏è Starting keyword listening...');

            // Get ALL available audio devices
            const devices = await navigator.mediaDevices.enumerateDevices();
            const audioInputs = devices.filter(d => d.kind === 'audioinput');

            console.log('[WHISPER_KEYWORD] üìã Available audio inputs:', audioInputs);

            // Find REAL microphone (avoid Camo/BlackHole/Loopback virtual devices)
            // Priority 1: Explicitly look for AirPods or MacBook/Built-in mic
            let realMic = audioInputs.find(d => {
                const label = d.label.toLowerCase();
                return (label.includes('airpods') ||
                    label.includes('macbook') ||
                    label.includes('built-in')) &&
                    !label.includes('virtual');
            });

            // Priority 2: Any device that's NOT a virtual device
            if (!realMic) {
                realMic = audioInputs.find(d => {
                    const label = d.label.toLowerCase();
                    return !label.includes('camo') &&
                        !label.includes('blackhole') &&
                        !label.includes('loopback') &&
                        !label.includes('virtual');
                });
            }

            console.log('[WHISPER_KEYWORD] üé§ Selected microphone:', realMic?.label || 'default');

            // Get microphone access with explicit device selection
            // –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–û (12.10.2025): –ó–±—ñ–ª—å—à–µ–Ω–æ sample rate –∑ 16kHz –¥–æ 48kHz –¥–ª—è –∫—Ä–∞—â–æ—ó —è–∫–æ—Å—Ç—ñ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è "–ê—Ç–ª–∞—Å"
            const constraints = {
                audio: {
                    echoCancellation: true,
                    noiseSuppression: true,
                    autoGainControl: true,
                    sampleRate: 48000,        // ‚úÖ 48 kHz high-quality (+200% –≤—ñ–¥ 16kHz)
                    sampleSize: 16,            // 16-bit samples
                    channelCount: 1            // Mono
                }
            };

            // Force specific device if found
            if (realMic?.deviceId) {
                constraints.audio.deviceId = { exact: realMic.deviceId };
                console.log('[WHISPER_KEYWORD] ‚úÖ Forcing device:', realMic.label);
            } else {
                console.warn('[WHISPER_KEYWORD] ‚ö†Ô∏è No real microphone found, using default');
            }

            this.stream = await navigator.mediaDevices.getUserMedia(constraints);
            this.audioStream = this.stream; // ‚úÖ FIX: Assign to audioStream for recordChunk()

            console.log('[WHISPER_KEYWORD] ‚úÖ Got audio stream from:', this.stream.getAudioTracks()[0]?.label);

            this.isListening = true;
            this.startRecognitionLoop();

            this.logger.info('üéôÔ∏è Started keyword listening');

        } catch (error) {
            console.error('[WHISPER_KEYWORD] ‚ùå Error starting listening:', error);
            this.logger.error('Failed to start keyword listening', error);
            this.emit(Events.KEYWORD_DETECTION_ERROR, { error: error.message });
        }
    }

    /**
                 * –ó—É–ø–∏–Ω–∫–∞ listening
                 */
    async stopListening() {
        this.isListening = false;

        // –ó—É–ø–∏–Ω–∫–∞ —Ç–∞–π–º–µ—Ä—ñ–≤
        if (this.loopTimer) {
            clearTimeout(this.loopTimer);
            this.loopTimer = null;
        }
        if (this.recordingTimer) {
            clearTimeout(this.recordingTimer);
            this.recordingTimer = null;
        }

        // –ó—É–ø–∏–Ω–∫–∞ –∑–∞–ø–∏—Å—É
        if (this.mediaRecorder && this.mediaRecorder.state !== 'inactive') {
            this.mediaRecorder.stop();
        }

        // –ó–∞–∫—Ä–∏—Ç—Ç—è audio stream
        if (this.audioStream) {
            this.audioStream.getTracks().forEach(track => track.stop());
            this.audioStream = null;
        }

        // –û—á–∏—â–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ–π
        this.recentTranscripts = [];

        this.logger.info('üõë Stopped keyword listening');

        // –ï–º—ñ—Å—ñ—è –ø–æ–¥—ñ—ó
        this.emit(Events.KEYWORD_DETECTION_STOPPED, {
            wasManual: true
        });
    }

    /**
                 * –¶–∏–∫–ª —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è: –∑–∞–ø–∏—Å ‚Üí —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è ‚Üí –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ ‚Üí repeat
                 */
    startRecognitionLoop() {
        if (!this.isListening) return;

        // –ó–∞–ø–∏—Å –æ–¥–Ω–æ–≥–æ —á–∞–Ω–∫—É
        this.recordChunk()
            .then(audioBlob => {
                if (!audioBlob || !this.isListening) return;

                // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–∞ Whisper
                return this.transcribeChunk(audioBlob);
            })
            .then(text => {
                if (!text || !this.isListening) return;

                // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ
                this.checkForKeyword(text);
            })
            .catch(error => {
                this.logger.warn('Recognition loop error', null, error);
            })
            .finally(() => {
                // –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–∏–º —á–∞–Ω–∫–æ–º
                if (this.isListening) {
                    this.loopTimer = setTimeout(() => {
                        this.startRecognitionLoop();
                    }, this.pauseBetweenChunks);
                }
            });
    }

    /**
                 * –ó–∞–ø–∏—Å –æ–¥–Ω–æ–≥–æ –∞—É–¥—ñ–æ —á–∞–Ω–∫—É
                 */
    async recordChunk() {
        return new Promise((resolve, reject) => {
            if (!this.audioStream) {
                reject(new Error('No audio stream available'));
                return;
            }

            this.audioChunks = [];

            // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è MediaRecorder
            this.mediaRecorder = new MediaRecorder(this.audioStream, {
                mimeType: 'audio/webm;codecs=opus'
            });

            this.mediaRecorder.ondataavailable = (event) => {
                if (event.data.size > 0) {
                    this.audioChunks.push(event.data);
                }
            };

            this.mediaRecorder.onstop = () => {
                const audioBlob = new Blob(this.audioChunks, { type: 'audio/webm' });
                this.audioChunks = [];
                resolve(audioBlob);
            };

            this.mediaRecorder.onerror = (error) => {
                this.logger.error('MediaRecorder error', null, error);
                reject(error);
            };

            // –ó–∞–ø—É—Å–∫ –∑–∞–ø–∏—Å—É
            this.mediaRecorder.start();

            // –ó—É–ø–∏–Ω–∫–∞ –ø—ñ—Å–ª—è chunkDuration
            this.recordingTimer = setTimeout(() => {
                if (this.mediaRecorder && this.mediaRecorder.state === 'recording') {
                    this.mediaRecorder.stop();
                }
            }, this.chunkDuration);
        });
    }

    /**
                 * –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è –∞—É–¥—ñ–æ —á–∞–Ω–∫—É —á–µ—Ä–µ–∑ Whisper
                 */
    async transcribeChunk(audioBlob) {
        try {
            // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ WAV –¥–ª—è Whisper
            const wavBlob = await this.convertToWav(audioBlob);

            // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–∞ Whisper API
            const formData = new FormData();
            formData.append('audio', wavBlob, 'audio.wav');
            formData.append('language', 'uk');
            formData.append('temperature', '0.2');

            const response = await fetch(`${this.whisperUrl}/transcribe`, {
                method: 'POST',
                body: formData
            });

            if (!response.ok) {
                throw new Error(`Whisper API error: ${response.status}`);
            }

            const result = await response.json();
            let text = result.text?.trim() || '';

            // ‚úÖ FRONTEND –ö–û–†–ï–ö–¶–Ü–Ø (12.10.2025): –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –≤–∞—Ä—ñ–∞—Ü—ñ–π "–ê—Ç–ª–∞—Å"
            if (text) {
                text = correctAtlasWord(text);
            }

            this.logger.debug(`Whisper chunk: "${text}"`);
            console.log(`[WHISPER_KEYWORD] üìù Transcribed: "${text}"`);
            return text;

        } catch (error) {
            this.logger.warn('Failed to transcribe chunk', null, error);
            return null;
        }
    }

    /**
                 * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è webm ‚Üí wav
                 */
    async convertToWav(webmBlob) {
        // –î–ª—è Whisper –ø–æ—Ç—Ä—ñ–±–µ–Ω WAV —Ñ–æ—Ä–º–∞—Ç
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–æ–π —Å–∞–º–∏–π –º–µ—Ç–æ–¥ —â–æ —ñ –≤ WhisperService
        const arrayBuffer = await webmBlob.arrayBuffer();
        const audioContext = new (window.AudioContext || window.webkitAudioContext)({ sampleRate: 16000 });
        const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);

        // –û—Ç—Ä–∏–º–∞–Ω–Ω—è PCM –¥–∞–Ω–∏—Ö
        const pcmData = audioBuffer.getChannelData(0);
        const wavBuffer = this.encodeWAV(pcmData, 16000);

        return new Blob([wavBuffer], { type: 'audio/wav' });
    }

    /**
                 * –ö–æ–¥—É–≤–∞–Ω–Ω—è PCM ‚Üí WAV
                 */
    encodeWAV(samples, sampleRate) {
        const buffer = new ArrayBuffer(44 + samples.length * 2);
        const view = new DataView(buffer);

        // WAV header
        this.writeString(view, 0, 'RIFF');
        view.setUint32(4, 36 + samples.length * 2, true);
        this.writeString(view, 8, 'WAVE');
        this.writeString(view, 12, 'fmt ');
        view.setUint32(16, 16, true); // fmt chunk size
        view.setUint16(20, 1, true); // PCM format
        view.setUint16(22, 1, true); // mono
        view.setUint32(24, sampleRate, true);
        view.setUint32(28, sampleRate * 2, true); // byte rate
        view.setUint16(32, 2, true); // block align
        view.setUint16(34, 16, true); // bits per sample
        this.writeString(view, 36, 'data');
        view.setUint32(40, samples.length * 2, true);

        // PCM samples
        let offset = 44;
        for (let i = 0; i < samples.length; i++) {
            const s = Math.max(-1, Math.min(1, samples[i]));
            view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);
            offset += 2;
        }

        return buffer;
    }

    /**
                 * –ó–∞–ø–∏—Å string –≤ DataView
                 */
    writeString(view, offset, string) {
        for (let i = 0; i < string.length; i++) {
            view.setUint8(offset + i, string.charCodeAt(i));
        }
    }

    /**
                 * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–µ–∫—Å—Ç—É –Ω–∞ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ
                 */
    checkForKeyword(text) {
        if (!text) {
            console.log('[WHISPER_KEYWORD] ‚ö†Ô∏è Empty text, skipping keyword check');
            return;
        }

        const textLower = text.toLowerCase();

        // –§–Ü–õ–¨–¢–† 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Ñ–æ–Ω–æ–≤—ñ —Ñ—Ä–∞–∑–∏ (YouTube endings, credits)
        const isBackgroundPhrase = this.backgroundPhrases.some(phrase =>
            textLower.includes(phrase)
        );

        if (isBackgroundPhrase) {
            console.log('[WHISPER_KEYWORD] üé¨ Background phrase detected (YouTube/video ending), ignoring:', text);
            return;
        }

        // –§–Ü–õ–¨–¢–† 2: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω—É —Ñ—Ä–∞–∑—É (loop detection)
        this.recentTranscripts.push(textLower);
        if (this.recentTranscripts.length > this.maxRecentTranscripts) {
            this.recentTranscripts.shift(); // –í–∏–¥–∞–ª–∏—Ç–∏ –Ω–∞–π—Å—Ç–∞—Ä—ñ—à—É
        }

        // –Ø–∫—â–æ —Ñ—Ä–∞–∑–∞ –ø–æ–≤—Ç–æ—Ä—é—î—Ç—å—Å—è 3+ —Ä–∞–∑–∏ –ø—ñ–¥—Ä—è–¥ = —Ñ–æ–Ω–æ–≤–∏–π —à—É–º
        const repeatCount = this.recentTranscripts.filter(t => t === textLower).length;
        if (repeatCount >= 3) {
            console.log('[WHISPER_KEYWORD] üîÅ Repeated phrase detected (background loop), ignoring:', text);
            return;
        }

        // –§–Ü–õ–¨–¢–† 3: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–≤–∂–∏–Ω–∏ (—Ñ–æ–Ω–æ–≤—ñ —Ñ—Ä–∞–∑–∏ —á–∞—Å—Ç–æ –¥–æ–≤–≥—ñ)
        if (textLower.length > 50) {
            console.log('[WHISPER_KEYWORD] üìè Text too long (likely background), ignoring:', text);
            return;
        }

        console.log('[WHISPER_KEYWORD] üîç Checking for keyword in:', textLower, 'Keywords:', this.keywords);

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–µ—Ä–µ–∑ voice-utils fuzzy matching
        const found = containsActivationKeyword(textLower, this.keywords);
        console.log('[WHISPER_KEYWORD] üîç Fuzzy match result:', found);

        if (found) {
            this.logger.info(`üéØ Keyword detected via Whisper: "${text}"`);
            console.log('[WHISPER_KEYWORD] üéØ KEYWORD DETECTED!', text);

            // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∏–ø–∞–¥–∫–æ–≤–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            const response = this.getRandomActivationResponse();
            console.log('[WHISPER_KEYWORD] üó£Ô∏è Generated response:', response);

            // –ï–º—ñ—Å—ñ—è –ø–æ–¥—ñ—ó –≤–∏—è–≤–ª–µ–Ω–Ω—è
            console.log('[WHISPER_KEYWORD] üì° Emitting KEYWORD_DETECTED event...', {
                eventType: Events.KEYWORD_DETECTED,
                hasEventManager: !!this.eventManager,
                eventManager: this.eventManager
            });

            this.emit(Events.KEYWORD_DETECTED, {
                transcript: text,
                confidence: 0.95, // Whisper –º–∞—î –≤–∏—Å–æ–∫—É —Ç–æ—á–Ω—ñ—Å—Ç—å
                keyword: this.keywords[0],
                response, // –î–æ–¥–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –æ–∑–≤—É—á–µ–Ω–Ω—è
                timestamp: new Date(),
                source: 'whisper',
                keywords: this.keywords
            });

            console.log('[WHISPER_KEYWORD] ‚úÖ KEYWORD_DETECTED event emitted');

            // –ó—É–ø–∏–Ω–∫–∞ listening –ø—ñ—Å–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è
            this.stopListening();
        } else {
            console.log('[WHISPER_KEYWORD] ‚ùå No keyword found in:', textLower);
        }
    }

    /**
       * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—é –∑ —Ä–æ—Ç–∞—Ü—ñ—î—é (–ë–ï–ó –ø–æ–≤—Ç–æ—Ä—ñ–≤)
       * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –∫—Ä—É–≥–æ–≤–∏–π –±—É—Ñ–µ—Ä –¥–ª—è –≥–∞—Ä–∞–Ω—Ç—ñ—ó —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–æ—Å—Ç—ñ
       * @returns {string} - –ù–∞—Å—Ç—É–ø–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ —Ä–æ—Ç–∞—Ü—ñ—ó
       */
    getRandomActivationResponse() {
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–æ—Ç–∞—Ü—ñ–π–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞ –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –≤–∏–∫–ª–∏–∫—É
        if (!this._responseRotation) {
            this._responseRotation = {
                responses: [
                    '—è —É–≤–∞–∂–Ω–æ –í–∞—Å —Å–ª—É—Ö–∞—é –û–ª–µ–≥ –ú–∏–∫–æ–ª–∞–π–æ–≤–∏—á',
                    '—Ç–∞–∫ —Ç–≤–æ—Ä–µ—Ü—å, –≤–∏ –º–µ–Ω–µ –∑–≤–∞–ª–∏',
                    '–≤–µ—Å—å –≤ —É–≤–∞–∑—ñ',
                    '—Å–ª—É—Ö–∞—é',
                    '—Ç–∞–∫, –û–ª–µ–≥ –ú–∏–∫–æ–ª–∞–π–æ–≤–∏—á',
                    '—è —Ç—É—Ç, —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ?',
                    '–≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏',
                    '–Ω–∞ –∑–≤\'—è–∑–∫—É',
                    '—Å–ª—É—Ö–∞—é —É–≤–∞–∂–Ω–æ',
                    '—Ç–∞–∫, —Ç–≤–æ—Ä–µ—Ü—å',
                    '—â–æ –±–∞–∂–∞—î—Ç–µ?',
                    '—è –≥–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏',
                    '—É –≤–∞—à–æ–º—É —Ä–æ–∑–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—ñ',
                    '—Å–ª—É—Ö–∞—é –∫–æ–º–∞–Ω–¥–∏',
                    '–≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è',
                    '—Ç–∞–∫, —à–µ—Ñ–µ',
                    '–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π —Ç–∞ –≥–æ—Ç–æ–≤–∏–π',
                    '–≤—Å—ñ —Å–∏—Å—Ç–µ–º–∏ –≤ –Ω–æ—Ä–º—ñ, —Å–ª—É—Ö–∞—é',
                    '–ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π, –æ—á—ñ–∫—É—é —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π',
                    '–≥–æ—Ç–æ–≤–∏–π –ø—Ä–∞—Ü—é–≤–∞—Ç–∏, –û–ª–µ–≥ –ú–∏–∫–æ–ª–∞–π–æ–≤–∏—á'
                ],
                currentPool: [], // –ü–æ—Ç–æ—á–Ω–∏–π –ø—É–ª –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
                usedInSession: new Set(), // –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ –≤ —Ü—ñ–π —Å–µ—Å—ñ—ó
                lastUsed: null // –û—Å—Ç–∞–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            };
        }

        const rotation = this._responseRotation;

        // –Ø–∫—â–æ –ø—É–ª –ø–æ—Ä–æ–∂–Ω—ñ–π - –ø–æ–ø–æ–≤–Ω—é—î–º–æ –π–æ–≥–æ (–≤–∏–∫–ª—é—á–∞—é—á–∏ –æ—Å—Ç–∞–Ω–Ω—é –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—É)
        if (rotation.currentPool.length === 0) {
            rotation.currentPool = rotation.responses.filter(r => r !== rotation.lastUsed);
            this.logger.debug(`üîÑ Response pool refreshed (${rotation.currentPool.length} responses)`);
        }

        // –í–∏–±–∏—Ä–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∑ –ø—É–ª—É
        const randomIndex = Math.floor(Math.random() * rotation.currentPool.length);
        const selectedResponse = rotation.currentPool[randomIndex];

        // –í–∏–¥–∞–ª—è—î–º–æ –∑ –ø—É–ª—É (–Ω–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å—Å—è –¥–æ refresh)
        rotation.currentPool.splice(randomIndex, 1);

        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —è–∫ –æ—Å—Ç–∞–Ω–Ω—é –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—É
        rotation.lastUsed = selectedResponse;
        rotation.usedInSession.add(selectedResponse);

        this.logger.debug(`üé≤ Selected response: "${selectedResponse}" (pool: ${rotation.currentPool.length} left, session: ${rotation.usedInSession.size} unique)`);

        return selectedResponse;
    }

    /**
                 * –ó–Ω–∏—â–µ–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—É
                 */
    async onDestroy() {
        await this.stopListening();
    }
}
