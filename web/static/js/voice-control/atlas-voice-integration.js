/**
 * @fileoverview –ü—Ä–∏–∫–ª–∞–¥ —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –Ω–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏ voice-control
 * –î–µ–º–æ–Ω—Å—Ç—Ä—É—î —è–∫ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ VoiceControlManager
 */

import { VoiceControlFactory } from './voice-control-manager.js';
import { VoiceControlMonitoring } from './monitoring/voice-control-monitoring.js';

/**
 * –ì–æ–ª–æ–≤–Ω–∏–π –∫–ª–∞—Å –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó voice-control –≤ ATLAS —Å–∏—Å—Ç–µ–º—É
 */
export class AtlasVoiceIntegration {
  constructor() {
    this.voiceControl = null;
    this.monitoring = null;
    this.isInitialized = false;

    // Chat —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è
    this.chatSystem = null;
    this.onMessageReceived = null;

    // UI –µ–ª–µ–º–µ–Ω—Ç–∏
    this.statusElement = null;
    this.metricsElement = null;
  }

  /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è voice-control —Å–∏—Å—Ç–µ–º–∏
     * @param {Object} config - –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏
     * @returns {Promise<boolean>} - –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
     */
  async initialize(config = {}) {
    try {
      console.log('üéôÔ∏è Initializing ATLAS Voice Control System...');

      // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
      this.monitoring = new VoiceControlMonitoring({
        enableMetrics: true,
        enableAlerts: true,
        onAlert: (alert) => this.handleAlert(alert),
        onHealthChange: (service, healthy) => this.handleHealthChange(service, healthy)
      });

      // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è voice control —Å–∏—Å—Ç–µ–º–∏ –∑ callbacks
      this.voiceControl = await VoiceControlFactory.createWithCallbacks({
        onTranscription: (result) => this.handleTranscription(result),
        onKeyword: (keyword) => this.handleKeyword(keyword),
        onError: (error) => this.handleError(error),
        onReady: () => this.handleSystemReady()
      }, {
        enableKeywordDetection: config.enableKeywordDetection !== false,
        enablePostChatAnalysis: config.enablePostChatAnalysis !== false,
        logLevel: config.logLevel || 'info',
        autoStart: config.autoStart !== false,
        serviceConfigs: {
          whisper: {
            retryAttempts: 3,
            timeout: 30000,
            ...config.whisper
          },
          microphone: {
            maxRecordingDuration: 60000,
            enableVoiceActivation: true,
            ...config.microphone
          },
          keyword: {
            keywords: ['–∞—Ç–ª–∞—Å', 'atlas', '–∞—Ç–ª–∞–∑', '–∞—Ç–ª—É—Å', '–∞—Ç–ª–µ—Å', '—Å–ª—É—Ö–∞–π', '–æ–ª–µ–≥ –º–∏–∫–æ–ª–∞–π–æ–≤–∏—á'],
            sensitivity: 0.7,
            whisperUrl: 'http://localhost:3002',  // Whisper backend –¥–ª—è keyword detection
            useWebSpeechFallback: false,  // –ù–ï –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ Web Speech API (–Ω–∏–∑—å–∫–∞ —Ç–æ—á–Ω—ñ—Å—Ç—å –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó)
            ...config.keyword
          },
          results: {
            maxResults: 50,
            enableFiltering: true,
            ...config.results
          }
        }
      });

      // –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—ñ–≤ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
      this.registerServicesForMonitoring();

      // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è UI
      this.setupUI();

      this.isInitialized = true;
      console.log('‚úÖ ATLAS Voice Control System initialized successfully');

      return true;

    } catch (error) {
      console.error('‚ùå Failed to initialize Voice Control System:', error);
      return false;
    }
  }

  /**
     * –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—ñ–≤ –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
     */
  registerServicesForMonitoring() {
    const services = ['whisper', 'microphone', 'results', 'keyword', 'postChat'];

    for (const serviceName of services) {
      const service = this.voiceControl.getService(serviceName);
      if (service) {
        this.monitoring.registerService(serviceName, service);
      }
    }
  }

  /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è UI –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
     */
  setupUI() {
    // –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
    this.statusElement = document.getElementById('voice-control-status') ||
      this.createStatusElement();

    // –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–Ω–µ–ª—ñ –º–µ—Ç—Ä–∏–∫
    this.metricsElement = document.getElementById('voice-control-metrics') ||
      this.createMetricsElement();

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É
    this.updateStatusUI('initializing');
  }

  /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å –µ–ª–µ–º–µ–Ω—Ç–∞
     * @returns {HTMLElement} - –°—Ç–≤–æ—Ä–µ–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç
     */
  createStatusElement() {
    const element = document.createElement('div');
    element.id = 'voice-control-status';
    element.className = 'voice-control-status';
    element.innerHTML = `
            <div class="status-indicator">
                <span class="status-dot"></span>
                <span class="status-text">Initializing...</span>
            </div>
        `;

    // –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤ –ø—ñ–¥—Ö–æ–¥—è—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    const container = document.querySelector('.chat-controls') ||
      document.querySelector('.main-controls') ||
      document.body;
    container.appendChild(element);

    return element;
  }

  /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–Ω–µ–ª—ñ –º–µ—Ç—Ä–∏–∫
     * @returns {HTMLElement} - –°—Ç–≤–æ—Ä–µ–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç
     */
  createMetricsElement() {
    const element = document.createElement('div');
    element.id = 'voice-control-metrics';
    element.className = 'voice-control-metrics';
    element.style.display = 'none'; // –ü—Ä–∏—Ö–æ–≤–∞–Ω–æ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º

    const container = document.querySelector('.debug-panel') ||
      document.querySelector('.sidebar') ||
      document.body;
    container.appendChild(element);

    return element;
  }

  /**
     * –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ chat —Å–∏—Å—Ç–µ–º–æ—é
     * @param {Object} chatSystem - –û–±'—î–∫—Ç chat —Å–∏—Å—Ç–µ–º–∏
     */
  integrateChatSystem(chatSystem) {
    this.chatSystem = chatSystem;

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–¥–∞—á—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤ chat
    if (this.voiceControl) {
      this.voiceControl.setTranscriptionCallback((payload) => {
        // payload = {result: {text, confidence, ...}, latency, audioSize}
        const text = payload?.result?.text || payload?.text || '';

        if (this.chatSystem && typeof this.chatSystem.sendMessage === 'function' && text.trim()) {
          this.chatSystem.sendMessage(text.trim());
        }
      });
    }
  }

  /**
     * –û–±—Ä–æ–±–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó
     * @param {Object} result - –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó
     */
  handleTranscription(result) {
    console.log('üó£Ô∏è Transcription result:', result);

    // –ó–∞–ø–∏—Å –º–µ—Ç—Ä–∏–∫–∏
    this.monitoring.recordMetric('whisper_transcription_count', 1,
      { mode: result.mode }, 'counter');

    if (result.latency) {
      this.monitoring.recordMetric('whisper_transcription_duration',
        result.latency, { mode: result.mode }, 'histogram');
    }

    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ chat —è–∫—â–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ
    if (this.chatSystem && result.text && result.text.trim()) {
      try {
        this.chatSystem.sendMessage(result.text.trim());
      } catch (error) {
        console.error('Error sending message to chat:', error);
      }
    }
  }

  /**
     * –û–±—Ä–æ–±–∫–∞ –≤–∏—è–≤–ª–µ–Ω–Ω—è –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
     * @param {Object} keyword - –î–∞–Ω—ñ –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
     */
  handleKeyword(keyword) {
    console.log('üéØ Keyword detected:', keyword);

    // –ó–∞–ø–∏—Å –º–µ—Ç—Ä–∏–∫–∏
    this.monitoring.recordMetric('keyword_detection_count', 1,
      { keyword: keyword.keyword }, 'counter');

    // –í—ñ–∑—É–∞–ª—å–Ω–∏–π —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó
    this.showKeywordActivation(keyword.keyword);

    // –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—É –ª–æ–≥—ñ–∫—É –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó
    this.triggerVoiceActivation(keyword);
  }

  /**
     * –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏ —Å–∏—Å—Ç–µ–º–∏
     * @param {Object} error - –î–∞–Ω—ñ –ø–æ–º–∏–ª–∫–∏
     */
  handleError(error) {
    console.error('‚ùå Voice Control Error:', error);

    // –ó–∞–ø–∏—Å –º–µ—Ç—Ä–∏–∫–∏
    this.monitoring.recordMetric('voice_control_error_count', 1,
      { type: error.type, service: error.service }, 'counter');

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è UI
    this.updateStatusUI('error', error.error);

    // –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    this.showErrorNotification(error);
  }

  /**
     * –û–±—Ä–æ–±–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ —Å–∏—Å—Ç–µ–º–∏
     */
  handleSystemReady() {
    console.log('‚úÖ Voice Control System is ready');

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è UI
    this.updateStatusUI('ready');

    // –ó–∞–ø—É—Å–∫ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫ UI
    this.startMetricsUpdates();
  }

  /**
     * –û–±—Ä–æ–±–∫–∞ –∞–ª–µ—Ä—Ç—É
     * @param {Object} alert - –î–∞–Ω—ñ –∞–ª–µ—Ä—Ç—É
     */
  handleAlert(alert) {
    console.warn('‚ö†Ô∏è Voice Control Alert:', alert);

    // –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–±–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è –≤ –∑–æ–≤–Ω—ñ—à–Ω—é —Å–∏—Å—Ç–µ–º—É
    if (alert.severity === 'critical') {
      this.showCriticalAlert(alert);
    }
  }

  /**
     * –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤—ñ—Å—É
     * @param {string} service - –ù–∞–∑–≤–∞ —Å–µ—Ä–≤—ñ—Å—É
     * @param {boolean} healthy - –°—Ç–∞–Ω –∑–¥–æ—Ä–æ–≤'—è
     */
  handleHealthChange(service, healthy) {
    console.log(`üîß Service ${service} health changed:`, healthy ? 'healthy' : 'unhealthy');

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫ UI
    this.updateServiceHealth(service, healthy);
  }

  /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É UI
     * @param {string} status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏
     * @param {string} [message] - –î–æ–¥–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
     */
  updateStatusUI(status, message = '') {
    if (!this.statusElement) return;

    const statusDot = this.statusElement.querySelector('.status-dot');
    const statusText = this.statusElement.querySelector('.status-text');

    if (statusDot) {
      statusDot.className = `status-dot status-${status}`;
    }

    if (statusText) {
      const statusMessages = {
        initializing: 'Initializing...',
        ready: 'Voice Control Ready',
        listening: 'Listening...',
        recording: 'Recording...',
        processing: 'Processing...',
        error: `Error: ${message}`,
        disabled: 'Voice Control Disabled'
      };

      statusText.textContent = statusMessages[status] || status;
    }
  }

  /**
     * –ü–æ–∫–∞–∑ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
     * @param {string} keyword - –í–∏—è–≤–ª–µ–Ω–µ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ
     */
  showKeywordActivation(keyword) {
    // –ê–Ω—ñ–º–∞—Ü—ñ—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –∞–±–æ –∑–≤—É–∫–æ–≤–∏–π —Å–∏–≥–Ω–∞–ª
    if (this.statusElement) {
      this.statusElement.classList.add('keyword-activated');
      setTimeout(() => {
        this.statusElement.classList.remove('keyword-activated');
      }, 1000);
    }
  }

  /**
     * –¢—Ä–∏–≥–µ—Ä –≥–æ–ª–æ—Å–æ–≤–æ—ó –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó
     * @param {Object} keyword - –î–∞–Ω—ñ –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
     */
  triggerVoiceActivation(keyword) {
    // –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—É –ª–æ–≥—ñ–∫—É –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó
    // –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π —Å—Ç–∞—Ä—Ç –∑–∞–ø–∏—Å—É
  }

  /**
     * –ü–æ–∫–∞–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
     * @param {Object} error - –î–∞–Ω—ñ –ø–æ–º–∏–ª–∫–∏
     */
  showErrorNotification(error) {
    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è toast –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ —ñ–Ω—à–∏–π —Å–ø–æ—Å—ñ–± —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    console.error('Voice Control Error:', error);
  }

  /**
     * –ü–æ–∫–∞–∑ –∫—Ä–∏—Ç–∏—á–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç—É
     * @param {Object} alert - –î–∞–Ω—ñ –∞–ª–µ—Ä—Ç—É
     */
  showCriticalAlert(alert) {
    // –í–∞–∂–ª–∏–≤–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º
    console.error('CRITICAL Voice Control Alert:', alert);
  }

  /**
     * –ó–∞–ø—É—Å–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫ UI
     */
  startMetricsUpdates() {
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 10 —Å–µ–∫—É–Ω–¥
    setInterval(() => {
      if (this.metricsElement && this.isMetricsVisible()) {
        this.updateMetricsUI();
      }
    }, 10000);
  }

  /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –≤–∏–¥–∏–º–∞ –ø–∞–Ω–µ–ª—å –º–µ—Ç—Ä–∏–∫
     * @returns {boolean} - –ß–∏ –≤–∏–¥–∏–º–∞ –ø–∞–Ω–µ–ª—å
     */
  isMetricsVisible() {
    return this.metricsElement &&
      this.metricsElement.style.display !== 'none';
  }

  /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è UI –º–µ—Ç—Ä–∏–∫
     */
  updateMetricsUI() {
    if (!this.monitoring) return;

    const report = this.monitoring.generateHealthReport();

    this.metricsElement.innerHTML = `
            <div class="metrics-header">
                <h3>Voice Control Metrics</h3>
                <div class="system-status ${report.status}">
                    ${report.status.toUpperCase()}
                </div>
            </div>
            
            <div class="metrics-grid">
                <div class="metric-card">
                    <div class="metric-label">Uptime</div>
                    <div class="metric-value">${this.formatDuration(report.uptime)}</div>
                </div>
                
                <div class="metric-card">
                    <div class="metric-label">Avg Latency</div>
                    <div class="metric-value">${Math.round(report.performance.averageLatency)}ms</div>
                </div>
                
                <div class="metric-card">
                    <div class="metric-label">Success Rate</div>
                    <div class="metric-value">${Math.round(report.performance.successRate * 100)}%</div>
                </div>
                
                <div class="metric-card">
                    <div class="metric-label">Throughput</div>
                    <div class="metric-value">${report.performance.throughput.toFixed(2)}/s</div>
                </div>
            </div>
            
            <div class="services-status">
                <h4>Services</h4>
                ${Object.entries(report.services).map(([name, data]) => `
                    <div class="service-item ${data.healthy ? 'healthy' : 'unhealthy'}">
                        <span class="service-name">${name}</span>
                        <span class="service-status">${data.healthy ? '‚úÖ' : '‚ùå'}</span>
                    </div>
                `).join('')}
            </div>
            
            ${report.alerts.length > 0 ? `
                <div class="alerts-section">
                    <h4>Active Alerts</h4>
                    ${report.alerts.map(alert => `
                        <div class="alert-item severity-${alert.severity}">
                            <div class="alert-name">${alert.name}</div>
                            <div class="alert-description">${alert.description}</div>
                        </div>
                    `).join('')}
                </div>
            ` : ''}
        `;
  }

  /**
     * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ
     * @param {number} ms - –ú—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∏
     * @returns {string} - –í—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å
     */
  formatDuration(ms) {
    const seconds = Math.floor(ms / 1000);
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);

    if (hours > 0) {
      return `${hours}h ${minutes % 60}m`;
    } else if (minutes > 0) {
      return `${minutes}m ${seconds % 60}s`;
    } else {
      return `${seconds}s`;
    }
  }

  /**
     * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤—ñ—Å—É
     * @param {string} service - –ù–∞–∑–≤–∞ —Å–µ—Ä–≤—ñ—Å—É
     * @param {boolean} healthy - –°—Ç–∞–Ω –∑–¥–æ—Ä–æ–≤'—è
     */
  updateServiceHealth(service, healthy) {
    // –õ–æ–≥—ñ–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É –≤ UI
    const serviceElement = this.metricsElement?.querySelector(`.service-${service}`);
    if (serviceElement) {
      serviceElement.className = `service-item ${healthy ? 'healthy' : 'unhealthy'}`;
    }
  }

  /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è –≤–∏–¥–∏–º–æ—Å—Ç—ñ –ø–∞–Ω–µ–ª—ñ –º–µ—Ç—Ä–∏–∫
     */
  toggleMetrics() {
    if (this.metricsElement) {
      const isVisible = this.metricsElement.style.display !== 'none';
      this.metricsElement.style.display = isVisible ? 'none' : 'block';

      if (!isVisible) {
        this.updateMetricsUI();
      }
    }
  }

  /**
     * –†—É—á–Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è —Ñ–∞–π–ª—É
     * @param {File} file - –ê—É–¥—ñ–æ —Ñ–∞–π–ª
     * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó
     */
  async transcribeFile(file) {
    if (!this.voiceControl) {
      throw new Error('Voice Control System not initialized');
    }

    return this.voiceControl.transcribeAudio(file);
  }

  /**
     * –ü—Ä–∏–º—É—Å–æ–≤–∞ –∑—É–ø–∏–Ω–∫–∞ –∑–∞–ø–∏—Å—É
     */
  async stopRecording() {
    if (this.voiceControl) {
      await this.voiceControl.stopRecording();
    }
  }

  /**
     * –û—á–∏—â–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
     */
  clearResults() {
    if (this.voiceControl) {
      this.voiceControl.clearAllResults();
    }
  }

  /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è EventManager –¥–ª—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó –∑ —ñ–Ω—à–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
     * @returns {EventManager|null} - EventManager —ñ–Ω—Å—Ç–∞–Ω—Å
     */
  getEventManager() {
    if (!this.voiceControl) {
      console.warn('[AtlasVoiceIntegration] Voice control not initialized, cannot get EventManager');
      return null;
    }
    return this.voiceControl.getEventManager();
  }

  /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Å–∏—Å—Ç–µ–º–∏
     * @returns {Object} - –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å
     */
  getSystemStatus() {
    if (!this.voiceControl) {
      return { initialized: false };
    }

    return {
      initialized: this.isInitialized,
      voiceControlStatus: this.voiceControl.getSystemStatus(),
      monitoringStatus: this.monitoring?.generateHealthReport()
    };
  }

  /**
     * –ï–∫—Å–ø–æ—Ä—Ç –º–µ—Ç—Ä–∏–∫
     * @param {string} format - –§–æ—Ä–º–∞—Ç –µ–∫—Å–ø–æ—Ä—Ç—É
     * @returns {Object|string} - –ï–∫—Å–ø–æ—Ä—Ç–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ
     */
  exportMetrics(format = 'json') {
    if (!this.monitoring) {
      return null;
    }

    return this.monitoring.exportMetrics(format);
  }

  /**
     * –ó–Ω–∏—â–µ–Ω–Ω—è —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó
     */
  async destroy() {
    console.log('üîÑ Shutting down Voice Control Integration...');

    if (this.voiceControl) {
      await this.voiceControl.destroy();
      this.voiceControl = null;
    }

    if (this.monitoring) {
      this.monitoring.destroy();
      this.monitoring = null;
    }

    this.isInitialized = false;
    console.log('‚úÖ Voice Control Integration shut down');
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞ —ñ–Ω—Å—Ç–∞–Ω—Ü—ñ—è –¥–ª—è –ª–µ–≥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
export let atlasVoice = null;

/**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ATLAS voice control —Å–∏—Å—Ç–µ–º–∏
 * @param {Object} config - –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
 * @returns {Promise<AtlasVoiceIntegration>} - –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞
 */
export async function initializeAtlasVoice(config = {}) {
  if (atlasVoice) {
    console.warn('ATLAS Voice Control already initialized');
    return atlasVoice;
  }

  atlasVoice = new AtlasVoiceIntegration();
  const success = await atlasVoice.initialize(config);

  if (!success) {
    atlasVoice = null;
    throw new Error('Failed to initialize ATLAS Voice Control');
  }

  // –ì–ª–æ–±–∞–ª—å–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–ª—è debugging
  window.atlasVoice = atlasVoice;

  return atlasVoice;
}

export default AtlasVoiceIntegration;
