/**
 * @fileoverview UI Controller –¥–ª—è Conversation Mode
 * –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≤—ñ–∑—É–∞–ª—å–Ω–∏–º–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ —Ç–∞ DOM updates
 *
 * @version 4.0.0
 * @date 2025-10-11
 */

import { UIClasses, StatusMessages, ConversationModes } from './constants.js';
import { createLogger } from '../core/logger.js';

const logger = createLogger('CONVERSATION_UI');

/**
 * @typedef {Object} UIControllerConfig
 * @property {HTMLElement} micButton - –ö–Ω–æ–ø–∫–∞ –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞
 * @property {HTMLElement} [statusElement] - –ï–ª–µ–º–µ–Ω—Ç —Å—Ç–∞—Ç—É—Å—É (—Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —è–∫—â–æ –Ω–µ–º–∞—î)
 * @property {boolean} [autoCreateStatus=true] - –ß–∏ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ status element –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
 */

/**
 * UI Controller –¥–ª—è –≤—ñ–∑—É–∞–ª—å–Ω–∏—Ö —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤ Conversation Mode
 */
export class ConversationUIController {
  /**
     * @param {UIControllerConfig} config
     */
  constructor(config = {}) {
    this.micButton = config.micButton;
    this.statusElement = config.statusElement || null;
    this.autoCreateStatus = config.autoCreateStatus !== false;

    // –ü–æ—Ç–æ—á–Ω–∏–π —Ä–µ–∂–∏–º –¥–ª—è UI
    this.currentUIMode = ConversationModes.IDLE;

    // Animation timeouts
    this.animationTimeouts = [];

    logger.info('üîß ConversationUIController initialized', {
      hasMicButton: !!this.micButton,
      hasStatusElement: !!this.statusElement,
      autoCreate: this.autoCreateStatus
    });
  }

  // ==================== INITIALIZATION ====================

  /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
     */
  initialize() {
    if (!this.micButton) {
      logger.error('‚ùå Microphone button not provided');
      return false;
    }

    // –°—Ç–≤–æ—Ä–∏—Ç–∏ status element —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    if (!this.statusElement && this.autoCreateStatus) {
      this.createStatusIndicator();
    }

    logger.info('‚úÖ UI Controller initialized');
    return true;
  }

  /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å—É
     */
  createStatusIndicator() {
    this.statusElement = document.createElement('div');
    this.statusElement.id = 'conversation-status';
    this.statusElement.className = 'conversation-status hidden';
    this.statusElement.innerHTML = `
      <div class="status-content">
        <div class="status-icon"></div>
        <div class="status-text">–ì–æ—Ç–æ–≤–∏–π</div>
      </div>
    `;

    // –î–æ–¥–∞—Ç–∏ –¥–æ body
    document.body.appendChild(this.statusElement);

    logger.debug('üìç Status indicator created');
  }

  // ==================== MODE UPDATES ====================

  /**
     * –û–Ω–æ–≤–∏—Ç–∏ UI –¥–ª—è —Ä–µ–∂–∏–º—É Idle
     */
  showIdleMode() {
    this.currentUIMode = ConversationModes.IDLE;

    // –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –∫–ª–∞—Å–∏ —Ä–µ–∂–∏–º—ñ–≤
    this.clearModeClasses();
    
    // –î–æ–¥–∞—Ç–∏ –∫–ª–∞—Å —Ä–µ–∂–∏–º—É idle
    this.micButton?.classList.add(UIClasses.MODE_IDLE);

    // –°—Ö–æ–≤–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å
    this.hideStatus();

    logger.debug('üé® UI updated: IDLE mode');
  }

  /**
     * –û–Ω–æ–≤–∏—Ç–∏ UI –¥–ª—è Quick-Send —Ä–µ–∂–∏–º—É
     */
  showQuickSendMode() {
    this.currentUIMode = ConversationModes.QUICK_SEND;

    this.clearModeClasses();
    this.micButton?.classList.add(UIClasses.MODE_QUICK_SEND);
    this.micButton?.classList.add(UIClasses.RECORDING);

    this.showStatus(StatusMessages.QUICK_SEND_RECORDING, 'quick-send');

    logger.debug('üé® UI updated: QUICK_SEND mode');
  }

  /**
     * –û–Ω–æ–≤–∏—Ç–∏ UI –¥–ª—è Conversation —Ä–µ–∂–∏–º—É
     */
  showConversationMode() {
    this.currentUIMode = ConversationModes.CONVERSATION;

    this.clearModeClasses();
    this.micButton?.classList.add(UIClasses.MODE_CONVERSATION);
    this.micButton?.classList.add(UIClasses.CONVERSATION);

    this.showStatus(StatusMessages.CONVERSATION_ACTIVE, 'conversation');

    logger.debug('üé® UI updated: CONVERSATION mode');
  }

  // ==================== BUTTON STATES ====================

  /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ —â–æ –∫–Ω–æ–ø–∫–∞ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞
     */
  showButtonPressed() {
    this.micButton?.classList.add(UIClasses.PRESSING);
  }

  /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ —â–æ –∫–Ω–æ–ø–∫–∞ –≤—ñ–¥–ø—É—â–µ–Ω–∞
     */
  showButtonReleased() {
    this.micButton?.classList.remove(UIClasses.PRESSING);
  }

  /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ —â–æ –π–¥–µ –∑–∞–ø–∏—Å
     */
  showRecording() {
    this.micButton?.classList.add(UIClasses.RECORDING);
    this.addPulseAnimation();
  }

  /**
     * –°—Ö–æ–≤–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å—É
     */
  hideRecording() {
    this.micButton?.classList.remove(UIClasses.RECORDING);
    this.removePulseAnimation();
  }

  /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ —â–æ –æ—á—ñ–∫—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
     */
  showWaitingForResponse() {
    this.micButton?.classList.add(UIClasses.WAITING_RESPONSE);
    this.showStatus(StatusMessages.WAITING_RESPONSE, 'waiting');
  }

  /**
     * –°—Ö–æ–≤–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
     */
  hideWaitingForResponse() {
    this.micButton?.classList.remove(UIClasses.WAITING_RESPONSE);
  }

  /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ —â–æ —Å–∏—Å—Ç–µ–º–∞ –¥—É–º–∞—î (processing)
     */
  showProcessing() {
    this.micButton?.classList.add(UIClasses.PROCESSING);
    this.showStatus(StatusMessages.PROCESSING, 'processing');
  }

  /**
     * –°—Ö–æ–≤–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä processing
     */
  hideProcessing() {
    this.micButton?.classList.remove(UIClasses.PROCESSING);
  }

  /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ —â–æ —Å–ª—É—Ö–∞—î–º–æ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ
     */
  showListeningForKeyword() {
    this.showStatus(StatusMessages.KEYWORD_LISTENING, 'keyword-listening');
    this.addBreathingAnimation();
  }

  /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ —â–æ –≥–æ–≤–æ—Ä–∏–º–æ (TTS –∞–∫—Ç–∏–≤–Ω–∏–π)
     */
  showSpeaking() {
    this.micButton?.classList.add(UIClasses.SPEAKING);
    this.showStatus(StatusMessages.SPEAKING, 'speaking');
  }

  /**
     * –°—Ö–æ–≤–∞—Ç–∏ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –≥–æ–≤–æ—Ä—ñ–Ω–Ω—è
     */
  hideSpeaking() {
    this.micButton?.classList.remove(UIClasses.SPEAKING);
  }

  // ==================== STATUS MESSAGES ====================

  /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
     * @param {string} message - –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
     * @param {string} [type='info'] - –¢–∏–ø (info/recording/conversation/waiting/error)
     */
  showStatus(message, type = 'info') {
    if (!this.statusElement) return;

    // –û–Ω–æ–≤–∏—Ç–∏ —Ç–µ–∫—Å—Ç
    const textElement = this.statusElement.querySelector('.status-text');
    if (textElement) {
      textElement.textContent = message;
    }

    // –û–Ω–æ–≤–∏—Ç–∏ —Ç–∏–ø
    this.statusElement.className = `conversation-status ${type}`;

    // –ü–æ–∫–∞–∑–∞—Ç–∏ –∑ –∞–Ω—ñ–º–∞—Ü—ñ—î—é
    requestAnimationFrame(() => {
      this.statusElement?.classList.remove('hidden');
      this.statusElement?.classList.add('visible');
    });

    logger.debug(`üí¨ Status: ${message} (${type})`);
  }

  /**
     * –°—Ö–æ–≤–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å
     */
  hideStatus() {
    if (!this.statusElement) return;

    this.statusElement.classList.remove('visible');
    this.statusElement.classList.add('hidden');
  }

  /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–∏–º—á–∞—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (auto-hide –ø—ñ—Å–ª—è timeout)
     * @param {string} message - –¢–µ–∫—Å—Ç
     * @param {string} type - –¢–∏–ø
     * @param {number} duration - –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å (–º—Å)
     */
  showTemporaryStatus(message, type = 'info', duration = 3000) {
    this.showStatus(message, type);

    const timeout = setTimeout(() => {
      this.hideStatus();
    }, duration);

    this.animationTimeouts.push(timeout);
  }

  /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
     * @param {string} message - –¢–µ–∫—Å—Ç –ø–æ–º–∏–ª–∫–∏
     */
  showError(message) {
    this.showTemporaryStatus(message, 'error', 5000);
    this.flashButton('error');
  }

  // ==================== ANIMATIONS ====================

  /**
     * –î–æ–¥–∞—Ç–∏ pulse –∞–Ω—ñ–º–∞—Ü—ñ—é –¥–æ –∫–Ω–æ–ø–∫–∏
     */
  addPulseAnimation() {
    this.micButton?.classList.add('pulse-animation');
  }

  /**
     * –í–∏–¥–∞–ª–∏—Ç–∏ pulse –∞–Ω—ñ–º–∞—Ü—ñ—é
     */
  removePulseAnimation() {
    this.micButton?.classList.remove('pulse-animation');
  }

  /**
     * –î–æ–¥–∞—Ç–∏ breathing –∞–Ω—ñ–º–∞—Ü—ñ—é (–¥–ª—è keyword listening)
     */
  addBreathingAnimation() {
    this.micButton?.classList.add('breathing-animation');
  }

  /**
     * –í–∏–¥–∞–ª–∏—Ç–∏ breathing –∞–Ω—ñ–º–∞—Ü—ñ—é
     */
  removeBreathingAnimation() {
    this.micButton?.classList.remove('breathing-animation');
  }

  /**
     * Flash –µ—Ñ–µ–∫—Ç –Ω–∞ –∫–Ω–æ–ø—Ü—ñ
     * @param {string} type - –¢–∏–ø —Ñ–ª–µ—à—É (success/error/info)
     */
  flashButton(type = 'success') {
    if (!this.micButton) return;

    const flashClass = `flash-${type}`;
    this.micButton.classList.add(flashClass);

    const timeout = setTimeout(() => {
      this.micButton?.classList.remove(flashClass);
    }, 500);

    this.animationTimeouts.push(timeout);
  }

  /**
     * –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ –∫–ª–∞—Å–∏ —Ä–µ–∂–∏–º—ñ–≤
     * @private
     */
  clearModeClasses() {
    if (!this.micButton) return;

    Object.values(UIClasses).forEach(className => {
      this.micButton?.classList.remove(className);
    });
  }

  // ==================== CONVERSATION FLOW UI ====================

  /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ —â–æ conversation mode –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π
     */
  showConversationActivated() {
    this.showConversationMode();
    this.flashButton('success');
    this.showStatus(StatusMessages.CONVERSATION_ACTIVE, 'conversation');
  }

  /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ —â–æ —Å–ª—É—Ö–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ conversation
     */
  showConversationListening() {
    this.showRecording();
    this.showStatus(StatusMessages.CONVERSATION_LISTENING, 'recording');
  }

  /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ —â–æ —á–µ–∫–∞—î–º–æ –Ω–∞ –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ "–ê—Ç–ª–∞—Å"
     */
  showConversationWaitingForKeyword() {
    this.hideRecording();
    this.showListeningForKeyword();
  }

  /**
     * –ü–æ–∫–∞–∑–∞—Ç–∏ —â–æ conversation –∑–∞–≤–µ—Ä—à–µ–Ω–æ
     */
  showConversationEnded(reason = 'completed') {
    this.clearModeClasses();
    this.hideStatus();

    if (reason === 'timeout') {
      this.showTemporaryStatus(StatusMessages.TIMEOUT, 'info', 3000);
    } else if (reason === 'error') {
      this.showError('–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–º–æ–≤–∏');
    }

    this.flashButton('info');
  }

  // ==================== HELPERS ====================

  /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π UI —Ä–µ–∂–∏–º
     * @returns {string}
     */
  getCurrentUIMode() {
    return this.currentUIMode;
  }

  /**
     * –ß–∏ –ø–æ–∫–∞–∑–∞–Ω–æ —Å—Ç–∞—Ç—É—Å
     * @returns {boolean}
     */
  isStatusVisible() {
    return this.statusElement?.classList.contains('visible') || false;
  }

  /**
     * –û–Ω–æ–≤–∏—Ç–∏ –∫–Ω–æ–ø–∫—É –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞ (—è–∫—â–æ –≤–æ–Ω–∞ –∑–º—ñ–Ω–∏–ª–∞—Å—å –≤ DOM)
     * @param {HTMLElement} newButton
     */
  updateMicButton(newButton) {
    this.micButton = newButton;
    logger.debug('üîÑ Microphone button updated');
  }

  // ==================== CLEANUP ====================

  /**
     * –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ timeouts —Ç–∞ –∞–Ω—ñ–º–∞—Ü—ñ—ó
     */
  clearAnimations() {
    this.animationTimeouts.forEach(timeout => clearTimeout(timeout));
    this.animationTimeouts = [];

    this.removePulseAnimation();
    this.removeBreathingAnimation();
  }

  /**
     * –ü–æ–≤–Ω–∏–π cleanup UI
     */
  cleanup() {
    logger.info('üßπ Cleaning up UI controller...');

    this.clearAnimations();
    this.clearModeClasses();
    this.hideStatus();

    // –í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π status element
    if (this.statusElement && this.autoCreateStatus) {
      this.statusElement.remove();
      this.statusElement = null;
    }

    logger.info('‚úÖ UI controller cleaned up');
  }

  /**
     * Reset –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É
     */
  reset() {
    this.clearAnimations();
    this.showIdleMode();
    logger.debug('üîÑ UI reset to initial state');
  }
}

/**
 * Helper: —Å—Ç–≤–æ—Ä–∏—Ç–∏ UI controller –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é
 * @param {UIControllerConfig} config
 * @returns {ConversationUIController}
 */
export function createUIController(config = {}) {
  return new ConversationUIController(config);
}
