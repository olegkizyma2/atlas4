/**
 * @fileoverview State Manager –¥–ª—è Conversation Mode
 * –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å—Ç–∞–Ω–æ–º —Ä–µ–∂–∏–º—ñ–≤ —Ä–æ–∑–º–æ–≤–∏
 *
 * @version 4.0.0
 * @date 2025-10-11
 */

import { ConversationModes } from './constants.js';
import { createLogger } from '../core/logger.js';

const logger = createLogger('CONVERSATION_STATE');

/**
 * @typedef {Object} ConversationState
 * @property {string} currentMode - –ü–æ—Ç–æ—á–Ω–∏–π —Ä–µ–∂–∏–º (idle/quick-send/conversation)
 * @property {boolean} isInConversation - –ß–∏ –∞–∫—Ç–∏–≤–Ω–∞ —Ä–æ–∑–º–æ–≤–∞
 * @property {boolean} conversationActive - –ß–∏ conversation mode –∞–∫—Ç–∏–≤–Ω–∏–π
 * @property {boolean} waitingForUserResponse - –ß–∏ –æ—á—ñ–∫—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * @property {boolean} transcriptionPending - –ß–∏ –æ—á—ñ–∫—É—î–º–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—é
 * @property {number} conversationStartTime - –ß–∞—Å –ø–æ—á–∞—Ç–∫—É —Ä–æ–∑–º–æ–≤–∏
 * @property {Array<Object>} conversationHistory - –Ü—Å—Ç–æ—Ä—ñ—è —Ä–æ–∑–º–æ–≤–∏
 */

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç–∞–Ω—É Conversation Mode
 */
export class ConversationStateManager {
  /**
       * @param {Object} config - –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
       * @param {number} config.conversationTimeout - –¢–∞–π–º–∞—É—Ç —Ä–æ–∑–º–æ–≤–∏ (–º—Å)
       */
  constructor(config = {}) {
    this.config = {
      conversationTimeout: config.conversationTimeout || 120000, // 2 —Ö–≤–∏–ª–∏–Ω–∏
      maxHistorySize: config.maxHistorySize || 20 // –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø–∏—Å—ñ–≤ –≤ —ñ—Å—Ç–æ—Ä—ñ—ó
    };

    // –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω
    this.state = {
      currentMode: ConversationModes.IDLE,
      isInConversation: false,
      conversationActive: false,
      waitingForUserResponse: false,
      transcriptionPending: false,
      conversationStartTime: null,
      conversationHistory: []
    };

    // Listeners –¥–ª—è –∑–º—ñ–Ω–∏ —Å—Ç–∞–Ω—É
    this.stateChangeListeners = new Set();

    logger.info('üîß ConversationStateManager initialized');
  }

  // ==================== GETTERS ====================

  /**
       * –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Ä–µ–∂–∏–º
       * @returns {string}
       */
  getCurrentMode() {
    return this.state.currentMode;
  }

  /**
       * –ß–∏ –∞–∫—Ç–∏–≤–Ω–∞ —Ä–æ–∑–º–æ–≤–∞
       * @returns {boolean}
       */
  isInConversation() {
    return this.state.isInConversation;
  }

  /**
       * –ß–∏ conversation mode –∞–∫—Ç–∏–≤–Ω–∏–π
       * @returns {boolean}
       */
  isConversationActive() {
    return this.state.conversationActive;
  }

  /**
       * –ß–∏ –æ—á—ñ–∫—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
       * @returns {boolean}
       */
  isWaitingForUserResponse() {
    return this.state.waitingForUserResponse;
  }

  /**
       * –ß–∏ –æ—á—ñ–∫—É—î–º–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—é
       * @returns {boolean}
       */
  isTranscriptionPending() {
    return this.state.transcriptionPending;
  }

  /**
       * –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≤–Ω–∏–π —Å—Ç–∞–Ω
       * @returns {ConversationState}
       */
  getState() {
    return { ...this.state };
  }

  /**
       * –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑–º–æ–≤–∏
       * @returns {Array<Object>}
       */
  getConversationHistory() {
    return [...this.state.conversationHistory];
  }

  /**
       * –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –ø–æ—Ç–æ—á–Ω–æ—ó —Ä–æ–∑–º–æ–≤–∏ (–º—Å)
       * @returns {number|null}
       */
  getConversationDuration() {
    if (!this.state.conversationStartTime) return null;
    return Date.now() - this.state.conversationStartTime;
  }

  // ==================== STATE TRANSITIONS ====================

  /**
       * –ü–µ—Ä–µ—Ö—ñ–¥ –≤ —Ä–µ–∂–∏–º Quick-Send
       */
  enterQuickSendMode() {
    const oldMode = this.state.currentMode;
    this.state.currentMode = ConversationModes.QUICK_SEND;
    this.state.transcriptionPending = true;

    logger.info(`üîÑ Mode transition: ${oldMode} ‚Üí QUICK_SEND`);
    this.notifyStateChange('modeChanged', { oldMode, newMode: ConversationModes.QUICK_SEND });
  }

  /**
       * –ü–µ—Ä–µ—Ö—ñ–¥ –≤ Conversation Mode
       */
  enterConversationMode() {
    const oldMode = this.state.currentMode;
    this.state.currentMode = ConversationModes.CONVERSATION;
    this.state.isInConversation = true;
    this.state.conversationActive = true;
    this.state.conversationStartTime = Date.now();

    logger.info(`üîÑ Mode transition: ${oldMode} ‚Üí CONVERSATION`, {
      startTime: new Date(this.state.conversationStartTime).toISOString()
    });

    this.notifyStateChange('modeChanged', {
      oldMode,
      newMode: ConversationModes.CONVERSATION,
      startTime: this.state.conversationStartTime
    });
  }

  /**
       * –í–∏—Ö—ñ–¥ –∑ Conversation Mode
       */
  exitConversationMode() {
    const duration = this.getConversationDuration();
    const historySize = this.state.conversationHistory.length;

    this.state.currentMode = ConversationModes.IDLE;
    this.state.isInConversation = false;
    this.state.conversationActive = false;
    this.state.waitingForUserResponse = false;
    this.state.transcriptionPending = false;
    this.state.conversationStartTime = null;

    logger.info('üîÑ Exiting CONVERSATION mode', {
      duration: duration ? `${(duration / 1000).toFixed(1)}s` : 'N/A',
      historySize
    });

    this.notifyStateChange('conversationEnded', { duration, historySize });
  }

  /**
       * –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ —Ä–µ–∂–∏–º Idle
       */
  returnToIdle() {
    const oldMode = this.state.currentMode;

    this.state.currentMode = ConversationModes.IDLE;
    this.state.isInConversation = false;
    this.state.conversationActive = false;
    this.state.waitingForUserResponse = false;
    this.state.transcriptionPending = false;

    if (oldMode !== ConversationModes.IDLE) {
      logger.info(`üîÑ Mode transition: ${oldMode} ‚Üí IDLE`);
      this.notifyStateChange('modeChanged', { oldMode, newMode: ConversationModes.IDLE });
    }
  }

  // ==================== STATE FLAGS ====================

  /**
       * –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ñ–ª–∞–≥ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
       * @param {boolean} waiting
       */
  setWaitingForUserResponse(waiting) {
    const oldValue = this.state.waitingForUserResponse;
    this.state.waitingForUserResponse = waiting;

    if (oldValue !== waiting) {
      logger.debug(`‚è≥ Waiting for user response: ${waiting}`);
      this.notifyStateChange('waitingChanged', { waiting });
    }
  }

  /**
       * –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ñ–ª–∞–≥ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó
       * @param {boolean} pending
       */
  setTranscriptionPending(pending) {
    const oldValue = this.state.transcriptionPending;
    this.state.transcriptionPending = pending;

    if (oldValue !== pending) {
      logger.debug(`üìù Transcription pending: ${pending}`);
      this.notifyStateChange('transcriptionPendingChanged', { pending });
    }
  }

  /**
       * –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ conversation active flag
       * @param {boolean} active
       */
  setConversationActive(active) {
    const oldValue = this.state.conversationActive;
    this.state.conversationActive = active;

    if (oldValue !== active) {
      logger.debug(`üí¨ Conversation active: ${active}`);
      this.notifyStateChange('conversationActiveChanged', { active });
    }
  }

  // ==================== HISTORY MANAGEMENT ====================

  /**
       * –î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å –≤ —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑–º–æ–≤–∏
       * @param {Object} entry - –ó–∞–ø–∏—Å —ñ—Å—Ç–æ—Ä—ñ—ó
       * @param {string} entry.type - –¢–∏–ø (user/assistant/system)
       * @param {string} entry.text - –¢–µ–∫—Å—Ç
       * @param {number} [entry.timestamp] - –ß–∞—Å (–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —è–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ)
       */
  addToHistory(entry) {
    const record = {
      timestamp: entry.timestamp || Date.now(),
      type: entry.type,
      text: entry.text,
      confidence: entry.confidence,
      metadata: entry.metadata || {}
    };

    this.state.conversationHistory.push(record);

    // –û–±–º–µ–∂–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É —ñ—Å—Ç–æ—Ä—ñ—ó
    if (this.state.conversationHistory.length > this.config.maxHistorySize) {
      const removed = this.state.conversationHistory.shift();
      logger.debug('üìö History trimmed, removed oldest entry:', removed.type);
    }

    logger.debug(`üìù Added to history: ${entry.type} (total: ${this.state.conversationHistory.length})`);
    this.notifyStateChange('historyUpdated', { entry: record });
  }

  /**
       * –û—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑–º–æ–≤–∏
       */
  clearHistory() {
    const oldSize = this.state.conversationHistory.length;
    this.state.conversationHistory = [];

    logger.info(`üóëÔ∏è History cleared (${oldSize} entries removed)`);
    this.notifyStateChange('historyCleared', { oldSize });
  }

  /**
       * –û—Ç—Ä–∏–º–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ N –∑–∞–ø–∏—Å—ñ–≤ —ñ—Å—Ç–æ—Ä—ñ—ó
       * @param {number} count - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤
       * @returns {Array<Object>}
       */
  getRecentHistory(count = 5) {
    return this.state.conversationHistory.slice(-count);
  }

  // ==================== VALIDATION ====================

  /**
       * –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –Ω–µ –≤–∏–π—à–æ–≤ —Ç–∞–π–º–∞—É—Ç —Ä–æ–∑–º–æ–≤–∏
       * @returns {boolean} true —è–∫—â–æ —Ç–∞–π–º–∞—É—Ç –≤–∏–π—à–æ–≤
       */
  isConversationTimedOut() {
    const duration = this.getConversationDuration();
    if (!duration) return false;

    const timedOut = duration > this.config.conversationTimeout;
    if (timedOut) {
      logger.warn(`‚è±Ô∏è Conversation timeout exceeded: ${(duration / 1000).toFixed(1)}s`);
    }

    return timedOut;
  }

  /**
       * –ß–∏ –º–æ–∂–Ω–∞ –ø–æ—á–∞—Ç–∏ –Ω–æ–≤—É —Ä–æ–∑–º–æ–≤—É
       * @returns {boolean}
       */
  canStartConversation() {
    return this.state.currentMode === ConversationModes.IDLE &&
            !this.state.isInConversation &&
            !this.state.conversationActive;
  }

  /**
       * –ß–∏ –º–æ–∂–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ quick-send
       * @returns {boolean}
       */
  canStartQuickSend() {
    return this.state.currentMode === ConversationModes.IDLE &&
            !this.state.isInConversation;
  }

  // ==================== LISTENERS ====================

  /**
       * –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞–Ω—É
       * @param {Function} callback - –§—É–Ω–∫—Ü—ñ—è-–æ–±—Ä–æ–±–Ω–∏–∫ (eventType, data) => void
       */
  onStateChange(callback) {
    this.stateChangeListeners.add(callback);
    return () => this.stateChangeListeners.delete(callback); // Unsubscribe function
  }

  /**
       * –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ listeners –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞–Ω—É
       * @private
       * @param {string} eventType - –¢–∏–ø –ø–æ–¥—ñ—ó
       * @param {Object} data - –î–∞–Ω—ñ –ø–æ–¥—ñ—ó
       */
  notifyStateChange(eventType, data) {
    this.stateChangeListeners.forEach(listener => {
      try {
        listener(eventType, data);
      } catch (error) {
        logger.error('Error in state change listener:', error);
      }
    });
  }

  // ==================== DEBUGGING ====================

  /**
       * –û—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞–Ω –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
       * @returns {Object}
       */
  getDebugInfo() {
    return {
      mode: this.state.currentMode,
      flags: {
        inConversation: this.state.isInConversation,
        conversationActive: this.state.conversationActive,
        waitingForUser: this.state.waitingForUserResponse,
        transcriptionPending: this.state.transcriptionPending
      },
      conversation: {
        startTime: this.state.conversationStartTime,
        duration: this.getConversationDuration(),
        historySize: this.state.conversationHistory.length
      },
      validation: {
        timedOut: this.isConversationTimedOut(),
        canStartConversation: this.canStartConversation(),
        canStartQuickSend: this.canStartQuickSend()
      }
    };
  }

  /**
       * –°–∫–∏–Ω—É—Ç–∏ –≤–µ—Å—å —Å—Ç–∞–Ω (–¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)
       */
  reset() {
    this.state = {
      currentMode: ConversationModes.IDLE,
      isInConversation: false,
      conversationActive: false,
      waitingForUserResponse: false,
      transcriptionPending: false,
      conversationStartTime: null,
      conversationHistory: []
    };

    logger.warn('üîÑ State reset to defaults');
    this.notifyStateChange('reset', {});
  }
}

/**
 * Helper: —Å—Ç–≤–æ—Ä–∏—Ç–∏ state manager –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é
 * @param {Object} config - –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
 * @returns {ConversationStateManager}
 */
export function createStateManager(config = {}) {
  return new ConversationStateManager(config);
}
