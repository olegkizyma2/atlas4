/**
 * Conversation Mode Handler - v4.0
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä—ñ–∑–Ω–∏–º–∏ —Ä–µ–∂–∏–º–∞–º–∏ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è
 */

import { createLogger } from '../../core/logger.js';
import { eventManager, Events } from '../../events/event-manager.js';

export class ModeHandler {
  constructor(config = {}) {
    this.logger = createLogger('MODE-HANDLER');
    this.config = config;

    // –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
    this.currentMode = 'idle';
    this.isInConversation = false;
    this.conversationActive = false;
    this.waitingForUserResponse = false;

    // –Ü—Å—Ç–æ—Ä—ñ—è —Ä–æ–∑–º–æ–≤–∏
    this.conversationHistory = [];

    // –¢–∞–π–º–µ—Ä–∏
    this.conversationTimer = null;
    this.responseWaitTimer = null;
  }

  /**
     * –ê–∫—Ç–∏–≤–∞—Ü—ñ—è Quick-send —Ä–µ–∂–∏–º—É
     */
  async activateQuickSendMode() {
    if (this.isInConversation) {
      this.logger.warn('Cannot activate quick-send during conversation');
      return false;
    }

    this.currentMode = 'quick-send';
    this.logger.info('üé§ Quick-send mode activated');

    // –ï–º—ñ—Å—ñ—è –ø–æ–¥—ñ—ó –¥–ª—è –ø–æ—á–∞—Ç–∫—É –∑–∞–ø–∏—Å—É
    eventManager.emit('CONVERSATION_MODE_QUICK_SEND_START', {
      mode: 'quick-send',
      timestamp: Date.now()
    });

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –∑—É–ø–∏–Ω–∫–∞ —á–µ—Ä–µ–∑ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —á–∞—Å
    setTimeout(() => {
      if (this.currentMode === 'quick-send') {
        this.logger.info('Quick-send timeout reached');
        this.deactivateQuickSendMode();
      }
    }, this.config.quickSendMaxDuration);

    return true;
  }

  /**
     * –î–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—è Quick-send —Ä–µ–∂–∏–º—É
     */
  deactivateQuickSendMode() {
    if (this.currentMode !== 'quick-send') return;

    this.logger.info('üì§ Quick-send mode deactivated');
    this.currentMode = 'idle';

    // –ï–º—ñ—Å—ñ—è –ø–æ–¥—ñ—ó –¥–ª—è –∑—É–ø–∏–Ω–∫–∏ –∑–∞–ø–∏—Å—É
    eventManager.emit('CONVERSATION_MODE_QUICK_SEND_END', {
      mode: 'idle',
      timestamp: Date.now()
    });
  }

  /**
     * –ê–∫—Ç–∏–≤–∞—Ü—ñ—è Conversation —Ä–µ–∂–∏–º—É
     */
  async activateConversationMode() {
    this.currentMode = 'conversation';
    this.isInConversation = true;
    this.conversationActive = true;

    this.logger.info('üí¨ Conversation mode activated');

    // –ï–º—ñ—Å—ñ—è –ø–æ–¥—ñ—ó
    eventManager.emit('CONVERSATION_MODE_ACTIVATED', {
      mode: 'conversation',
      timestamp: Date.now()
    });

    // –ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    this.startListeningForKeyword();

    // –¢–∞–π–º–∞—É—Ç —Ä–æ–∑–º–æ–≤–∏
    this.startConversationTimer();

    return true;
  }

  /**
     * –î–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—è Conversation —Ä–µ–∂–∏–º—É
     */
  deactivateConversationMode() {
    if (!this.isInConversation) return;

    this.logger.info('üí¨ Conversation mode deactivated');

    this.currentMode = 'idle';
    this.isInConversation = false;
    this.conversationActive = false;
    this.waitingForUserResponse = false;

    // –û—á–∏—â–µ–Ω–Ω—è —Ç–∞–π–º–µ—Ä—ñ–≤
    this.clearAllTimers();

    // –ï–º—ñ—Å—ñ—è –ø–æ–¥—ñ—ó
    eventManager.emit('CONVERSATION_MODE_DEACTIVATED', {
      mode: 'idle',
      timestamp: Date.now(),
      conversationDuration: this.getConversationDuration()
    });

    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó
    this.saveConversationHistory();
  }

  /**
     * –ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
     */
  startListeningForKeyword() {
    this.logger.debug('Started listening for keyword in conversation mode');

    eventManager.emit('START_KEYWORD_DETECTION', {
      keywords: [this.config.keywordForActivation],
      mode: 'conversation'
    });
  }

  /**
     * –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ —Ä–æ–∑–º–æ–≤–∏
     */
  startConversationTimer() {
    this.conversationTimer = setTimeout(() => {
      this.logger.info('Conversation timeout reached');
      this.deactivateConversationMode();
    }, this.config.conversationTimeout);
  }

  /**
     * –û–±—Ä–æ–±–∫–∞ –≤–∏—è–≤–ª–µ–Ω–Ω—è –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
     */
  handleKeywordDetected(payload) {
    if (!this.isInConversation || !this.conversationActive) {
      return;
    }

    const keyword = payload.keyword;
    this.logger.info(`üéØ Keyword detected in conversation: ${keyword}`);

    // –ü–æ—á–∞—Ç–æ–∫ –∑–∞–ø–∏—Å—É –ø—ñ—Å–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    this.startConversationRecording();

    // –ï–º—ñ—Å—ñ—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ—ó –ø–æ–¥—ñ—ó –¥–ª—è conversation keyword
    eventManager.emit('CONVERSATION_KEYWORD_ACTIVATE', {
      keyword,
      mode: 'conversation',
      timestamp: Date.now()
    });
  }

  /**
     * –ü–æ—á–∞—Ç–æ–∫ –∑–∞–ø–∏—Å—É –≤ conversation —Ä–µ–∂–∏–º—ñ
     */
  startConversationRecording() {
    this.logger.info('üé§ Starting conversation recording');

    this.waitingForUserResponse = false;

    eventManager.emit('CONVERSATION_RECORDING_START', {
      mode: 'conversation',
      timestamp: Date.now()
    });
  }

  /**
     * –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó
     */
  handleTranscriptionComplete(payload) {
    const text = payload?.text?.trim();

    if (!text) {
      this.logger.debug('Empty transcription result');
      return;
    }

    if (this.currentMode === 'quick-send') {
      this.handleQuickSendResult(text, payload);
    } else if (this.currentMode === 'conversation') {
      this.handleConversationResult(text, payload);
    }
  }

  /**
     * –û–±—Ä–æ–±–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É Quick-send
     */
  handleQuickSendResult(text, payload) {
    this.logger.info(`üì§ Quick-send result: "${text}"`);

    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç
    eventManager.emit('SEND_CHAT_MESSAGE', {
      text,
      mode: 'quick-send',
      confidence: payload.confidence,
      timestamp: Date.now()
    });

    // –î–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—è —Ä–µ–∂–∏–º—É
    this.deactivateQuickSendMode();
  }

  /**
     * –û–±—Ä–æ–±–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É Conversation
     */
  handleConversationResult(text, payload) {
    this.logger.info(`üí¨ Conversation result: "${text}"`);

    // –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó
    this.conversationHistory.push({
      type: 'user',
      text,
      timestamp: Date.now(),
      confidence: payload.confidence
    });

    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç
    eventManager.emit('SEND_CHAT_MESSAGE', {
      text,
      mode: 'conversation',
      conversationMode: true,
      confidence: payload.confidence,
      timestamp: Date.now()
    });

    // –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å–∏—Å—Ç–µ–º–∏
    this.startWaitingForResponse();
  }

  /**
     * –ü–æ—á–∞—Ç–æ–∫ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å–∏—Å—Ç–µ–º–∏
     */
  startWaitingForResponse() {
    this.waitingForUserResponse = true;
    this.logger.debug('Waiting for system response in conversation mode');

    // –¢–∞–π–º–∞—É—Ç –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    this.responseWaitTimer = setTimeout(() => {
      this.logger.warn('Response wait timeout in conversation mode');
      this.waitingForUserResponse = false;
    }, 30000); // 30 —Å–µ–∫—É–Ω–¥ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
  }

  /**
     * –û–±—Ä–æ–±–∫–∞ –ø–æ—á–∞—Ç–∫—É TTS
     */
  handleTTSStarted(event) {
    if (this.isInConversation) {
      this.logger.debug('TTS started during conversation');

      // –î–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó
      this.conversationHistory.push({
        type: 'system',
        text: event.text,
        agent: event.agent,
        timestamp: Date.now()
      });
    }
  }

  /**
     * –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è TTS
     */
  handleTTSCompleted(event) {
    if (this.isInConversation && this.waitingForUserResponse) {
      this.logger.debug('TTS completed, ready for next user input');

      // –û—á–∏—â–µ–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
      if (this.responseWaitTimer) {
        clearTimeout(this.responseWaitTimer);
        this.responseWaitTimer = null;
      }

      this.waitingForUserResponse = false;

      // –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
      this.startListeningForKeyword();
    }
  }

  /**
     * –û—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ç–∞–π–º–µ—Ä—ñ–≤
     */
  clearAllTimers() {
    if (this.conversationTimer) {
      clearTimeout(this.conversationTimer);
      this.conversationTimer = null;
    }

    if (this.responseWaitTimer) {
      clearTimeout(this.responseWaitTimer);
      this.responseWaitTimer = null;
    }
  }

  /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ —Ä–æ–∑–º–æ–≤–∏
     */
  getConversationDuration() {
    if (this.conversationHistory.length === 0) return 0;

    const firstMessage = this.conversationHistory[0];
    const lastMessage = this.conversationHistory[this.conversationHistory.length - 1];

    return lastMessage.timestamp - firstMessage.timestamp;
  }

  /**
     * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑–º–æ–≤–∏
     */
  saveConversationHistory() {
    if (this.conversationHistory.length === 0) return;

    const conversationData = {
      startTime: this.conversationHistory[0].timestamp,
      endTime: Date.now(),
      duration: this.getConversationDuration(),
      messages: [...this.conversationHistory]
    };

    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ localStorage
    const conversations = JSON.parse(localStorage.getItem('atlas_conversations') || '[]');
    conversations.push(conversationData);

    // –û–±–º–µ–∂–µ–Ω–Ω—è –¥–æ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 10 —Ä–æ–∑–º–æ–≤
    if (conversations.length > 10) {
      conversations.splice(0, conversations.length - 10);
    }

    localStorage.setItem('atlas_conversations', JSON.stringify(conversations));

    this.logger.info(`Conversation saved: ${this.conversationHistory.length} messages, ${Math.round(conversationData.duration / 1000)}s duration`);

    // –û—á–∏—â–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó —ñ—Å—Ç–æ—Ä—ñ—ó
    this.conversationHistory = [];
  }

  /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
     */
  getCurrentMode() {
    return this.currentMode;
  }

  /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∞–∫—Ç–∏–≤–Ω–∏–π conversation —Ä–µ–∂–∏–º
     */
  isConversationActive() {
    return this.isInConversation && this.conversationActive;
  }

  /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑–º–æ–≤–∏
     */
  getConversationHistory() {
    return [...this.conversationHistory];
  }

  /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–µ–∂–∏–º—ñ–≤
     */
  getModeStatistics() {
    const conversations = JSON.parse(localStorage.getItem('atlas_conversations') || '[]');

    return {
      currentMode: this.currentMode,
      isInConversation: this.isInConversation,
      currentConversationLength: this.conversationHistory.length,
      totalConversations: conversations.length,
      averageConversationDuration: conversations.length > 0
        ? conversations.reduce((sum, conv) => sum + conv.duration, 0) / conversations.length / 1000
        : 0
    };
  }
}
