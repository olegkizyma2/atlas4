/**
 * Conversation Button Controller - v4.0
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –æ–±—Ä–æ–±–∫—É –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –∫–Ω–æ–ø–∫–æ—é –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞
 */

import { createLogger } from '../../core/logger.js';

export class ButtonController {
  constructor(config = {}, uiManager) {
    this.logger = createLogger('BUTTON-CONTROLLER');
    this.config = config;
    this.uiManager = uiManager;

    // DOM –µ–ª–µ–º–µ–Ω—Ç–∏
    this.micButton = null;

    // –°—Ç–∞–Ω –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è
    this.longPressTimer = null;
    this.pressStartTime = null;
    this.isPressed = false;

    // Callbacks
    this.onQuickPress = null;
    this.onLongPress = null;

    // Bind methods
    this.handleButtonMouseDown = this.handleButtonMouseDown.bind(this);
    this.handleButtonMouseUp = this.handleButtonMouseUp.bind(this);
    this.handleButtonTouchStart = this.handleButtonTouchStart.bind(this);
    this.handleButtonTouchEnd = this.handleButtonTouchEnd.bind(this);
    this.handleButtonMouseLeave = this.handleButtonMouseLeave.bind(this);
    this.handleButtonTouchCancel = this.handleButtonTouchCancel.bind(this);
  }

  /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞ –∫–Ω–æ–ø–æ–∫
     */
  async initialize() {
    this.logger.info('Initializing Button Controller...');

    // –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞
    this.micButton = document.getElementById('microphone-btn');
    if (!this.micButton) {
      this.logger.error('Microphone button not found!');
      return false;
    }

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è event listeners
    this.setupEventListeners();

    this.logger.info('‚úÖ Button Controller initialized');
    return true;
  }

  /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è event listeners
     */
  setupEventListeners() {
    // Mouse events
    this.micButton.addEventListener('mousedown', this.handleButtonMouseDown);
    this.micButton.addEventListener('mouseup', this.handleButtonMouseUp);
    this.micButton.addEventListener('mouseleave', this.handleButtonMouseLeave);

    // Touch events
    this.micButton.addEventListener('touchstart', this.handleButtonTouchStart, { passive: true });
    this.micButton.addEventListener('touchend', this.handleButtonTouchEnd);
    this.micButton.addEventListener('touchcancel', this.handleButtonTouchCancel);

    // –ó–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è context menu –Ω–∞ —Ç—Ä–∏–≤–∞–ª–µ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è
    this.micButton.addEventListener('contextmenu', (e) => e.preventDefault());

    this.logger.debug('Event listeners attached to microphone button');
  }

  /**
     * –ü–æ—á–∞—Ç–æ–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ (mouse)
     */
  handleButtonMouseDown(event) {
    event.preventDefault();
    this.startPress();
  }

  /**
     * –ö—ñ–Ω–µ—Ü—å –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ (mouse)
     */
  handleButtonMouseUp(event) {
    if (event) event.preventDefault();
    this.endPress();
  }

  /**
     * –ü–æ–∫–∏–¥–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –º–∏—à–∫–æ—é
     */
  handleButtonMouseLeave(event) {
    if (this.isPressed) {
      this.endPress();
    }
  }

  /**
     * –ü–æ—á–∞—Ç–æ–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ (touch)
     */
  handleButtonTouchStart(event) {
    // –ó–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è —Ç–∞–∫–æ–∂ mouse events
    event.preventDefault();
    this.startPress();
  }

  /**
     * –ö—ñ–Ω–µ—Ü—å –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ (touch)
     */
  handleButtonTouchEnd(event) {
    if (event) event.preventDefault();
    this.endPress();
  }

  /**
     * –°–∫–∞—Å—É–≤–∞–Ω–Ω—è touch
     */
  handleButtonTouchCancel(event) {
    if (event) event.preventDefault();
    this.endPress();
  }

  /**
     * –ü–æ—á–∞—Ç–æ–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è
     */
  startPress() {
    if (this.isPressed) return;

    this.isPressed = true;
    this.pressStartTime = Date.now();

    this.logger.debug('Button press started');

    // –í—ñ–∑—É–∞–ª—å–Ω–∏–π feedback
    this.uiManager?.showPressState();

    // –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è —Ç—Ä–∏–≤–∞–ª–æ–≥–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è
    this.longPressTimer = setTimeout(() => {
      this.logger.info('üéôÔ∏è Long press detected');
      this.triggerLongPress();
    }, this.config.longPressDuration);
  }

  /**
     * –ö—ñ–Ω–µ—Ü—å –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è
     */
  endPress() {
    if (!this.isPressed) return;

    const pressDuration = Date.now() - (this.pressStartTime || Date.now());
    this.isPressed = false;

    this.logger.debug(`Button press ended, duration: ${pressDuration}ms`);

    // –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ feedback
    this.uiManager?.hidePressState();

    // –Ø–∫—â–æ —Ç–∞–π–º–µ—Ä —â–µ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤ - —Ü–µ –∫–æ—Ä–æ—Ç–∫–∏–π –∫–ª—ñ–∫
    if (this.longPressTimer) {
      clearTimeout(this.longPressTimer);
      this.longPressTimer = null;

      if (pressDuration < this.config.longPressDuration) {
        this.logger.info('üì§ Quick press detected');
        this.triggerQuickPress();
      }
    }
    // –Ü–Ω–∞–∫—à–µ –¥–æ–≤–≥–∏–π –∫–ª—ñ–∫ –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π
  }

  /**
     * –¢—Ä–∏–≥–µ—Ä –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è
     */
  triggerQuickPress() {
    if (this.onQuickPress) {
      this.onQuickPress();
    }
  }

  /**
     * –¢—Ä–∏–≥–µ—Ä —Ç—Ä–∏–≤–∞–ª–æ–≥–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è
     */
  triggerLongPress() {
    // –û—á–∏—â–µ–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞
    if (this.longPressTimer) {
      clearTimeout(this.longPressTimer);
      this.longPressTimer = null;
    }

    if (this.onLongPress) {
      this.onLongPress();
    }
  }

  /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è callback –¥–ª—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è
     */
  setQuickPressCallback(callback) {
    this.onQuickPress = callback;
  }

  /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è callback –¥–ª—è —Ç—Ä–∏–≤–∞–ª–æ–≥–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è
     */
  setLongPressCallback(callback) {
    this.onLongPress = callback;
  }

  /**
     * –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏
     */
  disable() {
    if (this.micButton) {
      this.micButton.disabled = true;
      this.micButton.style.opacity = '0.5';
    }
  }

  /**
     * –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏
     */
  enable() {
    if (this.micButton) {
      this.micButton.disabled = false;
      this.micButton.style.opacity = '1';
    }
  }

  /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–Ω–æ–ø–∫–∞ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞
     */
  isButtonPressed() {
    return this.isPressed;
  }

  /**
     * –ü—Ä–∏–º—É—Å–æ–≤–µ —Å–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É
     */
  reset() {
    if (this.longPressTimer) {
      clearTimeout(this.longPressTimer);
      this.longPressTimer = null;
    }

    this.isPressed = false;
    this.pressStartTime = null;

    this.uiManager?.hidePressState();
  }

  /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–Ω–æ–ø–∫–∏
     */
  getStatistics() {
    return {
      isPressed: this.isPressed,
      pressDuration: this.pressStartTime ? Date.now() - this.pressStartTime : 0,
      hasLongPressTimer: !!this.longPressTimer,
      isEnabled: this.micButton ? !this.micButton.disabled : false
    };
  }

  /**
     * –û—á–∏—â–µ–Ω–Ω—è
     */
  cleanup() {
    this.reset();
  }

  /**
     * –ó–Ω–∏—â–µ–Ω–Ω—è –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞
     */
  destroy() {
    this.cleanup();

    // –í–∏–¥–∞–ª–µ–Ω–Ω—è event listeners
    if (this.micButton) {
      this.micButton.removeEventListener('mousedown', this.handleButtonMouseDown);
      this.micButton.removeEventListener('mouseup', this.handleButtonMouseUp);
      this.micButton.removeEventListener('mouseleave', this.handleButtonMouseLeave);
      this.micButton.removeEventListener('touchstart', this.handleButtonTouchStart);
      this.micButton.removeEventListener('touchend', this.handleButtonTouchEnd);
      this.micButton.removeEventListener('touchcancel', this.handleButtonTouchCancel);
    }

    this.micButton = null;
    this.onQuickPress = null;
    this.onLongPress = null;
  }
}
