/**
 * Conversation UI Manager - v4.0
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –≤—ñ–∑—É–∞–ª—å–Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —Ä–µ–∂–∏–º—ñ–≤ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è
 */

import { createLogger } from '../../core/logger.js';

export class ConversationUIManager {
  constructor(config = {}) {
    this.logger = createLogger('CONVERSATION-UI');
    this.config = config;

    // DOM –µ–ª–µ–º–µ–Ω—Ç–∏
    this.micButton = null;
    this.statusElement = null;
    this.notificationElement = null;

    // –¢–∞–π–º–µ—Ä–∏ –¥–ª—è UI
    this.notificationTimer = null;
  }

  /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
     */
  async initialize() {
    this.logger.info('Initializing Conversation UI Manager...');

    // –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞
    this.micButton = document.getElementById('microphone-btn');
    if (!this.micButton) {
      this.logger.error('Microphone button not found!');
      return false;
    }

    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è UI –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
    this.createStatusIndicator();
    this.createNotificationElement();
    this.injectStyles();

    this.logger.info('‚úÖ Conversation UI Manager initialized');
    return true;
  }

  /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å—É
     */
  createStatusIndicator() {
    this.statusElement = document.createElement('div');
    this.statusElement.id = 'conversation-mode-status';
    this.statusElement.className = 'conversation-mode-status hidden';
    this.statusElement.innerHTML = `
            <div class="status-content">
                <div class="status-icon">üí¨</div>
                <div class="status-text">–†–µ–∂–∏–º —Ä–æ–∑–º–æ–≤–∏</div>
                <div class="status-hint">–ì–æ–≤–æ—Ä—ñ—Ç—å –ø—ñ—Å–ª—è —Å–∏–≥–Ω–∞–ª—É...</div>
            </div>
        `;
    document.body.appendChild(this.statusElement);
  }

  /**
     * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω—å
     */
  createNotificationElement() {
    this.notificationElement = document.createElement('div');
    this.notificationElement.id = 'conversation-notification';
    this.notificationElement.className = 'conversation-notification hidden';
    document.body.appendChild(this.notificationElement);
  }

  /**
     * –í–ø—Ä–æ–≤–∞–¥–∂–µ–Ω–Ω—è —Å—Ç–∏–ª—ñ–≤
     */
  injectStyles() {
    if (document.getElementById('conversation-ui-styles')) return;

    const styles = document.createElement('style');
    styles.id = 'conversation-ui-styles';
    styles.textContent = `
            .conversation-mode-status {
                position: fixed;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                background: rgba(0, 15, 30, 0.95);
                border: 2px solid #00ffff;
                border-radius: 15px;
                padding: 20px;
                z-index: 10000;
                text-align: center;
                color: #00ffff;
                font-family: 'Courier New', monospace;
                box-shadow: 0 0 30px rgba(0, 255, 255, 0.3);
                backdrop-filter: blur(10px);
                transition: all 0.3s ease;
            }
            
            .conversation-mode-status.hidden {
                opacity: 0;
                pointer-events: none;
                transform: translate(-50%, -50%) scale(0.8);
            }
            
            .status-content {
                display: flex;
                flex-direction: column;
                align-items: center;
                gap: 10px;
            }
            
            .status-icon {
                font-size: 2em;
                animation: pulse 1.5s infinite;
            }
            
            .status-text {
                font-size: 1.2em;
                font-weight: bold;
                margin-bottom: 5px;
            }
            
            .status-hint {
                font-size: 0.9em;
                opacity: 0.8;
            }
            
            .conversation-notification {
                position: fixed;
                top: 20px;
                right: 20px;
                background: rgba(0, 15, 30, 0.9);
                border: 1px solid #00ffff;
                border-radius: 8px;
                padding: 15px 20px;
                color: #00ffff;
                font-family: 'Courier New', monospace;
                z-index: 9999;
                max-width: 300px;
                box-shadow: 0 0 20px rgba(0, 255, 255, 0.2);
                transition: all 0.3s ease;
            }
            
            .conversation-notification.hidden {
                opacity: 0;
                transform: translateX(100%);
                pointer-events: none;
            }
            
            .conversation-notification.quick-send {
                border-color: #ffaa00;
                color: #ffaa00;
                box-shadow: 0 0 20px rgba(255, 170, 0, 0.2);
            }
            
            .conversation-notification.conversation {
                border-color: #00ff7f;
                color: #00ff7f;
                box-shadow: 0 0 20px rgba(0, 255, 127, 0.2);
            }
            
            .conversation-notification.listening {
                border-color: #ff4444;
                color: #ff4444;
                box-shadow: 0 0 20px rgba(255, 68, 68, 0.2);
            }
            
            #microphone-btn.pressing {
                transform: scale(0.95);
                box-shadow: inset 0 0 10px rgba(0, 255, 255, 0.3);
            }
            
            #microphone-btn.recording {
                animation: recording-pulse 1s infinite;
            }
            
            #microphone-btn.quick-send {
                border-color: #ffaa00;
                box-shadow: 0 0 20px rgba(255, 170, 0, 0.4);
            }
            
            #microphone-btn.conversation-mode {
                border-color: #00ff7f;
                box-shadow: 0 0 25px rgba(0, 255, 127, 0.5);
            }
            
            @keyframes pulse {
                0%, 100% { transform: scale(1); }
                50% { transform: scale(1.1); }
            }
            
            @keyframes recording-pulse {
                0%, 100% { opacity: 1; }
                50% { opacity: 0.6; }
            }
        `;
    document.head.appendChild(styles);
  }

  /**
     * –ü–æ–∫–∞–∑ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Ä–µ–∂–∏–º—É
     */
  showModeNotification(text, type = 'info', duration = 3000) {
    if (!this.notificationElement) return;

    this.notificationElement.textContent = text;
    this.notificationElement.className = `conversation-notification ${type}`;

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è
    if (this.notificationTimer) {
      clearTimeout(this.notificationTimer);
    }

    if (duration > 0) {
      this.notificationTimer = setTimeout(() => {
        this.hideModeNotification();
      }, duration);
    }
  }

  /**
     * –ü—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
     */
  hideModeNotification() {
    if (this.notificationElement) {
      this.notificationElement.classList.add('hidden');
    }

    if (this.notificationTimer) {
      clearTimeout(this.notificationTimer);
      this.notificationTimer = null;
    }
  }

  /**
     * –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å—É conversation —Ä–µ–∂–∏–º—É
     */
  showConversationStatus(text, hint = '–ì–æ–≤–æ—Ä—ñ—Ç—å –ø—ñ—Å–ª—è —Å–∏–≥–Ω–∞–ª—É...') {
    if (!this.statusElement) return;

    const statusText = this.statusElement.querySelector('.status-text');
    const statusHint = this.statusElement.querySelector('.status-hint');

    if (statusText) statusText.textContent = text;
    if (statusHint) statusHint.textContent = hint;

    this.statusElement.classList.remove('hidden');
  }

  /**
     * –ü—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É conversation —Ä–µ–∂–∏–º—É
     */
  hideConversationStatus() {
    if (this.statusElement) {
      this.statusElement.classList.add('hidden');
    }
  }

  /**
     * –ü–æ–∫–∞–∑ —Å—Ç–∞–Ω—É –∑–∞–ø–∏—Å—É
     */
  showRecordingState(mode = 'recording') {
    if (!this.micButton) return;

    this.micButton.classList.add('recording');

    if (mode === 'quick-send') {
      this.micButton.classList.add('quick-send');
      this.showModeNotification('–ó–∞–ø–∏—Å...', 'quick-send', 0);
    } else if (mode === 'conversation') {
      this.showModeNotification('–°–ª—É—Ö–∞—é...', 'listening', 0);
    }
  }

  /**
     * –ü—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –∑–∞–ø–∏—Å—É
     */
  hideRecordingState() {
    if (!this.micButton) return;

    this.micButton.classList.remove('recording', 'quick-send', 'conversation-mode');
    this.hideModeNotification();
  }

  /**
     * –ü–æ–∫–∞–∑ —Ä–µ–∂–∏–º—É Quick-send
     */
  showQuickSendMode() {
    this.logger.debug('Showing quick-send mode UI');
    if (this.micButton) {
      this.micButton.classList.remove('conversation-mode', 'idle');
      this.micButton.classList.add('active', 'quick-send', 'recording');
      this.micButton.setAttribute('title', 'üî¥ –ó–∞–ø–∏—Å... –ö–ª—ñ–∫ –¥–ª—è –∑—É–ø–∏–Ω–∫–∏');
      // –ó–º—ñ–Ω—é—î–º–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
      const btnText = this.micButton.querySelector('.btn-text');
      if (btnText) btnText.textContent = 'üî¥';
    }
    this.showModeNotification('üé§ –ó–∞–ø–∏—Å...', 'quick-send', 0);
  }

  /**
   * –ü–æ–∫–∞–∑ —Ä–µ–∂–∏–º—É Conversation
   */
  showConversationMode() {
    this.logger.debug('Showing conversation mode UI');
    if (this.micButton) {
      this.micButton.classList.remove('quick-send', 'idle');
      this.micButton.classList.add('active', 'conversation-mode');
      this.micButton.setAttribute('title', 'üîµ –†–µ–∂–∏–º —Ä–æ–∑–º–æ–≤–∏ –∞–∫—Ç–∏–≤–Ω–∏–π. –ö–ª—ñ–∫ –¥–ª—è –≤–∏—Ö–æ–¥—É');
      // –ó–º—ñ–Ω—é—î–º–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
      const btnText = this.micButton.querySelector('.btn-text');
      if (btnText) btnText.textContent = 'üîµ';
    }
    this.showModeNotification('üí¨ –†–µ–∂–∏–º —Ä–æ–∑–º–æ–≤–∏', 'conversation', 5000);
    this.showConversationStatus('–†–µ–∂–∏–º —Ä–æ–∑–º–æ–≤–∏ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!', '–°–∫–∞–∂—ñ—Ç—å "–∞—Ç–ª–∞—Å" –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è');
  }

  /**
   * –ü–æ–∫–∞–∑ —Ä–µ–∂–∏–º—É Idle (–æ—á—ñ–∫—É–≤–∞–Ω–Ω—è)
   */
  showIdleMode() {
    this.logger.debug('Showing idle mode UI');
    if (this.micButton) {
      this.micButton.classList.remove('active', 'quick-send', 'conversation-mode', 'pressing', 'recording');
      this.micButton.classList.add('idle');
      this.micButton.setAttribute('title', '‚ö´ –ö–ª—ñ–∫ ‚Äî –∑–∞–ø–∏—Å. –£—Ç—Ä–∏–º–∞–Ω–Ω—è 2 —Å–µ–∫ ‚Äî —Ä–µ–∂–∏–º —Ä–æ–∑–º–æ–≤–∏');
      // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
      const btnText = this.micButton.querySelector('.btn-text');
      if (btnText) btnText.textContent = 'üé§';
    }
    this.hideConversationStatus();
    this.hideModeNotification();
  }

  /**
     * –ü–æ–∫–∞–∑ —Å—Ç–∞–Ω—É conversation —Ä–µ–∂–∏–º—É
     */
  showConversationModeState() {
    if (!this.micButton) return;

    this.micButton.classList.add('conversation-mode');
    this.showConversationStatus('–†–µ–∂–∏–º —Ä–æ–∑–º–æ–≤–∏ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!');
    this.showModeNotification('–†–µ–∂–∏–º —Ä–æ–∑–º–æ–≤–∏ –∞–∫—Ç–∏–≤–Ω–∏–π', 'conversation', 5000);
  }

  /**
     * –ü—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è —Å—Ç–∞–Ω—É conversation —Ä–µ–∂–∏–º—É
     */
  hideConversationModeState() {
    if (!this.micButton) return;

    this.micButton.classList.remove('conversation-mode');
    this.hideConversationStatus();
    this.showModeNotification('–†–µ–∂–∏–º —Ä–æ–∑–º–æ–≤–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', 'info', 3000);
  }

  /**
     * –ü–æ–∫–∞–∑ —Å—Ç–∞–Ω—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
     */
  showWaitingState() {
    this.showModeNotification('–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ...', 'conversation', 0);
    this.showConversationStatus('–û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É...', '–ó–∞—á–µ–∫–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Å–∏—Å—Ç–µ–º–∏');
  }

  /**
     * –ü–æ–∫–∞–∑ —Å—Ç–∞–Ω—É –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
     */
  showListeningForKeywordState() {
    this.showConversationStatus('–†–µ–∂–∏–º —Ä–æ–∑–º–æ–≤–∏', '–°–∫–∞–∂—ñ—Ç—å "–∞—Ç–ª–∞—Å" –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è');
  }

  /**
     * –ü–æ–∫–∞–∑ —Å—Ç–∞–Ω—É –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏
     */
  showButtonPressed() {
    this.logger.debug('Showing button pressed state');
    if (this.micButton) {
      this.micButton.classList.add('pressing');
      // –ü–æ–∫–∞–∑—É—î–º–æ —â–æ —É—Ç—Ä–∏–º—É—î—Ç—å—Å—è –¥–ª—è conversation
      const btnText = this.micButton.querySelector('.btn-text');
      if (btnText) btnText.textContent = '‚è≥';
    }
  }

  /**
     * –ü—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ feedback –¥–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è
     */
  hidePressState() {
    if (this.micButton) {
      this.micButton.classList.remove('pressing');
    }
  }

  /**
     * –ü—Ä–æ–≥—Ä–∞–≤–∞–Ω–Ω—è –∑–≤—É–∫—É –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
     */
  playActivationSound() {
    try {
      // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–≤—É–∫–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É
      const audioContext = new (window.AudioContext || window.webkitAudioContext)();
      const oscillator = audioContext.createOscillator();
      const gainNode = audioContext.createGain();

      oscillator.connect(gainNode);
      gainNode.connect(audioContext.destination);

      oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
      oscillator.frequency.setValueAtTime(1000, audioContext.currentTime + 0.1);

      gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
      gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.2);

      oscillator.start();
      oscillator.stop(audioContext.currentTime + 0.2);
    } catch (error) {
      this.logger.debug('Could not play activation sound', error);
    }
  }

  /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞–Ω—É UI
     */
  getUIState() {
    return {
      statusVisible: this.statusElement && !this.statusElement.classList.contains('hidden'),
      notificationVisible: this.notificationElement && !this.notificationElement.classList.contains('hidden'),
      micButtonClasses: this.micButton ? Array.from(this.micButton.classList) : [],
      hasNotificationTimer: !!this.notificationTimer
    };
  }

  /**
     * –û—á–∏—â–µ–Ω–Ω—è UI
     */
  cleanup() {
    this.hideModeNotification();
    this.hideConversationStatus();
    this.hideRecordingState();

    if (this.notificationTimer) {
      clearTimeout(this.notificationTimer);
      this.notificationTimer = null;
    }
  }

  /**
     * –ó–Ω–∏—â–µ–Ω–Ω—è UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤
     */
  destroy() {
    this.cleanup();

    // –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
    if (this.statusElement && this.statusElement.parentNode) {
      this.statusElement.parentNode.removeChild(this.statusElement);
    }

    if (this.notificationElement && this.notificationElement.parentNode) {
      this.notificationElement.parentNode.removeChild(this.notificationElement);
    }

    // –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∏–ª—ñ–≤
    const styles = document.getElementById('conversation-ui-styles');
    if (styles && styles.parentNode) {
      styles.parentNode.removeChild(styles);
    }

    this.micButton = null;
    this.statusElement = null;
    this.notificationElement = null;
  }
}
