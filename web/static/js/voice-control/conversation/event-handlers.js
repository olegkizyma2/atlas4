/**
 * @fileoverview Event Handlers –¥–ª—è Conversation Mode
 * –û–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ–π –≤—ñ–¥ —Ä—ñ–∑–Ω–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤ —Å–∏—Å—Ç–µ–º–∏
 *
 * @version 4.0.0
 * @date 2025-10-11
 */

import { createLogger } from '../core/logger.js';
import { Events } from '../events/event-manager.js';
import { ConversationEvents } from './constants.js';

const logger = createLogger('CONVERSATION_EVENTS');

/**
 * @typedef {Object} EventHandlerConfig
 * @property {Object} eventManager - Event manager instance
 * @property {Object} stateManager - State manager instance
 * @property {Function} onQuickSend - Callback –¥–ª—è quick-send —Ä–µ–∂–∏–º—É
 * @property {Function} onConversationStart - Callback –¥–ª—è —Å—Ç–∞—Ä—Ç—É —Ä–æ–∑–º–æ–≤–∏
 * @property {Function} onConversationEnd - Callback –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–∑–º–æ–≤–∏
 * @property {Function} onTranscription - Callback –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó
 * @property {Function} onTTSComplete - Callback –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è TTS
 */

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π –¥–ª—è Conversation Mode
 */
export class ConversationEventHandlers {
  /**
     * @param {EventHandlerConfig} config
     */
  constructor(config = {}) {
    this.eventManager = config.eventManager;
    this.stateManager = config.stateManager;

    // Callbacks
    this.callbacks = {
      onQuickSend: config.onQuickSend || (() => { }),
      onConversationStart: config.onConversationStart || (() => { }),
      onConversationEnd: config.onConversationEnd || (() => { }),
      onTranscription: config.onTranscription || (() => { }),
      onTTSComplete: config.onTTSComplete || (() => { }),
      onKeywordDetected: config.onKeywordDetected || (() => { }),
      onError: config.onError || ((error) => logger.error('Event error:', error))
    };

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ unsubscribe —Ñ—É–Ω–∫—Ü—ñ—ó
    this.subscriptions = [];

    logger.info('üîß ConversationEventHandlers initialized');
  }

  // ==================== SUBSCRIPTION ====================

  /**
     * –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–æ–¥—ñ—ó
     */
  subscribeToEvents() {
    if (!this.eventManager) {
      logger.error('‚ùå EventManager not provided, cannot subscribe to events');
      return;
    }

    logger.info('üì° Subscribing to conversation events...');

    // Quick-send mode events
    this.subscribe(
      ConversationEvents.CONVERSATION_MODE_QUICK_SEND_START,
      this.handleQuickSendStart.bind(this)
    );

    // Conversation mode events
    this.subscribe(
      ConversationEvents.CONVERSATION_MODE_ACTIVATED,
      this.handleConversationActivated.bind(this)
    );

    this.subscribe(
      ConversationEvents.CONVERSATION_MODE_DEACTIVATED,
      this.handleConversationDeactivated.bind(this)
    );

    this.subscribe(
      ConversationEvents.CONVERSATION_RECORDING_START,
      this.handleConversationRecordingStart.bind(this)
    );

    // Keyword detection
    this.subscribe(
      ConversationEvents.KEYWORD_DETECTED,
      this.handleKeywordDetected.bind(this)
    );

    // Transcription events
    this.subscribe(
      Events.WHISPER_TRANSCRIPTION_COMPLETED,
      this.handleTranscriptionCompleted.bind(this)
    );

    // TTS events (FIXED: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏)
    this.subscribe(
      Events.TTS_STARTED,  // –±—É–ª–æ TTS_PLAYBACK_STARTED (–ù–ï —ñ—Å–Ω—É—î!)
      this.handleTTSStarted.bind(this)
    );

    this.subscribe(
      Events.TTS_COMPLETED,  // 'tts.completed' - –ö–†–ò–¢–ò–ß–ù–û: —Ç–æ–π —Å–∞–º–∏–π event —â–æ –µ–º—ñ—Ç–∏—Ç—å app-refactored.js!
      this.handleTTSCompleted.bind(this)
    );

    this.subscribe(
      Events.TTS_ERROR,  // –±—É–ª–æ TTS_PLAYBACK_ERROR (–ù–ï —ñ—Å–Ω—É—î!)
      this.handleTTSError.bind(this)
    );

    // Recording events
    this.subscribe(
      Events.RECORDING_STARTED,
      this.handleRecordingStarted.bind(this)
    );

    this.subscribe(
      Events.RECORDING_STOPPED,
      this.handleRecordingStopped.bind(this)
    );

    logger.info(`‚úÖ Subscribed to ${this.subscriptions.length} events`);
  }

  /**
     * –í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –≤—ñ–¥ –≤—Å—ñ—Ö –ø–æ–¥—ñ–π
     */
  unsubscribeFromEvents() {
    logger.info(`üì° Unsubscribing from ${this.subscriptions.length} events...`);

    this.subscriptions.forEach(unsubscribe => {
      try {
        unsubscribe();
      } catch (error) {
        logger.error('Error unsubscribing:', error);
      }
    });

    this.subscriptions = [];
    logger.info('‚úÖ Unsubscribed from all events');
  }

  /**
     * Helper –¥–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏ –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º unsubscribe
     * @private
     */
  subscribe(eventName, handler) {
    try {
      const unsubscribe = this.eventManager.on(eventName, handler);
      this.subscriptions.push(unsubscribe);
      logger.debug(`üìå Subscribed to: ${eventName}`);
    } catch (error) {
      logger.error(`Failed to subscribe to ${eventName}:`, error);
    }
  }

  // ==================== EVENT HANDLERS ====================

  /**
     * –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞—Ä—Ç—É Quick-Send —Ä–µ–∂–∏–º—É
     */
  handleQuickSendStart(payload) {
    logger.info('üöÄ Quick-Send mode started', payload);

    try {
      this.callbacks.onQuickSend(payload);
    } catch (error) {
      this.callbacks.onError(error);
    }
  }

  /**
     * –û–±—Ä–æ–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó Conversation mode
     */
  handleConversationActivated(payload) {
    logger.info('üéôÔ∏è Conversation mode activated', payload);

    try {
      this.callbacks.onConversationStart(payload);
    } catch (error) {
      this.callbacks.onError(error);
    }
  }

  /**
     * –û–±—Ä–æ–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—ó Conversation mode
     */
  handleConversationDeactivated(payload) {
    logger.info('üõë Conversation mode deactivated', payload);

    try {
      this.callbacks.onConversationEnd(payload);
    } catch (error) {
      this.callbacks.onError(error);
    }
  }

  /**
     * –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞—Ä—Ç—É –∑–∞–ø–∏—Å—É –≤ Conversation mode
     */
  handleConversationRecordingStart(payload) {
    logger.debug('üî¥ Conversation recording started', payload);

    // –û–Ω–æ–≤–ª—é—î–º–æ state —á–µ—Ä–µ–∑ callback
    try {
      if (this.stateManager) {
        this.stateManager.setWaitingForUserResponse(true);
      }
    } catch (error) {
      this.callbacks.onError(error);
    }
  }

  /**
     * –û–±—Ä–æ–±–∫–∞ –¥–µ—Ç–µ–∫—Ü—ñ—ó –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
     */
  handleKeywordDetected(payload) {
    logger.info('üîë Keyword detected:', payload?.keyword || 'N/A');

    try {
      this.callbacks.onKeywordDetected(payload);
    } catch (error) {
      this.callbacks.onError(error);
    }
  }

  /**
     * –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó
     */
  handleTranscriptionCompleted(payload) {
    logger.debug('üìù Transcription completed:', {
      hasText: !!payload?.text,
      hasResult: !!payload?.result,
      confidence: payload?.confidence || payload?.result?.confidence || 'N/A'
    });

    try {
      // –í–∏—Ç—è–≥—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ —Ä—ñ–∑–Ω–∏—Ö –º–æ–∂–ª–∏–≤–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä
      const text = payload?.result?.text || payload?.text;
      const confidence = payload?.result?.confidence || payload?.confidence || 1.0;

      if (!text) {
        logger.warn('‚ö†Ô∏è Transcription completed but no text found');
        return;
      }

      // –û–Ω–æ–≤–ª—é—î–º–æ state
      if (this.stateManager) {
        this.stateManager.setTranscriptionPending(false);
        this.stateManager.addToHistory({
          type: 'user',
          text,
          confidence,
          timestamp: Date.now()
        });
      }

      // –í–∏–∫–ª–∏–∫–∞—î–º–æ callback –∑ –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
      this.callbacks.onTranscription({
        text,
        confidence,
        originalPayload: payload
      });
    } catch (error) {
      this.callbacks.onError(error);
    }
  }

  /**
     * –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞—Ä—Ç—É TTS
     */
  handleTTSStarted(payload) {
    logger.debug('üîä TTS playback started:', {
      hasText: !!payload?.text,
      length: payload?.text?.length || 0
    });

    try {
      if (this.stateManager && payload?.text) {
        this.stateManager.addToHistory({
          type: 'assistant',
          text: payload.text,
          timestamp: Date.now()
        });
      }
    } catch (error) {
      this.callbacks.onError(error);
    }
  }

  /**
     * –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è TTS
     */
  handleTTSCompleted(payload) {
    logger.info('‚úÖ TTS playback completed', {
      mode: this.stateManager?.getCurrentMode() || 'unknown',
      isInConversation: this.stateManager?.isInConversation() || false,
      payloadKeys: payload ? Object.keys(payload) : [],
      payload
    });

    try {
      // FIXED (12.10.2025 - 17:15): –ü–µ—Ä–µ–¥–∞—î–º–æ –≤–µ—Å—å payload –≤ callback
      this.callbacks.onTTSComplete(payload);
    } catch (error) {
      logger.error('Error in TTS complete callback:', error);
      this.callbacks.onError(error);
    }
  }

  /**
     * –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–∫–∏ TTS
     */
  handleTTSError(payload) {
    logger.error('‚ùå TTS playback error:', payload);

    try {
      // –ü—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ TTS –º–æ–∂–ª–∏–≤–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ keyword mode
      this.callbacks.onError(new Error('TTS playback failed'));
    } catch (error) {
      logger.error('Error in TTS error handler:', error);
    }
  }

  /**
     * –û–±—Ä–æ–±–∫–∞ —Å—Ç–∞—Ä—Ç—É –∑–∞–ø–∏—Å—É
     */
  handleRecordingStarted(payload) {
    logger.debug('üî¥ Recording started', payload);

    try {
      if (this.stateManager) {
        this.stateManager.setTranscriptionPending(true);
      }
    } catch (error) {
      this.callbacks.onError(error);
    }
  }

  /**
     * –û–±—Ä–æ–±–∫–∞ –∑—É–ø–∏–Ω–∫–∏ –∑–∞–ø–∏—Å—É
     */
  handleRecordingStopped(payload) {
    logger.debug('‚èπÔ∏è Recording stopped', payload);

    // State –±—É–¥–µ –æ–Ω–æ–≤–ª–µ–Ω–æ –≤ handleTranscriptionCompleted
  }

  // ==================== EMIT HELPERS ====================

  /**
     * Emit –ø–æ–¥—ñ—ó –≤ —Å–∏—Å—Ç–µ–º—É
     */
  emit(eventName, payload = {}) {
    if (!this.eventManager) {
      logger.warn(`Cannot emit ${eventName}: EventManager not available`);
      return;
    }

    try {
      this.eventManager.emit(eventName, payload);
      logger.debug(`üì§ Emitted: ${eventName}`, payload);
    } catch (error) {
      logger.error(`Failed to emit ${eventName}:`, error);
      this.callbacks.onError(error);
    }
  }

  /**
     * Emit —Å—Ç–∞—Ä—Ç Quick-Send —Ä–µ–∂–∏–º—É
     */
  emitQuickSendStart() {
    this.emit(ConversationEvents.CONVERSATION_MODE_QUICK_SEND_START, {
      timestamp: Date.now()
    });
  }

  /**
     * Emit –∞–∫—Ç–∏–≤–∞—Ü—ñ—é Conversation mode
     */
  emitConversationActivated() {
    this.emit(ConversationEvents.CONVERSATION_MODE_ACTIVATED, {
      timestamp: Date.now()
    });
  }

  /**
     * Emit –¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—é Conversation mode
     */
  emitConversationDeactivated(reason = 'user_action') {
    this.emit(ConversationEvents.CONVERSATION_MODE_DEACTIVATED, {
      reason,
      timestamp: Date.now(),
      duration: this.stateManager?.getConversationDuration() || 0
    });
  }

  /**
     * Emit —Å—Ç–∞—Ä—Ç keyword detection
     */
  emitStartKeywordDetection() {
    this.emit(ConversationEvents.START_KEYWORD_DETECTION, {
      timestamp: Date.now()
    });
  }

  /**
     * Emit –∑—É–ø–∏–Ω–∫—É keyword detection
     */
  emitStopKeywordDetection() {
    this.emit(ConversationEvents.STOP_KEYWORD_DETECTION, {
      timestamp: Date.now()
    });
  }

  /**
     * Emit —Å—Ç–∞—Ä—Ç conversation recording
     */
  emitConversationRecordingStart() {
    this.emit(ConversationEvents.CONVERSATION_RECORDING_START, {
      timestamp: Date.now()
    });
  }

  /**
     * Emit –≤—ñ–¥–ø—Ä–∞–≤–∫—É –≤ chat
     */
  emitSendToChat(text, confidence = 1.0) {
    this.emit(Events.SEND_CHAT_MESSAGE, {
      text,
      confidence,
      source: 'conversation_mode',
      timestamp: Date.now()
    });
  }

  // ==================== CLEANUP ====================

  /**
     * –û—á–∏—Å—Ç–∏—Ç–∏ –≤—Å—ñ —Ä–µ—Å—É—Ä—Å–∏
     */
  cleanup() {
    logger.info('üßπ Cleaning up event handlers...');
    this.unsubscribeFromEvents();
    this.callbacks = {};
    logger.info('‚úÖ Event handlers cleaned up');
  }
}

/**
 * Helper: —Å—Ç–≤–æ—Ä–∏—Ç–∏ event handlers –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é
 * @param {EventHandlerConfig} config
 * @returns {ConversationEventHandlers}
 */
export function createEventHandlers(config = {}) {
  return new ConversationEventHandlers(config);
}
