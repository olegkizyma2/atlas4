/**
 * @fileoverview –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–∂–∏–º—ñ–≤ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
 *
 * –î–≤–∞ —Ä–µ–∂–∏–º–∏ —Ä–æ–±–æ—Ç–∏:
 * 1. Quick-send: –æ–¥–Ω–µ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è -> –∑–∞–ø–∏—Å -> VAD –¥–µ—Ç–µ–∫—Ç—É—î –∫—ñ–Ω–µ—Ü—å -> –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ Whisper -> —á–∞—Ç
 * 2. Conversation: —É—Ç—Ä–∏–º–∞–Ω–Ω—è 2 —Å–µ–∫ -> Atlas –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î (—Ä–æ—Ç–∞—Ü—ñ—è —Ñ—Ä–∞–∑) -> –∂–∏–≤–µ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è STT‚ÜíTTS‚ÜíSTT
 *
 * WORKFLOW Quick-send (Mode 1):
 * - User: –ö–ª—ñ–∫ –Ω–∞ –∫–Ω–æ–ø–∫—É
 * - System: –ó–∞–ø–∏—Å –∞—É–¥—ñ–æ (VAD –º–æ–Ω—ñ—Ç–æ—Ä–∏—Ç—å —Ä—ñ–≤–µ–Ω—å)
 * - VAD: –í–∏–∑–Ω–∞—á–∞—î –∫—ñ–Ω–µ—Ü—å —Ñ—Ä–∞–∑–∏ (1.5 —Å–µ–∫ —Ç–∏—à—ñ)
 * - System: –ê–≤—Ç–æ—Å—Ç–æ–ø ‚Üí Whisper —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è ‚Üí –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç
 * - Atlas: –í—ñ–¥–ø–æ–≤—ñ–¥—å ‚Üí TTS ‚Üí –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ idle
 *
 * WORKFLOW Conversation (Mode 2):
 * - User: –£—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ 2 —Å–µ–∫—É–Ω–¥–∏
 * - System: –ê–∫—Ç–∏–≤–∞—Ü—ñ—è conversation mode
 * - System: –ü—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ "–ê—Ç–ª–∞—Å" (—á–µ—Ä–µ–∑ Whisper)
 * - User: –ì–æ–≤–æ—Ä–∏—Ç—å "–ê—Ç–ª–∞—Å"
 * - System: –í—ñ–¥–ø–æ–≤—ñ–¥—å –∑ —Ä–æ—Ç–∞—Ü—ñ—î—é ("—Å–ª—É—Ö–∞—é", "–≤ —É–≤–∞–∑—ñ", etc.) ‚Üí TTS
 * - System: –ü—ñ—Å–ª—è TTS ‚Üí –ø–æ—á–∞—Ç–æ–∫ –∑–∞–ø–∏—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * - User: –ì–æ–≤–æ—Ä–∏—Ç—å –∑–∞–ø–∏—Ç
 * - VAD: –í–∏–∑–Ω–∞—á–∞—î –∫—ñ–Ω–µ—Ü—å —Ñ—Ä–∞–∑–∏ ‚Üí –∞–≤—Ç–æ—Å—Ç–æ–ø
 * - System: Whisper —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—è ‚Üí —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è ‚Üí —á–∞—Ç
 * - Atlas: –í—ñ–¥–ø–æ–≤—ñ–¥—å ‚Üí TTS
 * - System: –ü—ñ—Å–ª—è TTS ‚Üí –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π continuous listening (–ë–ï–ó "–ê—Ç–ª–∞—Å"!)
 * - User: –ú–æ–∂–µ –æ–¥—Ä–∞–∑—É –≥–æ–≤–æ—Ä–∏—Ç–∏ NEXT –∑–∞–ø–∏—Ç
 * - VAD: –í–∏–∑–Ω–∞—á–∞—î –∫—ñ–Ω–µ—Ü—å —Ñ—Ä–∞–∑–∏ ‚Üí –∞–≤—Ç–æ—Å—Ç–æ–ø ‚Üí Whisper ‚Üí —á–∞—Ç ‚Üí LOOP
 * - Exit: 5 —Å–µ–∫ —Ç–∏—à—ñ ‚Üí –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è "–ê—Ç–ª–∞—Å"
 * - Exit: Task mode ‚Üí –ø–æ–≤–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è conversation loop
 *
 * @version 4.0.0 - Refactored with modular architecture
 * @date 2025-10-11
 */

import { createLogger } from './core/logger.js';
import { eventManager, Events } from './events/event-manager.js';

// New modular imports
import { ConversationModes, ConversationEvents, Timeouts } from './conversation/constants.js';
import { filterTranscription } from './conversation/filters.js';
import { createStateManager } from './conversation/state-manager.js';
import { createEventHandlers } from './conversation/event-handlers.js';
import { createUIController } from './conversation/ui-controller.js';

/**
 * @typedef {'idle'|'quick-send'|'conversation'} ConversationMode
 */

export class ConversationModeManager {
  constructor(config = {}) {
    this.logger = createLogger('CONVERSATION_MODE');
    this.logger.info('üèóÔ∏è Initializing with modular architecture...');

    // EventManager (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–µ—Ä–µ–¥–∞–Ω–∏–π –∞–±–æ fallback –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–∏–π)
    this.eventManager = config.eventManager || eventManager;

    // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è (—Ç–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î Timeouts constants)
    this.config = {
      longPressDuration: config.longPressDuration || Timeouts.LONG_PRESS,
      quickSendMaxDuration: config.quickSendMaxDuration || Timeouts.QUICK_SEND_MAX,
      conversationTimeout: config.conversationTimeout || Timeouts.CONVERSATION_TOTAL,
      keywordForActivation: config.keywordForActivation || '–∞—Ç–ª–∞—Å',
      ...config
    };

    // üÜï State Manager - —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å—Ç–∞–Ω–æ–º
    this.state = createStateManager({
      conversationTimeout: this.config.conversationTimeout,
      maxHistorySize: config.maxHistorySize || 20
    });

    // üÜï Event Handlers - –±—É–¥—É—Ç—å —Å—Ç–≤–æ—Ä–µ–Ω—ñ –≤ initialize() –ø—ñ—Å–ª—è UI
    this.eventHandlers = null;

    // üÜï UI Controller - –±—É–¥e —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –≤ initialize()
    this.ui = null;

    // –¢–∞–π–º–µ—Ä–∏ (–∑–∞–ª–∏—à–∞—î–º–æ –¥–ª—è backward compatibility)
    this.longPressTimer = null;
    this.conversationTimer = null;
    this.responseWaitTimer = null;

    // DOM –µ–ª–µ–º–µ–Ω—Ç–∏ (–±—É–¥—É—Ç—å —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –≤ initialize())
    this.micButton = null;

    // Bind methods
    this.handleButtonMouseDown = this.handleButtonMouseDown.bind(this);
    this.handleButtonMouseUp = this.handleButtonMouseUp.bind(this);
    this.handleButtonTouchStart = this.handleButtonTouchStart.bind(this);
    this.handleButtonTouchEnd = this.handleButtonTouchEnd.bind(this);
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
   */
  async initialize() {
    this.logger.info('üéôÔ∏è Initializing Conversation Mode Manager (Modular)...');

    // –ó–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è DOM –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
    this.micButton = document.getElementById('microphone-btn');
    if (!this.micButton) {
      this.logger.error('Microphone button not found!');
      return false;
    }

    // üÜï –°—Ç–≤–æ—Ä—é—î–º–æ UI Controller
    this.ui = createUIController({
      micButton: this.micButton,
      autoCreateStatus: true
    });
    await this.ui.initialize();

    // üÜï –°—Ç–≤–æ—Ä—é—î–º–æ Event Handlers –∑ callbacks
    // NOTE: Callback methods MUST exist in class or be defined inline
    this.eventHandlers = createEventHandlers({
      eventManager: this.eventManager,
      stateManager: this.state,
      // Quick-send mode activation (on microphone button click)
      // –ü–†–ò–ú–Ü–¢–ö–ê: –ù–ï –≤–∏–∫–ª–∏–∫–∞—î–º–æ activateQuickSendMode() —Ç—É—Ç!
      // –í—ñ–Ω –≤–∂–µ –≤–∏–∫–ª–∏–∫–∞–Ω–∏–π —á–µ—Ä–µ–∑ endPressTimer ‚Üí emit
      // –¶–µ–π callback —Ç—ñ–ª—å–∫–∏ –¥–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –ª–æ–≥—ñ–∫–∏ (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞)
      onQuickSend: (_payload) => {
        this.logger.info('üé§ Quick-send mode activation confirmed');
        // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ª–æ–≥—ñ–∫–∞ (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞)
      },
      // Conversation mode activation (on long-press)
      // –ü–†–ò–ú–Ü–¢–ö–ê: –ù–ï –≤–∏–∫–ª–∏–∫–∞—î–º–æ activateConversationMode() —Ç—É—Ç!
      // –í—ñ–Ω –≤–∂–µ –≤–∏–∫–ª–∏–∫–∞–Ω–∏–π —á–µ—Ä–µ–∑ startPressTimer ‚Üí setTimeout
      // –¶–µ–π callback —Ç—ñ–ª—å–∫–∏ –¥–ª—è –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –ª–æ–≥—ñ–∫–∏ (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞)
      onConversationStart: (_payload) => {
        this.logger.info('üí¨ Conversation mode activation confirmed');
        // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ª–æ–≥—ñ–∫–∞ (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–∞)
      },
      // Conversation mode deactivation
      onConversationEnd: (_payload) => {
        this.logger.info('üõë Conversation mode deactivated');
        this.deactivateConversationMode();
      },
      // Transcription results from Whisper
      onTranscription: this.handleTranscriptionComplete.bind(this),
      // TTS playback completed
      onTTSComplete: this.handleTTSCompleted.bind(this),
      // Keyword detected in conversation mode
      onKeywordDetected: this.handleKeywordDetected.bind(this),
      onError: (error) => this.logger.error('Event handler error:', error)
    });

    // –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—è –Ω–∞ –≤—Å—ñ –ø–æ–¥—ñ—ó
    this.eventHandlers.subscribeToEvents();

    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è button listeners
    this.setupEventListeners();

    // –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ conversation state changes
    this.state.onStateChange((eventType, data) => {
      this.logger.debug(`State changed: ${eventType}`, data);
    });

    this.logger.info('‚úÖ Conversation Mode Manager initialized (Modular)');
    return true;
  }

  /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è event listeners –¥–ª—è –∫–Ω–æ–ø–∫–∏
     */
  setupEventListeners() {
    // Mouse events
    this.micButton.addEventListener('mousedown', this.handleButtonMouseDown);
    this.micButton.addEventListener('mouseup', this.handleButtonMouseUp);
    this.micButton.addEventListener('mouseleave', this.handleButtonMouseUp);

    // Touch events
    this.micButton.addEventListener('touchstart', this.handleButtonTouchStart, { passive: true });
    this.micButton.addEventListener('touchend', this.handleButtonTouchEnd);
    this.micButton.addEventListener('touchcancel', this.handleButtonTouchEnd);

    this.logger.debug('Event listeners attached to microphone button');
  }

  /**
     * –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–∏—Å—Ç–µ–º–Ω—ñ –ø–æ–¥—ñ—ó
     */
  subscribeToSystemEvents() {
    // –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó
    this.eventManager.on(Events.WHISPER_TRANSCRIPTION_COMPLETED, (event) => {
      this.handleTranscriptionComplete(event.payload);
    });

    // –ü–æ—á–∞—Ç–æ–∫ TTS
    this.eventManager.on('TTS_STARTED', (event) => {
      this.handleTTSStarted(event);
    });

    // –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è TTS - FIXED (11.10.2025 - 17:25): –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Events.TTS_COMPLETED ('tts.completed')
    this.eventManager.on(Events.TTS_COMPLETED, (event) => {
      this.handleTTSCompleted(event);
    });

    // –í–∏—è–≤–ª–µ–Ω–Ω—è –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    this.eventManager.on(Events.KEYWORD_DETECTED, (event) => {
      this.handleKeywordDetected(event.payload);
    });

    this.logger.debug('Subscribed to system events');
  }

  /**
     * –ü–æ—á–∞—Ç–æ–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ (mouse)
     */
  handleButtonMouseDown(event) {
    event.preventDefault();
    this.startPressTimer();
  }

  /**
     * –ö—ñ–Ω–µ—Ü—å –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ (mouse)
     */
  handleButtonMouseUp(event) {
    event?.preventDefault();
    this.endPressTimer();
  }

  /**
     * –ü–æ—á–∞—Ç–æ–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ (touch)
     */
  handleButtonTouchStart(_event) {
    this.startPressTimer();
  }

  /**
     * –ö—ñ–Ω–µ—Ü—å –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ (touch)
     */
  handleButtonTouchEnd(event) {
    event?.preventDefault();
    this.endPressTimer();
  }

  /**
     * –ü–æ—á–∞—Ç–æ–∫ —Ç–∞–π–º–µ—Ä–∞ –¥–æ–≤–≥–æ–≥–æ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è
     */
  startPressTimer() {
    if (this.longPressTimer) return;

    this.logger.debug('Started long press timer');

    // –í—ñ–∑—É–∞–ª—å–Ω–∏–π feedback —á–µ—Ä–µ–∑ UI
    this.ui?.showButtonPressed();

    // –¢–∞–π–º–µ—Ä –¥–ª—è conversation mode
    this.longPressTimer = setTimeout(() => {
      this.logger.info('üéôÔ∏è Long press detected - activating Conversation Mode');

      // 1. –í–∏–∫–ª–∏–∫–∞—î–º–æ –∞–∫—Ç–∏–≤–∞—Ü—ñ—é –ë–ï–ó emit –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ
      this.activateConversationMode();

      // 2. –ï–º—ñ—Ç—É—î–º–æ –ø–æ–¥—ñ—é –ü–Ü–°–õ–Ø –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó
      // 3. Callback onConversationStart() –ù–ï –≤–∏–∫–ª–∏–∫–∞—î activateConversationMode (—Ç—ñ–ª—å–∫–∏ –ª–æ–≥—É—î)
      // 4. –†–µ–∑—É–ª—å—Ç–∞—Ç: NO infinite loop
      this.eventHandlers?.emitConversationActivated();
    }, this.config.longPressDuration);
  }

  /**
     * –ó–∞–∫—ñ–Ω—á–µ–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞ —ñ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è
     */
  endPressTimer() {
    if (!this.longPressTimer) {
      // –Ø–∫—â–æ —Ç–∞–π–º–µ—Ä –≤–∂–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤, –∑–Ω–∞—á–∏—Ç—å –º–∏ –≤ conversation mode
      return;
    }

    // –û—á–∏—â–µ–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞
    clearTimeout(this.longPressTimer);
    this.longPressTimer = null;

    // –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ feedback —á–µ—Ä–µ–∑ UI
    this.ui?.showIdleMode();

    // –ü–ï–†–ï–í–Ü–†–ö–ê: —è–∫—â–æ —Ä–µ–∂–∏–º –≤–∂–µ –∞–∫—Ç–∏–≤–Ω–∏–π - –≤–∏–º–∫–Ω—É—Ç–∏ –π–æ–≥–æ –∫–ª—ñ–∫–æ–º
    if (this.state.getCurrentMode() === ConversationModes.CONVERSATION && this.state.isInConversation()) {
      this.logger.info('üõë Deactivating conversation mode by click');
      this.deactivateConversationMode();
      return;
    }

    if (this.state.getCurrentMode() === ConversationModes.QUICK_SEND) {
      this.logger.info('üõë Stopping quick-send by click');
      // FIXED (11.10.2025 - 22:05): –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ConversationEvents –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
      this.eventManager.emit(ConversationEvents.CONVERSATION_MODE_QUICK_SEND_END, {
        mode: 'idle',
        timestamp: Date.now()
      });
      this.state.returnToIdle();
      this.resetUI();
      return;
    }

    // –ö–æ—Ä–æ—Ç–∫–µ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è (<2s) ‚Üí Quick-send mode
    // 1. –ï–º—ñ—Ç—É—î–º–æ –ø–æ–¥—ñ—é –°–ü–û–ß–ê–¢–ö–£
    // 2. Callback onQuickSend() –ù–ï –≤–∏–∫–ª–∏–∫–∞—î activateQuickSendMode (—Ç—ñ–ª—å–∫–∏ –ª–æ–≥—É—î)
    // 3. –í–∏–∫–ª–∏–∫–∞—î–º–æ activateQuickSendMode() –ë–ï–ó emit –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ
    // 4. –†–µ–∑—É–ª—å—Ç–∞—Ç: NO infinite loop
    this.logger.info('üì§ Quick press detected - emitting quick-send event');
    this.eventManager.emit(ConversationEvents.CONVERSATION_MODE_QUICK_SEND_START, {
      timestamp: Date.now()
    });

    // –í–∏–∫–ª–∏–∫–∞—î–º–æ –∞–∫—Ç–∏–≤–∞—Ü—ñ—é –ë–ï–ó emit
    this.activateQuickSendMode();
  }

  /**
   * –ê–∫—Ç–∏–≤–∞—Ü—ñ—è Quick-send —Ä–µ–∂–∏–º—É (–æ–¥–Ω–µ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è)
   */
  async activateQuickSendMode() {
    // üÜï State validation
    if (this.state.isInConversation()) {
      this.logger.warn('Cannot activate quick-send during conversation');
      return;
    }

    // üÜï State transition
    this.state.enterQuickSendMode();
    this.logger.info('üé§ Quick-send mode activated');

    // üÜï UI updates —á–µ—Ä–µ–∑ UI controller
    this.ui?.showQuickSendMode();

    // –ü–†–ò–ú–Ü–¢–ö–ê: –ù–ï –µ–º—ñ—Ç—É—î–º–æ –ø–æ–¥—ñ—é —Ç—É—Ç!
    // –ü–æ–¥—ñ—è –≤–∂–µ –µ–º—ñ—Ç–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ endPressTimer ‚Üí emit(CONVERSATION_MODE_QUICK_SEND_START)
    // –©–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—é–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π —Ç–∞ infinite loop

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –∑—É–ø–∏–Ω–∫–∞ —á–µ—Ä–µ–∑ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —á–∞—Å
    setTimeout(() => {
      if (this.state.getCurrentMode() === ConversationModes.QUICK_SEND) {
        this.logger.info('Quick-send timeout reached');
        this.deactivateQuickSendMode();
      }
    }, this.config.quickSendMaxDuration);
  }

  /**
   * –î–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—è Quick-send —Ä–µ–∂–∏–º—É
   */
  deactivateQuickSendMode() {
    if (this.state.getCurrentMode() !== ConversationModes.QUICK_SEND) return;

    this.logger.info('üì§ Quick-send mode deactivated');

    // üÜï State transition
    this.state.returnToIdle();

    // üÜï UI updates
    this.ui?.showIdleMode();
  }

  /**
   * –ê–∫—Ç–∏–≤–∞—Ü—ñ—è Conversation —Ä–µ–∂–∏–º—É (—É—Ç—Ä–∏–º–∞–Ω–Ω—è 2 —Å–µ–∫)
   */
  async activateConversationMode() {
    this.logger.info('üé¨ Activating conversation mode...');
    clearTimeout(this.longPressTimer);
    this.longPressTimer = null;

    // üÜï State transition
    this.state.enterConversationMode();
    this.logger.info('üí¨ Conversation mode activated', this.state.getDebugInfo());

    // üÜï UI updates —á–µ—Ä–µ–∑ UI controller
    this.ui?.showConversationActivated();

    // –ü–†–ò–ú–Ü–¢–ö–ê: –ù–ï –µ–º—ñ—Ç—É—î–º–æ –ø–æ–¥—ñ—é —Ç—É—Ç!
    // –ü–æ–¥—ñ—è –µ–º—ñ—Ç–∏—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —á–µ—Ä–µ–∑ state transition
    // –©–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—é–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π —Ç–∞ infinite loop

    // –ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è –¥–ª—è –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    this.startListeningForKeyword();

    // –¢–∞–π–º–∞—É—Ç —Ä–æ–∑–º–æ–≤–∏
    this.startConversationTimer();
  }

  /**
   * –î–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—è Conversation —Ä–µ–∂–∏–º—É
   */
  deactivateConversationMode() {
    if (!this.state.isInConversation()) return;

    this.logger.info('üí¨ Conversation mode deactivated');

    // üÜï State transition
    this.state.exitConversationMode();

    // –û—á–∏—â–µ–Ω–Ω—è —Ç–∞–π–º–µ—Ä—ñ–≤
    this.clearConversationTimer();
    this.clearResponseWaitTimer();

    // üÜï UI updates
    this.ui?.showConversationEnded('completed');

    // üÜï Event emission
    this.eventHandlers?.emitConversationDeactivated('user_action');
  }

  /**
   * –ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ "–ê—Ç–ª–∞—Å"
   */
  startListeningForKeyword() {
    this.logger.debug('üîç Started listening for activation keyword');

    // üÜï UI update
    this.ui?.showConversationWaitingForKeyword();

    // üÜï Event emission —á–µ—Ä–µ–∑ event handlers
    this.eventHandlers?.emitStartKeywordDetection();
    this.ui?.showStatus('–°–∫–∞–∂—ñ—Ç—å "–ê—Ç–ª–∞—Å" –¥–ª—è –ø–æ—á–∞—Ç–∫—É...');

    console.log('[CONVERSATION] üì° Emitting START_KEYWORD_DETECTION event with keyword:', this.config.keywordForActivation);

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ EventManager –ø–µ—Ä–µ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º
    if (!this.eventManager) {
      console.error('[CONVERSATION] ‚ùå EventManager is not available!');
      this.logger.error('EventManager is not available in ConversationModeManager');
      return;
    }

    if (typeof this.eventManager.emit !== 'function') {
      console.error('[CONVERSATION] ‚ùå EventManager.emit is not a function!', typeof this.eventManager.emit);
      return;
    }

    // –ï–º—ñ—Å—ñ—è –ø–æ–¥—ñ—ó –¥–ª—è keyword detector
    try {
      this.eventManager.emit(Events.START_KEYWORD_DETECTION, {
        keywords: [this.config.keywordForActivation],
        mode: 'conversation'
      });
      console.log('[CONVERSATION] ‚úÖ START_KEYWORD_DETECTION event emitted successfully');
    } catch (error) {
      console.error('[CONVERSATION] ‚ùå Failed to emit START_KEYWORD_DETECTION:', error);
      this.logger.error('Failed to emit START_KEYWORD_DETECTION', null, error);
    }
  }

  /**
     * –û–±—Ä–æ–±–∫–∞ –≤–∏—è–≤–ª–µ–Ω–Ω—è –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
     */
  handleKeywordDetected(payload) {
    console.log('[CONVERSATION] üì® Received KEYWORD_DETECTED event:', payload);

    if (!this.state.isInConversation()) {
      console.log('[CONVERSATION] ‚ö†Ô∏è Not in conversation mode, ignoring keyword');
      return;
    }

    const keyword = payload.keyword?.toLowerCase();
    const response = payload.response; // –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ keyword detector
    console.log('[CONVERSATION] üîç Checking keyword:', keyword, 'vs expected:', this.config.keywordForActivation);
    console.log('[CONVERSATION] üó£Ô∏è Activation response:', response);

    if (keyword === this.config.keywordForActivation) {
      this.logger.info(`üéØ Keyword "${keyword}" detected in conversation mode`);
      console.log('[CONVERSATION] ‚úÖ Keyword matched! Activating with response...');
      this.onKeywordActivation(response); // –ü–µ—Ä–µ–¥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    } else {
      console.log('[CONVERSATION] ‚ùå Keyword mismatch, ignoring');
    }
  }

  /**
     * –ü—ñ—Å–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è "–ê—Ç–ª–∞—Å" - –æ–∑–≤—É—á–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Ç–∞ –ø–æ—á–∞—Ç–æ–∫ –∑–∞–ø–∏—Å—É
     */
  async onKeywordActivation(activationResponse = null) {
    this.logger.info(`üéØ Keyword activation triggered, response: "${activationResponse}"`);

    // –ó–∞–≤–∂–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ keyword detector
    // –Ø–∫—â–æ –Ω–µ–º–∞—î - —Ü–µ –ø–æ–º–∏–ª–∫–∞ (keyword detector –º–∞—î –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏)
    if (!activationResponse) {
      this.logger.warn('‚ö†Ô∏è No activation response provided by keyword detector - using fallback');
      activationResponse = '—Å–ª—É—Ö–∞—é';
    }

    // –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞—Ç—É—Å
    this.ui?.showStatus(activationResponse, 'activation');

    // –ö–†–ò–¢–ò–ß–ù–û: –î–æ–¥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤ —á–∞—Ç –ü–ï–†–ï–î TTS
    this.logger.info(`üí¨ Adding activation response to chat: "${activationResponse}"`);
    try {
      // –î–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è Atlas –≤ —á–∞—Ç
      if (window.atlasApp?.chatManager) {
        window.atlasApp.chatManager.addMessage(activationResponse, 'atlas', {
          skipTTS: true // –ù–ï –∑–∞–ø—É—Å–∫–∞—Ç–∏ TTS —á–µ—Ä–µ–∑ chatManager (–±—É–¥–µ –æ–∫—Ä–µ–º–æ)
        });
      }
    } catch (error) {
      this.logger.error('Failed to add activation response to chat', null, error);
    }

    // –ö–†–ò–¢–ò–ß–ù–û: –û–∑–≤—É—á—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ü–ï–†–ï–î –ø–æ—á–∞—Ç–∫–æ–º –∑–∞–ø–∏—Å—É
    this.logger.info(`üîä Playing activation response: "${activationResponse}"`);

    try {
      // –ï–º—ñ—Ç—É—î–º–æ –ø–æ–¥—ñ—é –¥–ª—è TTS (isActivationResponse=true –æ–∑–Ω–∞—á–∞—î —â–æ –ø—ñ—Å–ª—è —Ü—å–æ–≥–æ —Ç—Ä–µ–±–∞ –∑–∞–ø–∏—Å)
      this.eventManager.emit('TTS_SPEAK_REQUEST', {
        text: activationResponse,
        agent: 'atlas',
        mode: 'conversation',
        priority: 'high',
        isActivationResponse: true // –ü–æ–∑–Ω–∞—á–∞—î–º–æ —è–∫ activation response
      });

      // –ü—ñ—Å–ª—è TTS –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è (—á–µ—Ä–µ–∑ TTS_COMPLETED event) –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –∑–∞–ø–∏—Å
      // –¶–µ –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –≤ handleTTSCompleted()

    } catch (error) {
      this.logger.error('Failed to play activation response', null, error);

      // Fallback: —è–∫—â–æ TTS failed - –æ–¥—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞—î–º–æ –∑–∞–ø–∏—Å
      this.startConversationRecording();
    }

    // –ï–º—ñ—Å—ñ—è –ø–æ–¥—ñ—ó –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ stage 0 (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
    this.eventManager.emit('CONVERSATION_KEYWORD_ACTIVATE', {
      keyword: this.config.keywordForActivation,
      response: activationResponse,
      mode: 'conversation',
      stage: 0
    });
  }

  /**
     * –ü–æ—á–∞—Ç–æ–∫ –∑–∞–ø–∏—Å—É –≤ conversation —Ä–µ–∂–∏–º—ñ
     */
  startConversationRecording() {
    this.logger.info('üé§ Started conversation recording');

    this.ui?.showRecording();
    this.ui?.showStatus('–ó–∞–ø–∏—Å—É—é...');

    // –ï–º—ñ—Å—ñ—è –ø–æ–¥—ñ—ó –¥–ª—è –ø–æ—á–∞—Ç–∫—É –∑–∞–ø–∏—Å—É
    // FIXED (11.10.2025 - 22:05): –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ConversationEvents –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –∑–∞–º—ñ—Å—Ç—å string literal
    this.eventManager.emit(ConversationEvents.CONVERSATION_RECORDING_START, {
      mode: 'conversation',
      timestamp: Date.now()
    });
  }

  /**
     * –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó
     */
  handleTranscriptionComplete(payload) {
    // WhisperService –µ–º—ñ—Ç—É—î {result: {text, confidence, ...}, latency, audioSize}
    const text = payload.result?.text || payload.text;
    const confidence = payload.result?.confidence || payload.confidence || 1.0;

    this.logger.info(`üìù Transcription received: "${text}" (confidence: ${confidence}, mode: ${this.state.getCurrentMode()}, conversation: ${this.state.isConversationActive()}, pending: ${this.state.isTranscriptionPending()})`);

    // CRITICAL: –û—á–∏—â—É—î–º–æ silence timeout - –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≥–æ–≤–æ—Ä–∏—Ç—å!
    this.clearResponseWaitTimer();

    // Quick-send: –ø—Ä–∏–π–º–∞—î–º–æ —è–∫—â–æ mode=quick-send –ê–ë–û —è–∫—â–æ –æ—á—ñ–∫—É—î–º–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—é
    if (this.state.getCurrentMode() === ConversationModes.QUICK_SEND || this.state.isTranscriptionPending()) {
      this.logger.info(`üì§ Quick-send transcription: "${text}"`);
      this.state.setTranscriptionPending(false);
      this.onQuickSendTranscription(text, { confidence });
    } else if (this.state.getCurrentMode() === ConversationModes.CONVERSATION && this.state.isConversationActive()) {
      this.logger.info(`üí¨ Conversation transcription: "${text}"`);
      this.onConversationTranscription(text, { confidence });
    } else {
      this.logger.warn(`‚ùå Transcription ignored - invalid mode or state (mode: ${this.state.getCurrentMode()}, conversation: ${this.state.isConversationActive()})`);
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó –≤ Quick-send —Ä–µ–∂–∏–º—ñ
   */
  onQuickSendTranscription(text) {
    // üÜï –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–æ–¥—É–ª—å–Ω—É —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é
    const filterResult = filterTranscription(text, {
      confidence: 1.0,
      isConversationMode: false
    });

    if (filterResult.blocked) {
      this.logger.warn(`üö´ Quick-send filtered (${filterResult.reason}): "${text}"`);
      this.deactivateQuickSendMode();
      return;
    }

    // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç
    this.sendToChat(text);

    // –î–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—è —Ä–µ–∂–∏–º—É
    this.deactivateQuickSendMode();
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü—ñ—ó –≤ Conversation —Ä–µ–∂–∏–º—ñ
   * REFACTORED (11.10.2025): Uses modular filterTranscription
   */
  onConversationTranscription(text, transcriptionData = {}) {
    this.logger.info(`üí¨ Conversation transcription received: "${text}"`);

    // –û—Ç—Ä–∏–º–∞–Ω–Ω—è confidence –∑ Whisper (—è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–æ)
    const confidence = transcriptionData.confidence || 1.0;

    // üÜï –ú–û–î–£–õ–¨–ù–ê –§–Ü–õ–¨–¢–†–ê–¶–Ü–Ø - –æ–¥–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–º—ñ—Å—Ç—å –∫—ñ–ª—å–∫–æ—Ö –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫
    const filterResult = filterTranscription(text, {
      confidence,
      isConversationMode: true
    });

    if (filterResult.blocked) {
      this.logger.warn(
        `üö´ Conversation filtered (${filterResult.reason}): "${text}" (confidence: ${confidence})`
      );

      // –û–±—Ä–æ–±–∫–∞ blocked transcription
      if (filterResult.action === 'return_to_keyword') {
        this.ui?.showTemporaryStatus(
          filterResult.reason === 'background_phrase'
            ? '–§–æ–Ω–æ–≤–∞ —Ñ—Ä–∞–∑–∞ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∞...'
            : '–ù–µ –∑—Ä–æ–∑—É–º—ñ–≤, —Å–∫–∞–∂—ñ—Ç—å "–ê—Ç–ª–∞—Å"...',
          'info',
          2000
        );
        this.startListeningForKeyword();
      }

      return; // ‚ùå –ë–õ–û–ö - –ù–ï –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ –≤ chat!
    }

    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    // –ö–†–û–ö 3: –í–ò–†–ê–ó–ù–ê –ö–û–ú–ê–ù–î–ê - –í–Ü–î–ü–†–ê–í–ò–¢–ò –í CHAT ‚úÖ
    // ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
    this.logger.info(`‚úÖ Clear command passed filters: "${text}" (confidence: ${confidence}) - sending to Atlas`);

    // –°–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ç–∞–π–º–∞—É—Ç—É —Ç–∏—à—ñ (–∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≥–æ–≤–æ—Ä–∏–≤!)
    if (this.responseWaitTimer) {
      clearTimeout(this.responseWaitTimer);
      this.responseWaitTimer = null;
      this.logger.debug('üîÑ Silence timeout cancelled - user spoke');
    }

    // –°–∫–∏–¥–∞–Ω–Ω—è —Ñ–ª–∞–≥—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ state manager
    this.state.setWaitingForUserResponse(false);
    this.ui?.showIdleMode(); // –°–∫–∏–¥–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–ª–∞—Å—ñ–≤

    // –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤ —ñ—Å—Ç–æ—Ä—ñ—é —Ä–æ–∑–º–æ–≤–∏ —á–µ—Ä–µ–∑ state manager
    // FIXED (11.10.2025 - 22:05): –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ state.addToHistory() –∑–∞–º—ñ—Å—Ç—å –ø—Ä—è–º–æ–≥–æ this.conversationHistory.push()
    this.state.addToHistory({
      type: 'user', // StateManager –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î 'type' –∑–∞–º—ñ—Å—Ç—å 'role'
      text,
      timestamp: Date.now(),
      confidence
    });

    // ‚úÖ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç (–¢–Ü–õ–¨–ö–ò —è–∫—â–æ –ø—Ä–æ–π—à–ª–∏ –í–°–Ü —Ñ—ñ–ª—å—Ç—Ä–∏)
    this.sendToChat(text, { conversationMode: true, confidence });

    // –ü–æ–∫–∞–∑—É—î–º–æ —â–æ Atlas –æ–±—Ä–æ–±–ª—è—î –∑–∞–ø–∏—Ç
    this.ui?.showStatus('Atlas –¥—É–º–∞—î...');

    // –¶–∏–∫–ª –ø—Ä–æ–¥–æ–≤–∂–∏—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ—Å–ª—è TTS_COMPLETED –ø–æ–¥—ñ—ó
  }

  /**
     * –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è TTS (–ê—Ç–ª–∞—Å –∑–∞–∫—ñ–Ω—á–∏–≤ –≥–æ–≤–æ—Ä–∏—Ç–∏)
     * –û–ù–û–í–õ–ï–ù–û (11.10.2025 - 20:30): –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ activation responses + continuous loop
     */
  handleTTSCompleted(event) {
    const mode = event?.mode || 'chat';
    const isInConversation = event?.isInConversation || false;
    const isActivationResponse = event?.isActivationResponse || false;

    console.log('[CONVERSATION] üîä TTS_COMPLETED event received!', {
      isInConversation,
      conversationActive: this.state.isConversationActive(),
      currentMode: this.state.getCurrentMode(),
      eventMode: mode,
      isActivationResponse,
      event
    });

    // –Ü–≥–Ω–æ—Ä—É—î–º–æ —è–∫—â–æ –ù–ï –≤ conversation mode
    if (!this.state.isInConversation()) {
      this.logger.warn('‚ö†Ô∏è TTS completed but NOT in conversation mode - ignoring');
      return;
    }

    // –°–ü–ï–¶–Ü–ê–õ–¨–ù–ê –û–ë–†–û–ë–ö–ê: Activation response (–ø—ñ—Å–ª—è "–ê—Ç–ª–∞—Å")
    // –ü—ñ—Å–ª—è –æ–∑–≤—É—á–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ ("—Å–ª—É—Ö–∞—é", "–≤ —É–≤–∞–∑—ñ" —Ç–æ—â–æ) - –∑–∞–ø—É—Å–∫–∞—î–º–æ –∑–∞–ø–∏—Å
    if (isActivationResponse) {
      this.logger.info('üéôÔ∏è Activation response completed - starting conversation recording');
      this.ui?.showIdleMode();

      // –ù–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞ –¥–ª—è –ø—Ä–∏—Ä–æ–¥–Ω–æ—Å—Ç—ñ (300ms)
      setTimeout(() => {
        if (this.state.isInConversation()) {
          this.startConversationRecording();
        }
      }, 300);

      return; // –ù–µ –∑–∞–ø—É—Å–∫–∞—î–º–æ continuous listening –ø—ñ—Å–ª—è activation response
    }

    // –Ü–≥–Ω–æ—Ä—É—î–º–æ —è–∫—â–æ —Ü–µ task mode - conversation loop —Ç—ñ–ª—å–∫–∏ –¥–ª—è chat!
    if (mode === 'task') {
      this.logger.info('üìã Task mode detected - NOT starting conversation loop');
      return;
    }

    this.logger.info('üîä Atlas finished speaking (chat mode) - starting continuous listening');

    // –í–∏–¥–∞–ª–µ–Ω–Ω—è —ñ–Ω–¥—ñ–∫–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ UI controller
    this.ui?.showIdleMode();

    // –ê–í–¢–û–ú–ê–¢–ò–ß–ù–ò–ô –¶–ò–ö–õ (–¢–Ü–õ–¨–ö–ò –î–õ–Ø CHAT MODE): –ó–∞–ø—É—Å–∫ continuous listening –ë–ï–ó keyword "–ê—Ç–ª–∞—Å"
    this.startContinuousListening();
  }

  /**
     * –ü–æ—á–∞—Ç–æ–∫ continuous listening –ø—ñ—Å–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ Atlas
     * –ë–ï–ó keyword detection - –ø—Ä—è–º–∏–π –∑–∞–ø–∏—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
     */
  startContinuousListening() {
    this.state.setWaitingForUserResponse(true);
    this.ui?.showStatus('–°–ª—É—Ö–∞—é... (–≥–æ–≤–æ—Ä—ñ—Ç—å –∞–±–æ –º–æ–≤—á—ñ—Ç—å 5 —Å–µ–∫ –¥–ª—è –≤–∏—Ö–æ–¥—É)');
    this.ui?.showWaitingForResponse();
    this.ui?.updateButtonIcon('üü†'); // –ü–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π - continuous listening

    this.logger.info('üîÑ Starting continuous listening (no keyword needed)');

    // –ù–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞ –¥–ª—è –ø—Ä–∏—Ä–æ–¥–Ω–æ—Å—Ç—ñ (500ms)
    setTimeout(() => {
      if (this.state.isWaitingForUserResponse() && this.state.isInConversation()) {
        this.startConversationRecording();
      }
    }, 500);

    // –¢–∞–π–º–∞—É—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –≤–∏—Ö–æ–¥—É –ø—Ä–∏ —Ç–∏—à—ñ - 5 —Å–µ–∫—É–Ω–¥
    this.responseWaitTimer = setTimeout(() => {
      this.logger.warn('‚è±Ô∏è User silence timeout (5 sec) - returning to keyword mode');
      this.onUserSilenceTimeout();
    }, 5000);
  }

  /**
     * –¢–∞–π–º–∞—É—Ç —Ç–∏—à—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ - –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ keyword mode
     */
  onUserSilenceTimeout() {
    this.state.setWaitingForUserResponse(false);
    this.ui?.showIdleMode();

    this.logger.info('üîÑ Returning to keyword detection mode after silence');

    // –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è –∫–ª—é—á–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
    this.startListeningForKeyword();
  }

  /**
     * –ó–∞—Å—Ç–∞—Ä—ñ–ª–∞ —Ñ—É–Ω–∫—Ü—ñ—è - –∑–∞–º—ñ–Ω–µ–Ω–∞ –Ω–∞ startContinuousListening
     * @deprecated –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ startContinuousListening()
     */
  startWaitingForUserResponse() {
    // Backward compatibility - redirects to new method
    this.startContinuousListening();
  }

  /**
     * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç
     */
  sendToChat(text, metadata = {}) {
    this.logger.info(`üì® Sending to chat: "${text}"`);

    // –ï–º—ñ—Å—ñ—è –ø–æ–¥—ñ—ó –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç
    // FIXED (11.10.2025 - 22:05): –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ConversationEvents –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
    this.eventManager.emit(ConversationEvents.SEND_CHAT_MESSAGE, {
      text,
      source: 'voice',
      mode: this.state.getCurrentMode(),
      ...metadata
    });
  }

  /**
     * –ü–æ—á–∞—Ç–æ–∫ —Ç–∞–π–º–µ—Ä–∞ —Ä–æ–∑–º–æ–≤–∏
     */
  startConversationTimer() {
    this.conversationTimer = setTimeout(() => {
      this.logger.info('‚è±Ô∏è Conversation timeout reached');
      this.deactivateConversationMode();
    }, this.config.conversationTimeout);
  }

  /**
     * –û—á–∏—â–µ–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞ —Ä–æ–∑–º–æ–≤–∏
     */
  clearConversationTimer() {
    if (this.conversationTimer) {
      clearTimeout(this.conversationTimer);
      this.conversationTimer = null;
    }
  }

  /**
     * –û—á–∏—â–µ–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
     */
  clearResponseWaitTimer() {
    if (this.responseWaitTimer) {
      clearTimeout(this.responseWaitTimer);
      this.responseWaitTimer = null;
    }
  }

  /**
     * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
     */
  getCurrentMode() {
    return this.state.getCurrentMode();
  }

  /**
     * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∞–∫—Ç–∏–≤–Ω–∏–π conversation —Ä–µ–∂–∏–º
     */
  isConversationActive() {
    return this.state.isConversationActive();
  }

  /**
     * –ü—Ä–∏–º—É—Å–æ–≤–∞ –∑—É–ø–∏–Ω–∫–∞ conversation —Ä–µ–∂–∏–º—É
     */
  forceStopConversation() {
    this.logger.warn('üõë Force stopping conversation mode');
    this.deactivateConversationMode();
  }

  /**
   * –°–∫–∏–¥–∞–Ω–Ω—è UI –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É
   */
  resetUI() {
    this.ui?.showIdleMode();
    this.ui?.hideStatus();
  }

  /**
     * –ó–Ω–∏—â–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
     */
  destroy() {
    // –û—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ç–∞–π–º–µ—Ä—ñ–≤
    this.clearConversationTimer();
    this.clearResponseWaitTimer();
    if (this.longPressTimer) {
      clearTimeout(this.longPressTimer);
    }

    // –í–∏–¥–∞–ª–µ–Ω–Ω—è event listeners
    if (this.micButton) {
      this.micButton.removeEventListener('mousedown', this.handleButtonMouseDown);
      this.micButton.removeEventListener('mouseup', this.handleButtonMouseUp);
      this.micButton.removeEventListener('mouseleave', this.handleButtonMouseUp);
      this.micButton.removeEventListener('touchstart', this.handleButtonTouchStart);
      this.micButton.removeEventListener('touchend', this.handleButtonTouchEnd);
      this.micButton.removeEventListener('touchcancel', this.handleButtonTouchEnd);
    }

    // Cleanup –º–æ–¥—É–ª—ñ–≤
    this.ui?.destroy();
    this.eventHandlers?.unsubscribeFromEvents();
    this.state?.clearHistory();

    this.logger.info('Conversation Mode Manager destroyed');
  }
}

export default ConversationModeManager;
