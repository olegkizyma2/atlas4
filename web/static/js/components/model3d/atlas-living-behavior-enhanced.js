/**
 * ATLAS ENHANCED LIVING BEHAVIOR v5.0
 *
 * –ü–æ–∫—Ä–∞—â–µ–Ω–∞ –∂–∏–≤–∞ –ø–æ–≤–µ–¥—ñ–Ω–∫–∞ –¥–ª—è —à–æ–ª–æ–º–∞ Atlas:
 * - –•–∞–æ—Ç–∏—á–Ω—ñ —Ä—É—Ö–∏ –∑ –≤–∏–ø–∞–¥–∫–æ–≤–∏–º–∏ –ø–∞—É–∑–∞–º–∏
 * - –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ TTS (–∞–Ω—ñ–º–∞—Ü—ñ—è –º–æ–≤–ª–µ–Ω–Ω—è)
 * - Idle –Ω–∞–±–ª–∏–∂–µ–Ω–Ω—è –¥–æ –∫–∞–º–µ—Ä–∏ (–≤–∏–≥–ª—è–¥–∞—î –∑ –º–æ–Ω—ñ—Ç–æ—Ä–∞)
 * - –ü—Ä–∏—Ä–æ–¥–Ω–∞ —É–≤–∞–≥–∞ –¥–æ —à—É–º—É —Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
 */

export class AtlasLivingBehaviorEnhanced {
  constructor(livingSystem) {
    this.livingSystem = livingSystem;
    this.modelViewer = livingSystem.modelViewer;

    // –°—Ç–∞–Ω –ø–æ–≤–µ–¥—ñ–Ω–∫–∏
    this.state = {
      lastActivityTime: Date.now(),
      isApproaching: false,
      isSpeaking: false,
      baseDistance: 125,  // –î–∞–ª—å—à–∞ –±–∞–∑–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è –¥–ª—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç—É –ø—Ä–∏ –Ω–∞–±–ª–∏–∂–µ–Ω–Ω—ñ
      closeDistance: 15,  // –í 3 –†–ê–ó–ò –±–ª–∏–∂—á–µ - –¥—É–∂–µ –ø–æ–º—ñ—Ç–Ω–µ –Ω–∞–±–ª–∏–∂–µ–Ω–Ω—è!
      idleThreshold: 15000, // 15 —Å–µ–∫—É–Ω–¥ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
      lookingAway: false,
      nextLookTime: Date.now() + 5000, // –ü–µ—Ä—à–∏–π –ø–æ–≥–ª—è–¥ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      currentLookDirection: null
    };

    // –°—Ç–≤–æ—Ä—é—î–º–æ overlay –¥–ª—è –∑–∞—Ç–µ–º–Ω–µ–Ω–Ω—è
    this.createDarkenOverlay();

    // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –±–∞–∑–æ–≤–µ –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è overlay
    this.applyBaselineLighting();

    this.init();
  }

  init() {
    console.log('üé≠ Initializing Enhanced Living Behavior...');

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ö–∞–æ—Ç–∏—á–Ω—É –ø–æ–≤–µ–¥—ñ–Ω–∫—É
    this.startChaoticBehavior();

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ idle –Ω–∞–±–ª–∏–∂–µ–Ω–Ω—è
    this.startIdleApproach();

    // –°–ª—É—Ö–∞—î–º–æ –ø–æ–¥—ñ—ó TTS
    this.setupTTSListeners();

    // –°–ª—É—Ö–∞—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    this.setupActivityListeners();

    console.log('‚ú® Enhanced Living Behavior –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!');
  }

  /**
   * –•–∞–æ—Ç–∏—á–Ω–∞ –ø–æ–≤–µ–¥—ñ–Ω–∫–∞ - –≤–∏–ø–∞–¥–∫–æ–≤—ñ –ø–æ–≥–ª—è–¥–∏ –≤ —Ä—ñ–∑–Ω—ñ —Å—Ç–æ—Ä–æ–Ω–∏
   */
  startChaoticBehavior() {
    const checkLook = () => {
      const now = Date.now();

      // –Ø–∫—â–æ —á–∞—Å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–≥–ª—è–¥—É
      if (now >= this.state.nextLookTime && !this.state.isSpeaking && !this.state.lookingAway) {
        // –í–∏–ø–∞–¥–∫–æ–≤–æ –≤–∏—Ä—ñ—à—É—î–º–æ —á–∏ –¥–∏–≤–∏—Ç–∏—Å—è
        if (Math.random() < 0.7) { // 70% —à–∞–Ω—Å –ø–æ–¥–∏–≤–∏—Ç–∏—Å—è
          this.performRandomLook();
        }

        // –ù–∞—Å—Ç—É–ø–Ω–∏–π –ø–æ–≥–ª—è–¥ —á–µ—Ä–µ–∑ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —á–∞—Å
        this.state.nextLookTime = now + this.randomDelay(5000, 15000);
      }

      requestAnimationFrame(checkLook);
    };

    requestAnimationFrame(checkLook);
  }

  /**
   * –í–∏–∫–æ–Ω–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –ø–æ–≥–ª—è–¥
   */
  performRandomLook() {
    const directions = [
      { y: -50, x: 15, z: 5, name: '–ª—ñ–≤–æ—Ä—É—á', weight: 1.5 },
      { y: 50, x: 15, z: -5, name: '–ø—Ä–∞–≤–æ—Ä—É—á', weight: 1.5 },
      { y: -35, x: -25, z: 3, name: '–≤–≥–æ—Ä—É-–ª—ñ–≤–æ', weight: 1.0 },
      { y: 35, x: -25, z: -3, name: '–≤–≥–æ—Ä—É-–ø—Ä–∞–≤–æ', weight: 1.0 },
      { y: 0, x: 30, z: 0, name: '–≤–≥–æ—Ä—É', weight: 0.8 },
      { y: -60, x: 5, z: 8, name: '–¥–∞–ª–µ–∫–æ-–ª—ñ–≤–æ—Ä—É—á', weight: 0.5 },
      { y: 60, x: 5, z: -8, name: '–¥–∞–ª–µ–∫–æ-–ø—Ä–∞–≤–æ—Ä—É—á', weight: 0.5 },
      { y: 0, x: -30, z: 0, name: '–≤–Ω–∏–∑', weight: 0.3 }
    ];

    // –í–∏–±–∏—Ä–∞—î–º–æ –Ω–∞–ø—Ä—è–º–æ–∫ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –≤–∞–≥–∏
    const totalWeight = directions.reduce((sum, d) => sum + d.weight, 0);
    let random = Math.random() * totalWeight;
    let direction = directions[0];

    for (const dir of directions) {
      random -= dir.weight;
      if (random <= 0) {
        direction = dir;
        break;
      }
    }

    // –î–æ–¥–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—ñ –≤–∞—Ä—ñ–∞—Ü—ñ—ó –¥–ª—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ
    const variation = {
      y: direction.y + (Math.random() - 0.5) * 15,
      x: direction.x + (Math.random() - 0.5) * 10,
      z: direction.z + (Math.random() - 0.5) * 5
    };

    this.state.currentLookDirection = variation;
    this.state.lookingAway = true;

    console.log(`üëÄ –î–∏–≤–ª—é—Å—å ${direction.name}:`, variation);

    // –ü–ª–∞–≤–Ω–∏–π –ø–æ–≤–æ—Ä–æ—Ç
    const duration = this.randomDelay(1500, 3000);
    const holdTime = this.randomDelay(800, 2500);

    this.animateLook(variation, duration, holdTime);
  }

  /**
   * –ê–Ω—ñ–º–∞—Ü—ñ—è –ø–æ–≥–ª—è–¥—É
   */
  animateLook(target, duration, holdTime) {
    const startRotation = {
      y: this.livingSystem.livingState.targetRotation.y,
      x: this.livingSystem.livingState.targetRotation.x,
      z: this.livingSystem.livingState.targetRotation.z
    };

    const startTime = Date.now();

    const animate = () => {
      const elapsed = Date.now() - startTime;
      const progress = Math.min(elapsed / duration, 1);

      // Ease-in-out
      const eased = progress < 0.5
        ? 2 * progress * progress
        : 1 - Math.pow(-2 * progress + 2, 2) / 2;

      // –Ü–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü—ñ—è
      this.livingSystem.livingState.targetRotation.y = startRotation.y + (target.y - startRotation.y) * eased;
      this.livingSystem.livingState.targetRotation.x = startRotation.x + (target.x - startRotation.x) * eased;
      this.livingSystem.livingState.targetRotation.z = startRotation.z + (target.z - startRotation.z) * eased;

      if (progress < 1) {
        requestAnimationFrame(animate);
      } else {
        // –¢—Ä–∏–º–∞—î–º–æ –ø–æ–≥–ª—è–¥
        setTimeout(() => {
          this.returnToNeutral(1500);
        }, holdTime);
      }
    };

    requestAnimationFrame(animate);
  }

  /**
   * –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ–≥–ª—è–¥—É
   */
  returnToNeutral(duration) {
    const startRotation = {
      y: this.livingSystem.livingState.targetRotation.y,
      x: this.livingSystem.livingState.targetRotation.x,
      z: this.livingSystem.livingState.targetRotation.z
    };

    const startTime = Date.now();

    const animate = () => {
      const elapsed = Date.now() - startTime;
      const progress = Math.min(elapsed / duration, 1);

      // Ease-out
      const eased = 1 - Math.pow(1 - progress, 3);

      this.livingSystem.livingState.targetRotation.y = startRotation.y * (1 - eased);
      this.livingSystem.livingState.targetRotation.x = startRotation.x * (1 - eased);
      this.livingSystem.livingState.targetRotation.z = startRotation.z * (1 - eased);

      if (progress < 1) {
        requestAnimationFrame(animate);
      } else {
        this.state.lookingAway = false;
        this.state.currentLookDirection = null;
      }
    };

    requestAnimationFrame(animate);
  }

  /**
   * Idle –Ω–∞–±–ª–∏–∂–µ–Ω–Ω—è - –≤–∏–≥–ª—è–¥–∞—î –∑ –º–æ–Ω—ñ—Ç–æ—Ä–∞
   */
  startIdleApproach() {
    const checkIdle = () => {
      const now = Date.now();
      const timeSinceActivity = now - this.state.lastActivityTime;

      // –Ø–∫—â–æ –±—ñ–ª—å—à–µ 10 —Å–µ–∫—É–Ω–¥ –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ - –Ω–∞–±–ª–∏–∂–∞—î–º–æ—Å—å
      if (timeSinceActivity > this.state.idleThreshold && !this.state.isApproaching && !this.state.isSpeaking) {
        console.log(`‚è∞ Idle ${timeSinceActivity}ms - –Ω–∞–±–ª–∏–∂–∞—é—Å—å!`);
        this.approachCamera();
      }

      // –Ø–∫—â–æ —î –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å - –≤—ñ–¥—Ö–æ–¥–∏–º–æ –Ω–∞–∑–∞–¥
      if (timeSinceActivity < 2000 && this.state.isApproaching) {
        console.log('üëã –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤–∏—è–≤–ª–µ–Ω–∞ - –≤—ñ–¥—Ö–æ–¥–∂—É –Ω–∞–∑–∞–¥');
        this.retreatCamera();
      }

      requestAnimationFrame(checkIdle);
    };

    requestAnimationFrame(checkIdle);
  }

  /**
   * –ù–∞–±–ª–∏–∂–µ–Ω–Ω—è –¥–æ –∫–∞–º–µ—Ä–∏
   */
  approachCamera() {
    this.state.isApproaching = true;
    console.log('üîç –ù–∞–±–ª–∏–∂–∞—é—Å—å –¥–æ –∫–∞–º–µ—Ä–∏...');

    // –£–≤—ñ–º–∫–Ω—É—Ç–∏ —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω–µ –∑–∞—Ç–µ–º–Ω–µ–Ω–Ω—è —Ç–∞ –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—è —à–æ–ª–æ–º–∞
    this.enableDarken();

    const duration = 3000;
    const startDistance = this.state.baseDistance;
    const targetDistance = this.state.closeDistance;
    const startTime = Date.now();

    const animate = () => {
      const elapsed = Date.now() - startTime;
      const progress = Math.min(elapsed / duration, 1);

      // Ease-in-out
      const eased = progress < 0.5
        ? 2 * progress * progress
        : 1 - Math.pow(-2 * progress + 2, 2) / 2;

      const currentDistance = startDistance + (targetDistance - startDistance) * eased;

      // –û–Ω–æ–≤–ª—é—î–º–æ camera orbit
      const theta = this.livingSystem.livingState.currentRotation.y;
      const phi = 75 + this.livingSystem.livingState.currentRotation.x;
      this.modelViewer.cameraOrbit = `${theta}deg ${phi}deg ${currentDistance}%`;

      if (progress < 1) {
        requestAnimationFrame(animate);
      }
    };

    requestAnimationFrame(animate);
  }

  /**
   * –í—ñ–¥—Ö—ñ–¥ –≤—ñ–¥ –∫–∞–º–µ—Ä–∏
   */
  retreatCamera() {
    this.state.isApproaching = false;
    console.log('‚Ü©Ô∏è –í—ñ–¥—Ö–æ–¥–∂—É –≤—ñ–¥ –∫–∞–º–µ—Ä–∏...');

    // –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –±–∞–∑–æ–≤–æ–≥–æ –∑–∞—Ç–µ–º–Ω–µ–Ω–Ω—è
    this.disableDarken();

    const duration = 2000;
    const startDistance = this.state.closeDistance;
    const targetDistance = this.state.baseDistance;
    const startTime = Date.now();

    const animate = () => {
      const elapsed = Date.now() - startTime;
      const progress = Math.min(elapsed / duration, 1);

      // Ease-out
      const eased = 1 - Math.pow(1 - progress, 3);

      const currentDistance = startDistance + (targetDistance - startDistance) * eased;

      // –û–Ω–æ–≤–ª—é—î–º–æ camera orbit
      const theta = this.livingSystem.livingState.currentRotation.y;
      const phi = 75 + this.livingSystem.livingState.currentRotation.x;
      this.modelViewer.cameraOrbit = `${theta}deg ${phi}deg ${currentDistance}%`;

      if (progress < 1) {
        requestAnimationFrame(animate);
      }
    };

    requestAnimationFrame(animate);
  }

  /**
   * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ª—É—Ö–∞—á—ñ–≤ TTS
   */
  setupTTSListeners() {
    // –°–ª—É—Ö–∞—î–º–æ –ø–æ–¥—ñ—ó TTS —á–µ—Ä–µ–∑ window
    window.addEventListener('atlas-tts-start', (e) => {
      this.onTTSStart(e.detail);
    });

    window.addEventListener('atlas-tts-end', () => {
      this.onTTSEnd();
    });

    // –¢–∞–∫–æ–∂ —ñ–Ω—Ç–µ–≥—Ä—É—î–º–æ—Å—å –∑ —ñ—Å–Ω—É—é—á–æ—é —Å–∏—Å—Ç–µ–º–æ—é
    const originalStartSpeaking = this.livingSystem.startSpeaking.bind(this.livingSystem);
    this.livingSystem.startSpeaking = (agent, intensity) => {
      originalStartSpeaking(agent, intensity);
      this.onTTSStart({ agent, intensity });
    };

    const originalStopSpeaking = this.livingSystem.stopSpeaking.bind(this.livingSystem);
    this.livingSystem.stopSpeaking = () => {
      originalStopSpeaking();
      this.onTTSEnd();
    };
  }

  /**
   * –ü–æ—á–∞—Ç–æ–∫ TTS
   */
  onTTSStart(detail = {}) {
    console.log('üé§ TTS –ø–æ—á–∞–≤—Å—è:', detail);

    this.state.isSpeaking = true;
    this.state.lastActivityTime = Date.now();

    // –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å .speaking –¥–ª—è –∑–µ–ª–µ–Ω–æ–≥–æ —Å–≤—ñ—á–µ–Ω–Ω—è
    this.modelViewer.classList.add('speaking');

    // –í–∏–º–∏–∫–∞—î–º–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –æ—á–∏–º–∞ –ø—ñ–¥ —á–∞—Å –º–æ–≤–ª–µ–Ω–Ω—è
    this.livingSystem.config.enableEyeTracking = false;

    // –Ø–∫—â–æ –Ω–∞–±–ª–∏–∂–µ–Ω—ñ - —Ç—Ä–æ—Ö–∏ –≤—ñ–¥—Ö–æ–¥–∏–º–æ
    if (this.state.isApproaching) {
      this.retreatCamera();
    }

    // –í–∏—Ä—ñ–≤–Ω—é—î–º–æ—Å—å –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—ñ —Ç–∞ –¥–∏–≤–∏–º–æ—Å—å –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    // x: 0 - –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É (–Ω–µ –≤–Ω–∏–∑, –Ω–µ –≤–≥–æ—Ä—É)
    // y: –Ω–µ–≤–µ–ª–∏–∫–∞ –≤–∞—Ä—ñ–∞—Ü—ñ—è –¥–ª—è –ø—Ä–∏—Ä–æ–¥–Ω–æ—Å—Ç—ñ
    // z: 0 - –±–µ–∑ –Ω–∞—Ö–∏–ª—É
    const lookVariation = {
      y: (Math.random() - 0.5) * 4, // ¬±2 –≥—Ä–∞–¥—É—Å–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å (–∑–º–µ–Ω—à–µ–Ω–æ –∑ 10)
      x: 0 + (Math.random() - 0.5) * 2, // –¶–µ–Ω—Ç—Ä ¬±1 –≥—Ä–∞–¥—É—Å (–∑–º–µ–Ω—à–µ–Ω–æ –∑ 5)
      z: (Math.random() - 0.5) * 1 // –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –Ω–∞—Ö–∏–ª (–∑–º–µ–Ω—à–µ–Ω–æ –∑ 3)
    };

    // –®–≤–∏–¥–∫–æ –≤–∏—Ä—ñ–≤–Ω—é—î–º–æ—Å—å —ñ –¥–∏–≤–∏–º–æ—Å—å –Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    this.animateLook(lookVariation, 600, 99999); // –¢—Ä–∏–º–∞—î–º–æ –ø–æ–∫–∏ –≥–æ–≤–æ—Ä–∏–º–æ

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –º–æ–≤–ª–µ–Ω–Ω—è
    this.startSpeakingAnimation();
  }

  /**
   * –ö—ñ–Ω–µ—Ü—å TTS
   */
  onTTSEnd() {
    console.log('üõë TTS –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è');

    this.state.isSpeaking = false;
    this.state.lastActivityTime = Date.now();

    // –í–∏–¥–∞–ª—è—î–º–æ –∫–ª–∞—Å .speaking
    this.modelViewer.classList.remove('speaking');

    // –í–º–∏–∫–∞—î–º–æ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –æ—á–∏–º–∞ –Ω–∞–∑–∞–¥
    this.livingSystem.config.enableEyeTracking = true;

    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –¥–æ –Ω–µ–π—Ç—Ä–∞–ª—ñ
    this.returnToNeutral(1000);

    // –ó—É–ø–∏–Ω—è—î–º–æ –∞–Ω—ñ–º–∞—Ü—ñ—é –º–æ–≤–ª–µ–Ω–Ω—è
    this.stopSpeakingAnimation();
  }

  /**
   * –ê–Ω—ñ–º–∞—Ü—ñ—è –ø—ñ–¥ —á–∞—Å –º–æ–≤–ª–µ–Ω–Ω—è
   */
  startSpeakingAnimation() {
    let phase = 0;

    const animate = () => {
      if (!this.state.isSpeaking) return;

      phase += 0.05; // –ó–º–µ–Ω—à–µ–Ω–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å –∑ 0.1

      // –î—É–∂–µ –ª–µ–≥–∫—ñ –∫–æ–ª–∏–≤–∞–Ω–Ω—è –ø—ñ–¥ —á–∞—Å –º–æ–≤–ª–µ–Ω–Ω—è (–ø—Ä–∏—Ä–æ–¥–Ω—ñ—à—ñ)
      const wobbleY = Math.sin(phase) * 0.5; // –ó–º–µ–Ω—à–µ–Ω–æ –∑ 2
      const wobbleX = Math.cos(phase * 0.7) * 0.3; // –ó–º–µ–Ω—à–µ–Ω–æ –∑ 1
      const wobbleZ = Math.sin(phase * 1.3) * 0.1; // –ó–º–µ–Ω—à–µ–Ω–æ –∑ 0.5

      this.livingSystem.livingState.targetRotation.y += wobbleY * 0.05; // –ó–º–µ–Ω—à–µ–Ω–æ –∑ 0.1
      this.livingSystem.livingState.targetRotation.x += wobbleX * 0.05; // –ó–º–µ–Ω—à–µ–Ω–æ –∑ 0.1
      this.livingSystem.livingState.targetRotation.z += wobbleZ * 0.05; // –ó–º–µ–Ω—à–µ–Ω–æ –∑ 0.1

      requestAnimationFrame(animate);
    };

    requestAnimationFrame(animate);
  }

  /**
   * –ó—É–ø–∏–Ω–∫–∞ –∞–Ω—ñ–º–∞—Ü—ñ—ó –º–æ–≤–ª–µ–Ω–Ω—è
   */
  stopSpeakingAnimation() {
    // –ê–Ω—ñ–º–∞—Ü—ñ—è –∑—É–ø–∏–Ω–∏—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É this.state.isSpeaking
  }

  /**
   * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ª—É—Ö–∞—á—ñ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
   */
  setupActivityListeners() {
    // –†—É—Ö –º–∏—à—ñ
    document.addEventListener('mousemove', () => {
      this.state.lastActivityTime = Date.now();
    });

    // –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
    document.addEventListener('keydown', () => {
      this.state.lastActivityTime = Date.now();
    });

    // –ö–ª—ñ–∫–∏
    document.addEventListener('click', () => {
      this.state.lastActivityTime = Date.now();
    });
  }

  /**
   * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è overlay –¥–ª—è –∑–∞—Ç–µ–º–Ω–µ–Ω–Ω—è
   */
  createDarkenOverlay() {
    this.overlay = document.createElement('div');
    this.overlay.id = 'atlas-darken-overlay';
    this.overlay.style.cssText = `
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      background: radial-gradient(circle at center, rgba(0, 0, 0, 0.35) 0%, rgba(0, 0, 0, 0.75) 100%);
      opacity: 0.35;
      pointer-events: none;
      z-index: 9;
      transition: opacity 2s ease-in-out;
    `;
    document.body.appendChild(this.overlay);
  }

  /**
   * –£–≤—ñ–º–∫–Ω—É—Ç–∏ –∑–∞—Ç–µ–º–Ω–µ–Ω–Ω—è
   */
  enableDarken() {
    if (this.overlay) {
      this.overlay.style.opacity = '0.9';
      // –ü–ª–∞–≤–Ω–æ –∑–º–µ–Ω—à—É—î–º–æ —è—Å–∫—Ä–∞–≤—ñ—Å—Ç—å, –ø—ñ–¥—Å–∏–ª—é—î–º–æ –∫–æ–Ω—Ç—Ä–∞—Å—Ç —ñ —Ç—ñ–Ω—ñ –¥–ª—è –¥—Ä–∞–º–∞—Ç–∏—á–Ω–æ–≥–æ –µ—Ñ–µ–∫—Ç—É
      this.modelViewer.style.filter = 'drop-shadow(0 0 140px rgba(0, 255, 127, 0.85)) brightness(0.78) contrast(1.35)';
    }
  }

  /**
   * –í–∏–º–∫–Ω—É—Ç–∏ –∑–∞—Ç–µ–º–Ω–µ–Ω–Ω—è
   */
  disableDarken() {
    this.applyBaselineLighting();
  }

  /**
   * –ó–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ –±–∞–∑–æ–≤–µ –∑–∞—Ç–µ–º–Ω–µ–Ω–Ω—è —Ç–∞ –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è
   */
  applyBaselineLighting() {
    if (!this.overlay) return;

    this.overlay.style.opacity = '0.45';
    this.modelViewer.style.filter = 'drop-shadow(0 0 80px rgba(0, 255, 127, 0.6)) brightness(0.92) contrast(1.25)';
  }

  /**
   * –í–∏–ø–∞–¥–∫–æ–≤–∞ –∑–∞—Ç—Ä–∏–º–∫–∞
   */
  randomDelay(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }

  /**
   * –ó–Ω–∏—â–µ–Ω–Ω—è
   */
  destroy() {
    console.log('üíÄ Destroying Enhanced Living Behavior...');
    if (this.overlay) {
      this.overlay.remove();
    }
  }
}

export default AtlasLivingBehaviorEnhanced;
