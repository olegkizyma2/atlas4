/**
 * ATLAS GLB LIVING SYSTEM v4.0
 *
 * –ü–æ–≤–Ω–æ—Ü—ñ–Ω–Ω–∞ –∂–∏–≤–∞ —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è GLB –º–æ–¥–µ–ª—ñ —à–æ–ª–æ–º–∞ –ê—Ç–ª–∞—Å–∞
 * –†–µ–∞–≥—É—î –Ω–∞ –≤—Å—ñ –ø–æ–¥—ñ—ó —Å–∏—Å—Ç–µ–º–∏ —è–∫ –∂–∏–≤–∞ —Ä–æ–∑—É–º–Ω–∞ —ñ—Å—Ç–æ—Ç–∞
 *
 * Features:
 * - üé≠ –ï–º–æ—Ü—ñ–π–Ω—ñ —Ä–µ–∞–∫—Ü—ñ—ó –Ω–∞ –ø–æ–¥—ñ—ó
 * - üé§ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ TTS (–¥–∏—Ö–∞–Ω–Ω—è –ø—ñ–¥ —á–∞—Å –º–æ–≤–ª–µ–Ω–Ω—è)
 * - üéØ –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–æ—á—ñ —Å–ª—ñ–¥–∫—É—é—Ç—å –∑–∞ –º–∏—à–∫–æ—é)
 * - ‚ö° –†–µ–∞–∫—Ü—ñ—ó –Ω–∞ –∞–≥–µ–Ω—Ç—ñ–≤ (Atlas, –¢–µ—Ç—è–Ω–∞, –ì—Ä–∏—à–∞)
 * - üß† –Ü–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞ –ø–æ–≤–µ–¥—ñ–Ω–∫–∞ (–Ω–∞–≤—á–∞–Ω–Ω—è, –ø–∞–º'—è—Ç—å)
 * - üíö –ü—Ä–∏—Ä–æ–¥–Ω—ñ –∞–Ω—ñ–º–∞—Ü—ñ—ó (–¥–∏—Ö–∞–Ω–Ω—è, –º–µ—Ä–µ—Ö—Ç—ñ–Ω–Ω—è, micro-movements)
 */

export class AtlasGLBLivingSystem {
  constructor(modelViewerSelector, options = {}) {
    this.modelViewer = document.querySelector(modelViewerSelector);

    if (!this.modelViewer) {
      throw new Error(`Model viewer not found: ${modelViewerSelector}`);
    }

    // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
    this.config = {
      // –ñ–∏–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
      enableBreathing: options.enableBreathing !== false,
      enableEyeTracking: options.enableEyeTracking !== false,
      enableEmotions: options.enableEmotions !== false,
      enableTTSSync: options.enableTTSSync !== false,
      enableIntelligence: options.enableIntelligence !== false,

      // –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∞–Ω—ñ–º–∞—Ü—ñ—ó
      breathingSpeed: options.breathingSpeed || 4000, // –º—Å –Ω–∞ —Ü–∏–∫–ª
      eyeTrackingSpeed: options.eyeTrackingSpeed || 0.15,
      rotationSmoothness: options.rotationSmoothness || 0.1,
      emotionIntensity: options.emotionIntensity || 1.0,

      // TTS –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è
      ttsGlowIntensity: options.ttsGlowIntensity || 1.5,
      ttsRotationAmplitude: options.ttsRotationAmplitude || 1.5, // –ó–º–µ–Ω—à–µ–Ω–æ –∑ 3 –¥–æ 1.5

      // –¶–µ–Ω—Ç—Ä –æ–±–µ—Ä—Ç–∞–Ω–Ω—è (–Ω–∞–ª–∞—à—Ç–æ–≤—É–≤–∞–Ω–∏–π)
      rotationCenter: {
        x: options.rotationCenterX || 5,  // –í–∏—â–µ –±–∞–∑–æ–≤–∞ —Ç–æ—á–∫–∞, —â–æ–± –¥–∏–≤–∏–≤—Å—è –±–ª–∏–∂—á–µ –¥–æ –≤–µ—Ä—Ö–Ω—å–æ–≥–æ –∫—Ä–∞—é –µ–∫—Ä–∞–Ω–∞
        y: options.rotationCenterY || -1, // –¢—Ä–æ—Ö–∏ –≤–ª—ñ–≤–æ (–¥–æ –ª–æ–≥—ñ–≤) - theta
        z: options.rotationCenterZ || 0
      },

      // –û—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å
      personality: {
        curiosity: 0.9,
        friendliness: 0.95,
        playfulness: 0.7,
        focus: 0.85,
        ...options.personality
      }
    };

    // –ñ–∏–≤–∏–π —Å—Ç–∞–Ω
    this.livingState = {
      isAlive: false,
      isAwake: false,
      currentEmotion: 'neutral',
      currentAgent: null,
      attentionLevel: 0.5,
      energyLevel: 1.0,

      // –ü–æ–∑–∏—Ü—ñ—è —Ç–∞ –æ—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—è
      targetRotation: { x: 0, y: 0, z: 0 },
      currentRotation: { x: 0, y: 0, z: 0 },
      baseRotation: {
        x: this.config.rotationCenter.x,
        y: this.config.rotationCenter.y,
        z: this.config.rotationCenter.z
      },

      // –ú–∏—à–∞ —ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
      mousePosition: { x: 0, y: 0 },
      isUserPresent: false,
      lastMouseMove: Date.now(),

      // TTS —Å—Ç–∞–Ω
      isSpeaking: false,
      speechIntensity: 0,

      // –ü–∞–º'—è—Ç—å —ñ –Ω–∞–≤—á–∞–Ω–Ω—è
      interactionHistory: [],
      emotionalMemory: new Map(),
      preferredEmotions: new Map(),

      // –ê–Ω—ñ–º–∞—Ü—ñ—è
      breathingPhase: 0,
      idlePhase: 0,
      microMovementPhase: 0
    };

    // –ï–º–æ—Ü—ñ–π–Ω–∞ –ø–∞–ª—ñ—Ç—Ä–∞ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –∞–≥–µ–Ω—Ç—ñ–≤
    this.agentEmotions = {
      'atlas': {
        color: 'rgba(0, 255, 127, 0.8)',
        intensity: 0.9,
        personality: 'wise',
        glow: '#00ff7f'
      },
      'tetyana': {
        color: 'rgba(31, 156, 255, 0.8)',
        intensity: 0.85,
        personality: 'energetic',
        glow: '#1f9cff'
      },
      'grisha': {
        color: 'rgba(255, 170, 51, 0.8)',
        intensity: 0.8,
        personality: 'focused',
        glow: '#ffaa33'
      },
      'user': {
        color: 'rgba(0, 255, 127, 0.9)',
        intensity: 0.95,
        personality: 'attentive',
        glow: '#00ff7f'
      }
    };

    // –°–∏—Å—Ç–µ–º–∏ –∞–Ω—ñ–º–∞—Ü—ñ—ó
    this.animationFrameId = null;
    this.emotionTimeout = null;
    this.ttsAnalyser = null;

    this.init();
  }

  /**
     * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–∏—Å—Ç–µ–º–∏
     */
  async init() {
    console.log('üß¨ Initializing Atlas GLB Living System v4.0...');

    try {
      await this.waitForModelLoad();
      this.setupModelDefaults();
      this.hideInteractionPrompt();
      this.startLivingLoop();
      this.setupEventListeners();
      this.awaken();

      console.log('‚ú® Atlas helmet is now ALIVE!');
    } catch (error) {
      console.error('‚ùå Failed to initialize Living System:', error);
    }
  }

  /**
   * –ü—Ä–∏–º—É—Å–æ–≤–æ –ø—Ä–∏—Ö–æ–≤—É—î–º–æ interaction prompt (–ø–∞–ª–µ—Ü—å)
   */
  hideInteractionPrompt() {
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∞—Ç—Ä–∏–±—É—Ç–∏
    this.modelViewer.interactionPrompt = 'none';
    this.modelViewer.interactionPromptThreshold = 0;
    this.modelViewer.setAttribute('interaction-prompt', 'none');
    this.modelViewer.setAttribute('interaction-prompt-threshold', '0');

    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —ñ –≤–∏–¥–∞–ª—è—î–º–æ DOM –µ–ª–µ–º–µ–Ω—Ç –ø—Ä–æ–º–ø—Ç—É
    setTimeout(() => {
      const promptElement = this.modelViewer.shadowRoot?.querySelector('.interaction-prompt');
      if (promptElement) {
        promptElement.style.display = 'none';
        promptElement.style.opacity = '0';
        promptElement.style.visibility = 'hidden';
        promptElement.remove();
        console.log('‚úÖ Interaction prompt removed');
      }

      // –¢–∞–∫–æ–∂ –ø—Ä–∏—Ö–æ–≤—É—î–º–æ —á–µ—Ä–µ–∑ CSS
      const style = document.createElement('style');
      style.textContent = `
        model-viewer::part(interaction-prompt) {
          display: none !important;
          opacity: 0 !important;
          visibility: hidden !important;
        }
      `;
      document.head.appendChild(style);
    }, 100);

    console.log('üö´ Interaction prompt disabled');
  }

  /**
     * –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è GLB –º–æ–¥–µ–ª—ñ
     */
  async waitForModelLoad() {
    return new Promise((resolve, reject) => {
      if (this.modelViewer.loaded) {
        console.log('‚úÖ GLB model already loaded');
        resolve();
        return;
      }

      console.log('‚è≥ Waiting for GLB model to load...');

      // –ó–±—ñ–ª—å—à–µ–Ω–æ —Ç–∞–π–º–∞—É—Ç –¥–æ 30 —Å–µ–∫—É–Ω–¥
      const timeout = setTimeout(() => {
        console.warn('‚ö†Ô∏è Model load timeout (30s), continuing anyway...');
        console.log('üí° The system will continue to work, but 3D animations may be limited');
        resolve();
      }, 30000);

      this.modelViewer.addEventListener('load', () => {
        clearTimeout(timeout);
        console.log('‚úÖ GLB model loaded successfully');

        // –õ–æ–≥—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –º–æ–¥–µ–ª—å
        const model = this.modelViewer.model;
        if (model) {
          console.log('üì¶ Model info:', {
            hasAnimations: model.animations?.length > 0,
            animationCount: model.animations?.length || 0,
            boundingBox: model.boundingBox
          });
        }

        resolve();
      }, { once: true });

      this.modelViewer.addEventListener('error', (e) => {
        clearTimeout(timeout);
        console.error('‚ùå GLB model load error:', e);
        console.warn('üí° Continuing without 3D model - system will work in 2D mode');
        // –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∑–∞–º—ñ—Å—Ç—å –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è
        resolve();
      }, { once: true });
    });
  }

  /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–µ—Ñ–æ–ª—Ç–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –º–æ–¥–µ–ª—ñ
     */
  setupModelDefaults() {
    // –ü—Ä–∏–º—É—Å–æ–≤–æ –ø–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–µ–ª—å (—è–∫—â–æ –±—É–≤ reveal="manual")
    if (typeof this.modelViewer.dismissPoster === 'function') {
      this.modelViewer.dismissPoster();
    }

    // –û—Ç—Ä–∏–º—É—î–º–æ —Ü–µ–Ω—Ç—Ä –º–æ–¥–µ–ª—ñ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è
    const model = this.modelViewer.model;
    if (model && model.boundingBox) {
      const bbox = model.boundingBox;
      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–µ—Ç–æ–¥–∏ boundingBox –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü–µ–Ω—Ç—Ä—É
      const centerX = (bbox.min.x + bbox.max.x) / 2;
      const centerY = (bbox.min.y + bbox.max.y) / 2;
      const centerZ = (bbox.min.z + bbox.max.z) / 2;

      // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ü–µ–Ω—Ç—Ä –æ–±–µ—Ä—Ç–∞–Ω–Ω—è –Ω–∞ —Ü–µ–Ω—Ç—Ä –º–æ–¥–µ–ª—ñ
      this.modelViewer.cameraTarget = `${centerX}m ${centerY}m ${centerZ}m`;

      console.log('üì¶ Model center:', { x: centerX, y: centerY, z: centerZ });
    } else {
      // –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ bbox, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–π —Ü–µ–Ω—Ç—Ä
      this.modelViewer.cameraTarget = 'auto auto auto';
    }

    // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∫–∞–º–µ—Ä—É –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–∏–≥–ª—è–¥—É —à–æ–ª–æ–º–∞
    this.modelViewer.cameraOrbit = '0deg 75deg 105%';
    this.modelViewer.fieldOfView = '30deg';

    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É —Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –≤—ñ–¥—Å—Ç–∞–Ω—å –∫–∞–º–µ—Ä–∏
    this.modelViewer.minCameraOrbit = 'auto auto 80%';
    this.modelViewer.maxCameraOrbit = 'auto auto 150%';

    // –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è auto-rotate –¥–ª—è –±–∞–∑–æ–≤–æ—ó –∂–∏–≤–æ—Å—Ç—ñ
    this.modelViewer.autoRotate = false; // –í–∏–º–∏–∫–∞—î–º–æ, –±–æ –º–∏ –∫–µ—Ä—É—î–º–æ –≤—Ä—É—á–Ω—É

    // –í–∏–º–∏–∫–∞—î–º–æ interaction-prompt (–ø–∞–ª–µ—Ü—å)
    this.modelViewer.interactionPrompt = 'none';
    this.modelViewer.interactionPromptThreshold = 0;

    console.log('‚öôÔ∏è Model defaults configured');
  }

  /**
     * –ü—Ä–æ–±—É–¥–∂–µ–Ω–Ω—è - –ø–æ—á–∞—Ç–∫–æ–≤–∞ –∞–Ω—ñ–º–∞—Ü—ñ—è
     */
  awaken() {
    console.log('üåÖ Atlas is awakening...');

    this.livingState.isAlive = true;
    this.livingState.isAwake = true;
    this.livingState.currentEmotion = 'awakening';

    // –ü–ª–∞–≤–Ω–∞ –∞–Ω—ñ–º–∞—Ü—ñ—è –ø—Ä–æ–±—É–¥–∂–µ–Ω–Ω—è
    this.setEmotion('curious', 0.8, 3000);

    // –î–æ–¥–∞—î–º–æ –∫–ª–∞—Å –¥–ª—è CSS –∞–Ω—ñ–º–∞—Ü—ñ—ó
    this.modelViewer.classList.add('awakening');

    setTimeout(() => {
      this.modelViewer.classList.remove('awakening');
      this.setEmotion('neutral', 0.5, 1000);
    }, 3000);
  }

  /**
     * –ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª –∂–∏–≤–æ—ó –ø–æ–≤–µ–¥—ñ–Ω–∫–∏
     */
  startLivingLoop() {
    const animate = (timestamp) => {
      if (!this.livingState.isAlive) return;

      const deltaTime = timestamp - (this.lastTimestamp || timestamp);
      this.lastTimestamp = timestamp;

      // –ü—Ä–∏—Ä–æ–¥–Ω—ñ –∞–Ω—ñ–º–∞—Ü—ñ—ó
      if (this.config.enableBreathing) {
        this.updateBreathing(timestamp);
      }

      // Micro-movements –¥–ª—è —Ä–µ–∞–ª—ñ–∑–º—É
      this.updateMicroMovements(timestamp);

      // –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –æ—á–∏–º–∞ (–≤–∏–º–∫–Ω–µ–Ω–æ –ø—ñ–¥ —á–∞—Å –º–æ–≤–ª–µ–Ω–Ω—è)
      if (this.config.enableEyeTracking && this.livingState.isUserPresent && !this.livingState.isSpeaking) {
        this.updateEyeTracking();
      }

      // Idle –∞–Ω—ñ–º–∞—Ü—ñ—ó
      this.updateIdleBehavior(timestamp);

      // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –≤—Å—ñ –æ–±—á–∏—Å–ª–µ–Ω—ñ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—ó
      this.applyTransformations();

      this.animationFrameId = requestAnimationFrame(animate);
    };

    this.animationFrameId = requestAnimationFrame(animate);
    console.log('üîÑ Living loop started');
  }

  /**
     * –î–∏—Ö–∞–Ω–Ω—è - –ø–ª–∞–≤–Ω—ñ –∫–æ–ª–∏–≤–∞–Ω–Ω—è
     */
  updateBreathing(timestamp) {
    const speed = this.config.breathingSpeed;
    const phase = (timestamp % speed) / speed;
    this.livingState.breathingPhase = phase;

    // –ë–∞–∑–æ–≤–µ –¥–∏—Ö–∞–Ω–Ω—è - –ª–µ–≥–∫–µ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è
    const breathIntensity = this.livingState.isSpeaking ? 0.02 : 0.01;
    const breathScale = 1 + Math.sin(phase * Math.PI * 2) * breathIntensity;

    // –ü—ñ–¥ —á–∞—Å –º–æ–≤–ª–µ–Ω–Ω—è - –±—ñ–ª—å—à —ñ–Ω—Ç–µ–Ω—Å–∏–≤–Ω–µ –¥–∏—Ö–∞–Ω–Ω—è
    if (this.livingState.isSpeaking) {
      const speechBreath = 0.015 * this.livingState.speechIntensity;
      this.livingState.targetRotation.z = Math.sin(phase * Math.PI * 4) * 2 * speechBreath;
    }
  }

  /**
     * Micro-movements - –Ω–µ–≤–µ–ª–∏–∫—ñ –≤–∏–ø–∞–¥–∫–æ–≤—ñ —Ä—É—Ö–∏ –¥–ª—è –∂–∏—Ç—Ç—î–≤–æ—Å—Ç—ñ
     */
  updateMicroMovements(timestamp) {
    // –ü–æ–≤—ñ–ª—å–Ω–∏–π –ø–µ—Ä–ª—ñ–Ω-–ø–æ–¥—ñ–±–Ω–∏–π —à—É–º –¥–ª—è –ø—Ä–∏—Ä–æ–¥–Ω–æ—Å—Ç—ñ
    const t = timestamp * 0.0001;

    const microX = Math.sin(t * 1.3) * 0.3;
    const microY = Math.cos(t * 0.7) * 0.2;
    const microZ = Math.sin(t * 0.5) * 0.15;

    this.livingState.baseRotation.x += microX * 0.01;
    this.livingState.baseRotation.y += microY * 0.01;
    this.livingState.baseRotation.z += microZ * 0.01;
  }

  /**
     * –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –æ—á–∏–º–∞ (–ø–æ–≤–æ—Ä–æ—Ç —à–æ–ª–æ–º–∞ –∑–∞ –º–∏—à–∫–æ—é)
     */
  updateEyeTracking() {
    const { mousePosition } = this.livingState;
    const speed = this.config.eyeTrackingSpeed;

    // –û–±—á–∏—Å–ª—é—î–º–æ —Ü—ñ–ª—å–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é (–Ü–ù–í–ï–†–¢–û–í–ê–ù–û –ì–û–†–ò–ó–û–ù–¢–ê–õ–¨)
    const targetY = -mousePosition.x * 25; // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∏–π –ø–æ–≤–æ—Ä–æ—Ç (—ñ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ)
    const targetX = -mousePosition.y * 15; // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∏–π –Ω–∞—Ö–∏–ª

    // –ü–ª–∞–≤–Ω–∏–π –ø–µ—Ä–µ—Ö—ñ–¥
    this.livingState.targetRotation.y += (targetY - this.livingState.targetRotation.y) * speed;
    this.livingState.targetRotation.x += (targetX - this.livingState.targetRotation.x) * speed;
  }

  /**
     * Idle –ø–æ–≤–µ–¥—ñ–Ω–∫–∞ - –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—ñ —Ä—É—Ö–∏ –∫–æ–ª–∏ –Ω—ñ—á–æ–≥–æ –Ω–µ –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è
     * –û–ù–û–í–õ–ï–ù–û: –î–æ–¥–∞–Ω–æ –≤–∏–≥–ª—è–¥–∞–Ω–Ω—è –∑–∞ –º–µ–∂—ñ –µ–∫—Ä–∞–Ω—É —è–∫ –∂–∏–≤–∞ —ñ—Å—Ç–æ—Ç–∞
     */
  updateIdleBehavior(timestamp) {
    const timeSinceLastActivity = timestamp - this.livingState.lastMouseMove;

    if (timeSinceLastActivity > 5000 && !this.livingState.isSpeaking) {
      // –ü–æ–≤—ñ–ª—å–Ω—ñ idle —Ä—É—Ö–∏ (–±–∞–∑–æ–≤—ñ)
      const t = timestamp * 0.00005;
      const idleRotationY = Math.sin(t) * 5;
      const idleRotationX = Math.cos(t * 0.7) * 3;

      this.livingState.targetRotation.y += idleRotationY * 0.02;
      this.livingState.targetRotation.x += idleRotationX * 0.02;

      // –ù–û–í–ê –ü–û–í–ï–î–Ü–ù–ö–ê: –í–∏–≥–ª—è–¥–∞–Ω–Ω—è –∑–∞ –º–µ–∂—ñ –µ–∫—Ä–∞–Ω—É (–∫–æ–∂–Ω—ñ 8-12 —Å–µ–∫—É–Ω–¥)
      if (timeSinceLastActivity > 8000 && Math.random() < 0.0015) {
        this.performCuriousLook(timestamp);
      }
    }

    // –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–µ "–º–æ—Ä–≥–∞–Ω–Ω—è" –µ–º–æ—Ü—ñ—î—é
    if (timeSinceLastActivity > 15000 && Math.random() < 0.001) {
      const idleEmotions = ['contemplative', 'peaceful', 'curious'];
      const emotion = idleEmotions[Math.floor(Math.random() * idleEmotions.length)];
      this.setEmotion(emotion, 0.4, 2000);
    }
  }

  /**
   * –¶—ñ–∫–∞–≤–µ –≤–∏–≥–ª—è–¥–∞–Ω–Ω—è –∑–∞ –º–µ–∂—ñ –µ–∫—Ä–∞–Ω—É —è–∫ –∂–∏–≤–∞ —ñ—Å—Ç–æ—Ç–∞
   */
  performCuriousLook(timestamp) {
    const directions = [
      { y: -45, x: 10, name: '–ª—ñ–≤–æ—Ä—É—á' },   // –î–∏–≤–∏—Ç—å—Å—è –ª—ñ–≤–æ—Ä—É—á
      { y: 45, x: 10, name: '–ø—Ä–∞–≤–æ—Ä—É—á' },   // –î–∏–≤–∏—Ç—å—Å—è –ø—Ä–∞–≤–æ—Ä—É—á
      { y: -30, x: -20, name: '–≤–≥–æ—Ä—É-–ª—ñ–≤–æ' }, // –í–≥–æ—Ä—É-–ª—ñ–≤–æ—Ä—É—á
      { y: 30, x: -20, name: '–≤–≥–æ—Ä—É-–ø—Ä–∞–≤–æ' }, // –í–≥–æ—Ä—É-–ø—Ä–∞–≤–æ—Ä—É—á
      { y: 0, x: 25, name: '–≤–≥–æ—Ä—É' }        // –ü—Ä—è–º–æ –≤–≥–æ—Ä—É
    ];

    const direction = directions[Math.floor(Math.random() * directions.length)];

    // –ü–ª–∞–≤–Ω–∏–π –ø–æ–≤–æ—Ä–æ—Ç –¥–æ —Ü—ñ–ª—å–æ–≤–æ—ó —Ç–æ—á–∫–∏
    const duration = 2000; // 2 —Å–µ–∫—É–Ω–¥–∏ –Ω–∞ –ø–æ–≤–æ—Ä–æ—Ç
    const startY = this.livingState.targetRotation.y;
    const startX = this.livingState.targetRotation.x;
    const startTime = timestamp;

    const animate = (currentTime) => {
      const elapsed = currentTime - startTime;
      const progress = Math.min(elapsed / duration, 1);

      // Ease-in-out –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç—ñ
      const eased = progress < 0.5
        ? 2 * progress * progress
        : 1 - Math.pow(-2 * progress + 2, 2) / 2;

      this.livingState.targetRotation.y = startY + (direction.y - startY) * eased;
      this.livingState.targetRotation.x = startX + (direction.x - startX) * eased;

      // –¢—Ä–∏–º–∞—Ç–∏ –ø–æ–≥–ª—è–¥ 1-2 —Å–µ–∫—É–Ω–¥–∏
      if (progress >= 1 && elapsed < duration + 1500) {
        requestAnimationFrame(animate);
      } else if (progress >= 1) {
        // –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
        this.returnToNeutralLook(currentTime);
      } else {
        requestAnimationFrame(animate);
      }
    };

    requestAnimationFrame(animate);
  }

  /**
   * –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –ø–æ–≥–ª—è–¥—É –ø—ñ—Å–ª—è —Ü—ñ–∫–∞–≤–æ–≥–æ –æ–≥–ª—è–¥–∞–Ω–Ω—è
   */
  returnToNeutralLook(timestamp) {
    const duration = 1500; // 1.5 —Å–µ–∫—É–Ω–¥–∏ –Ω–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
    const startY = this.livingState.targetRotation.y;
    const startX = this.livingState.targetRotation.x;
    const startTime = timestamp;

    const animate = (currentTime) => {
      const elapsed = currentTime - startTime;
      const progress = Math.min(elapsed / duration, 1);

      const eased = 1 - Math.pow(1 - progress, 3); // Ease-out

      this.livingState.targetRotation.y = startY - startY * eased;
      this.livingState.targetRotation.x = startX - startX * eased;

      if (progress < 1) {
        requestAnimationFrame(animate);
      }
    };

    requestAnimationFrame(animate);
  }

  /**
     * –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ–π –¥–æ –º–æ–¥–µ–ª—ñ
     */
  applyTransformations() {
    const smoothness = this.config.rotationSmoothness;

    // –û–±—á–∏—Å–ª—é—î–º–æ —Ü—ñ–ª—å–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
    const targetX = this.livingState.targetRotation.x + this.livingState.baseRotation.x;
    const targetY = this.livingState.targetRotation.y + this.livingState.baseRotation.y;
    const targetZ = this.livingState.targetRotation.z + this.livingState.baseRotation.z;

    // –õ—ñ–Ω—ñ–π–Ω–∞ —ñ–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü—ñ—è (LERP) –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥—É
    this.livingState.currentRotation.x = this.livingState.currentRotation.x + (targetX - this.livingState.currentRotation.x) * smoothness;
    this.livingState.currentRotation.y = this.livingState.currentRotation.y + (targetY - this.livingState.currentRotation.y) * smoothness;
    this.livingState.currentRotation.z = this.livingState.currentRotation.z + (targetZ - this.livingState.currentRotation.z) * smoothness;

    // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –¥–æ camera orbit
    const theta = this.livingState.currentRotation.y;
    const phi = 75 + this.livingState.currentRotation.x;
    const radius = 105;

    this.modelViewer.cameraOrbit = `${theta}deg ${phi}deg ${radius}%`;
  }

  /**
     * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–ª—É—Ö–∞—á—ñ–≤ –ø–æ–¥—ñ–π
     */
  setupEventListeners() {
    // –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –º–∏—à–∫–∏
    document.addEventListener('mousemove', (e) => {
      if (!this.config.enableEyeTracking) return;

      const x = (e.clientX / window.innerWidth) * 2 - 1;
      const y = (e.clientY / window.innerHeight) * 2 - 1;

      this.livingState.mousePosition = { x, y };
      this.livingState.isUserPresent = true;
      this.livingState.lastMouseMove = Date.now();
    });

    // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–ª–∏—à–∏–≤ —Å—Ç–æ—Ä—ñ–Ω–∫—É
    document.addEventListener('mouseleave', () => {
      this.livingState.isUserPresent = false;
      this.setEmotion('lonely', 0.3, 1000);
    });

    document.addEventListener('mouseenter', () => {
      this.livingState.isUserPresent = true;
      this.setEmotion('welcoming', 0.6, 1000);
    });

    console.log('üëÇ Event listeners set up');
  }

  /**
     * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –µ–º–æ—Ü—ñ—ó
     */
  setEmotion(emotion, intensity = 0.7, duration = 1000) {
    if (!this.config.enableEmotions) return;

    // –ó–∞–ø–∞–º'—è—Ç–æ–≤—É—î–º–æ –µ–º–æ—Ü—ñ—é
    this.livingState.currentEmotion = emotion;

    // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –≤—ñ–∑—É–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω
    this.applyEmotionVisuals(emotion, intensity);

    // –ê–Ω—ñ–º–∞—Ü—ñ—è –µ–º–æ—Ü—ñ—ó
    this.animateEmotion(emotion, intensity, duration);

    // –õ–æ–≥—É–≤–∞–Ω–Ω—è (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
    if (this.config.enableIntelligence) {
      this.recordEmotion(emotion, intensity);
    }

    console.log(`üòä Emotion: ${emotion} (${intensity.toFixed(2)})`);
  }

  /**
     * –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –≤—ñ–∑—É–∞–ª—å–Ω–∏—Ö –µ—Ñ–µ–∫—Ç—ñ–≤ –µ–º–æ—Ü—ñ—ó
     */
  applyEmotionVisuals(emotion, intensity) {
    // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –∫–ª–∞—Å–∏ –µ–º–æ—Ü—ñ–π
    this.modelViewer.classList.remove('speaking', 'listening', 'thinking', 'focused');

    // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –∫–ª–∞—Å –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –µ–º–æ—Ü—ñ—ó
    const emotionClassMap = {
      'speaking': 'speaking',
      'listening': 'listening',
      'thinking': 'thinking',
      'curious': 'thinking',
      'focused': 'focused',
      'alert': 'focused',
      'excited': 'speaking'
    };

    const className = emotionClassMap[emotion];
    if (className) {
      this.modelViewer.classList.add(className);
    }
  }

  /**
     * –ê–Ω—ñ–º–∞—Ü—ñ—è –µ–º–æ—Ü—ñ—ó
     */
  animateEmotion(emotion, intensity, duration) {
    // –ï–º–æ—Ü—ñ–π–Ω—ñ —Ä—É—Ö–∏
    const emotionMovements = {
      'joy': { x: 0, y: 5, z: 0 },
      'curious': { x: -5, y: 0, z: 2 },
      'focused': { x: -3, y: 0, z: 0 },
      'alert': { x: -8, y: 0, z: 1 },
      'excited': { x: 0, y: 8, z: 2 },
      'thinking': { x: -4, y: -3, z: 1 },
      'welcoming': { x: 0, y: 3, z: -1 },
      'satisfied': { x: 2, y: 2, z: 0 }
    };

    const movement = emotionMovements[emotion] || { x: 0, y: 0, z: 0 };

    // –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Ä—É—Ö
    this.livingState.targetRotation.x += movement.x * intensity;
    this.livingState.targetRotation.y += movement.y * intensity;
    this.livingState.targetRotation.z += movement.z * intensity;

    // –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –Ω–µ–π—Ç—Ä–∞–ª—ñ
    if (this.emotionTimeout) {
      clearTimeout(this.emotionTimeout);
    }

    this.emotionTimeout = setTimeout(() => {
      this.livingState.targetRotation.x *= 0.5;
      this.livingState.targetRotation.y *= 0.5;
      this.livingState.targetRotation.z *= 0.5;
    }, duration);
  }

  /**
     * –ü–æ—á–∞—Ç–æ–∫ –º–æ–≤–ª–µ–Ω–Ω—è (TTS)
     */
  startSpeaking(agent = 'atlas', intensity = 0.8) {
    console.log(`üé§ ${agent} started speaking`);

    this.livingState.isSpeaking = true;
    this.livingState.speechIntensity = intensity;
    this.livingState.currentAgent = agent;

    // –ï–º–æ—Ü—ñ—è –¥–ª—è –∞–≥–µ–Ω—Ç–∞
    const agentData = this.agentEmotions[agent] || this.agentEmotions['atlas'];
    this.setEmotion('speaking', agentData.intensity, 99999);

    // –î–∏–Ω–∞–º—ñ—á–Ω–∏–π —Ä—É—Ö –ø—ñ–¥ —á–∞—Å –º–æ–≤–ª–µ–Ω–Ω—è
    this.startSpeechAnimation(agent);
  }

  /**
     * –ê–Ω—ñ–º–∞—Ü—ñ—è –ø—ñ–¥ —á–∞—Å –º–æ–≤–ª–µ–Ω–Ω—è
     */
  startSpeechAnimation(agent) {
    const agentData = this.agentEmotions[agent] || this.agentEmotions['atlas'];

    // –õ–µ–≥–∫—ñ –∫–æ–ª–∏–≤–∞–Ω–Ω—è –ø—ñ–¥ —á–∞—Å –º–æ–≤–ª–µ–Ω–Ω—è
    this.speechAnimationInterval = setInterval(() => {
      if (!this.livingState.isSpeaking) return;

      const amplitude = this.config.ttsRotationAmplitude;
      this.livingState.targetRotation.y += (Math.random() - 0.5) * amplitude;
      this.livingState.targetRotation.x += (Math.random() - 0.5) * amplitude * 0.5;
    }, 200);
  }

  /**
     * –ö—ñ–Ω–µ—Ü—å –º–æ–≤–ª–µ–Ω–Ω—è
     */
  stopSpeaking() {
    console.log('üõë Speaking stopped');

    this.livingState.isSpeaking = false;
    this.livingState.speechIntensity = 0;

    if (this.speechAnimationInterval) {
      clearInterval(this.speechAnimationInterval);
    }

    // –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –Ω–µ–π—Ç—Ä–∞–ª—ñ
    this.setEmotion('satisfied', 0.6, 1500);
  }

  /**
   * Compatibility method for TTS start (called from app-refactored.js)
   */
  onTTSStart(text, audioElement) {
    this.startSpeaking(text, audioElement);
  }

  /**
   * Compatibility method for TTS end (called from app-refactored.js)
   */
  onTTSEnd() {
    this.stopSpeaking();
  }

  /**
     * –†–µ–∞–∫—Ü—ñ—è –Ω–∞ –ø–æ–¥—ñ—é —Å–∏—Å—Ç–µ–º–∏
     */
  reactToEvent(eventType, data = {}) {
    console.log(`‚ö° Reacting to event: ${eventType}`, data);

    const reactions = {
      'message-sent': () => this.setEmotion('listening', 0.7, 1500),
      'agent-thinking': () => this.setEmotion('thinking', 0.8, 2000),
      'agent-response': () => this.setEmotion('excited', 0.75, 1200),
      'error': () => this.setEmotion('alert', 1.0, 800),
      'keyword-detected': () => this.setEmotion('alert', 0.9, 600),
      'recording-start': () => this.setEmotion('focused', 0.9, 99999),
      'recording-stop': () => this.setEmotion('processing', 0.7, 1500)
    };

    const reaction = reactions[eventType];
    if (reaction) {
      reaction();
    }
  }

  /**
     * –ó–∞–ø–∏—Å –µ–º–æ—Ü—ñ—ó –≤ –ø–∞–º'—è—Ç—å (–¥–ª—è –Ω–∞–≤—á–∞–Ω–Ω—è)
     */
  recordEmotion(emotion, intensity) {
    const timestamp = Date.now();

    if (!this.livingState.emotionalMemory.has(emotion)) {
      this.livingState.emotionalMemory.set(emotion, []);
    }

    this.livingState.emotionalMemory.get(emotion).push({
      timestamp,
      intensity,
      context: this.livingState.currentAgent
    });

    // –û–±–º–µ–∂—É—î–º–æ —Ä–æ–∑–º—ñ—Ä –ø–∞–º'—è—Ç—ñ
    const history = this.livingState.emotionalMemory.get(emotion);
    if (history.length > 100) {
      history.shift();
    }
  }

  /**
     * –ó–Ω–∏—â–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏
     */
  destroy() {
    console.log('üíÄ Destroying Atlas Living System...');

    this.livingState.isAlive = false;
    this.livingState.isAwake = false;

    if (this.animationFrameId) {
      cancelAnimationFrame(this.animationFrameId);
    }

    if (this.emotionTimeout) {
      clearTimeout(this.emotionTimeout);
    }

    if (this.speechAnimationInterval) {
      clearInterval(this.speechAnimationInterval);
    }

    console.log('üëã Atlas Living System destroyed');
  }
}

export default AtlasGLBLivingSystem;
