/**
 * Dependency Injection Container
 *
 * –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—è–º–∏ –¥–ª—è ATLAS v4.0
 * –ó–∞–±–µ–∑–ø–µ—á—É—î loose coupling, –ª–µ–≥–∫–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ —á—ñ—Ç–∫–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è lifecycle
 *
 * @example
 * const container = new DIContainer();
 *
 * // Register services
 * container.singleton('logger', () => new Logger());
 * container.register('chatManager', (c) => new ChatManager(c.resolve('logger')));
 *
 * // Resolve
 * const chatManager = container.resolve('chatManager');
 */

export class DIContainer {
  constructor() {
    this.services = new Map();
    this.singletons = new Map();
    this.resolving = new Set();
    this.instances = new WeakMap();
  }

  /**
     * –†–µ—î—Å—Ç—Ä—É—î —Å–µ—Ä–≤—ñ—Å –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ
     *
     * @param {string} name - –£–Ω—ñ–∫–∞–ª—å–Ω–µ —ñ–º'—è —Å–µ—Ä–≤—ñ—Å—É
     * @param {Function} factory - –§–∞–±—Ä–∏—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–µ—Ä–≤—ñ—Å—É
     * @param {Object} options - –û–ø—Ü—ñ—ó —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
     * @param {boolean} options.singleton - –ß–∏ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ singleton
     * @param {Array<string>} options.dependencies - –Ø–≤–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
     * @returns {DIContainer} - –î–ª—è chaining
     */
  register(name, factory, options = {}) {
    if (!name || typeof name !== 'string') {
      throw new Error('Service name must be a non-empty string');
    }

    if (typeof factory !== 'function') {
      throw new Error('Factory must be a function');
    }

    if (this.services.has(name)) {
      console.warn(`Service "${name}" is already registered. Overwriting.`);
    }

    this.services.set(name, {
      factory,
      singleton: options.singleton || false,
      dependencies: options.dependencies || [],
      metadata: options.metadata || {}
    });

    return this;
  }

  /**
     * –†–µ—î—Å—Ç—Ä—É—î —Å–µ—Ä–≤—ñ—Å —è–∫ singleton
     *
     * @param {string} name - –£–Ω—ñ–∫–∞–ª—å–Ω–µ —ñ–º'—è —Å–µ—Ä–≤—ñ—Å—É
     * @param {Function} factory - –§–∞–±—Ä–∏—á–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
     * @param {Object} options - –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó
     * @returns {DIContainer}
     */
  singleton(name, factory, options = {}) {
    return this.register(name, factory, { ...options, singleton: true });
  }

  /**
     * –†–µ—î—Å—Ç—Ä—É—î –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è
     *
     * @param {string} name - –Ü–º'—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏
     * @param {*} value - –ó–Ω–∞—á–µ–Ω–Ω—è
     * @returns {DIContainer}
     */
  value(name, value) {
    return this.singleton(name, () => value);
  }

  /**
     * –†–µ–∑–æ–ª–≤–∏—Ç—å —Å–µ—Ä–≤—ñ—Å –∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
     *
     * @param {string} name - –Ü–º'—è —Å–µ—Ä–≤—ñ—Å—É
     * @returns {*} - –Ü–Ω—Å—Ç–∞–Ω—Å —Å–µ—Ä–≤—ñ—Å—É
     * @throws {Error} - –Ø–∫—â–æ —Å–µ—Ä–≤—ñ—Å –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –∞–±–æ circular dependency
     */
  resolve(name) {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ circular dependencies
    if (this.resolving.has(name)) {
      const chain = Array.from(this.resolving).join(' -> ');
      throw new Error(
        `Circular dependency detected: ${chain} -> ${name}`
      );
    }

    // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ singleton —è–∫—â–æ —ñ—Å–Ω—É—î
    if (this.singletons.has(name)) {
      return this.singletons.get(name);
    }

    // –û—Ç—Ä–∏–º—É—î–º–æ –æ–ø–∏—Å —Å–µ—Ä–≤—ñ—Å—É
    const service = this.services.get(name);
    if (!service) {
      throw new Error(
        `Service "${name}" is not registered in the container. ` +
                `Available services: ${Array.from(this.services.keys()).join(', ')}`
      );
    }

    // –†–µ–∑–æ–ª–≤–∏–º–æ —Å–µ—Ä–≤—ñ—Å
    this.resolving.add(name);

    try {
      const instance = service.factory(this);

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ singleton
      if (service.singleton) {
        this.singletons.set(name, instance);
      }

      this.resolving.delete(name);
      return instance;

    } catch (error) {
      this.resolving.delete(name);
      throw new Error(
        `Failed to resolve service "${name}": ${error.message}`
      );
    }
  }

  /**
     * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π —Å–µ—Ä–≤—ñ—Å
     *
     * @param {string} name - –Ü–º'—è —Å–µ—Ä–≤—ñ—Å—É
     * @returns {boolean}
     */
  has(name) {
    return this.services.has(name);
  }

  /**
     * –í–∏–¥–∞–ª—è—î —Å–µ—Ä–≤—ñ—Å –∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
     *
     * @param {string} name - –Ü–º'—è —Å–µ—Ä–≤—ñ—Å—É
     * @returns {boolean} - true —è–∫—â–æ —Å–µ—Ä–≤—ñ—Å –±—É–≤ –≤–∏–¥–∞–ª–µ–Ω–∏–π
     */
  remove(name) {
    this.singletons.delete(name);
    return this.services.delete(name);
  }

  /**
     * –û—á–∏—â–∞—î –≤—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏
     */
  clear() {
    this.services.clear();
    this.singletons.clear();
    this.resolving.clear();
  }

  /**
     * –ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
     *
     * @returns {Array<string>}
     */
  getServices() {
    return Array.from(this.services.keys());
  }

  /**
     * –ü–æ–≤–µ—Ä—Ç–∞—î –º–µ—Ç–∞–¥–∞–Ω—ñ —Å–µ—Ä–≤—ñ—Å—É
     *
     * @param {string} name - –Ü–º'—è —Å–µ—Ä–≤—ñ—Å—É
     * @returns {Object|null}
     */
  getMetadata(name) {
    const service = this.services.get(name);
    return service ? service.metadata : null;
  }

  /**
     * Batch resolution - —Ä–µ–∑–æ–ª–≤–∏—Ç—å –∫—ñ–ª—å–∫–∞ —Å–µ—Ä–≤—ñ—Å—ñ–≤ –æ–¥–Ω–æ—á–∞—Å–Ω–æ
     *
     * @param {Array<string>} names - –ú–∞—Å–∏–≤ —ñ–º–µ–Ω —Å–µ—Ä–≤—ñ—Å—ñ–≤
     * @returns {Object} - –û–±'—î–∫—Ç –∑ —Ä–µ–∑–æ–ª–≤–ª–µ–Ω–∏–º–∏ —Å–µ—Ä–≤—ñ—Å–∞–º–∏
     */
  resolveMany(names) {
    return names.reduce((acc, name) => {
      acc[name] = this.resolve(name);
      return acc;
    }, {});
  }

  /**
     * –°—Ç–≤–æ—Ä—é—î child container –∑ –¥–æ—Å—Ç—É–ø–æ–º –¥–æ parent —Å–µ—Ä–≤—ñ—Å—ñ–≤
     *
     * @returns {DIContainer}
     */
  createChild() {
    const child = new DIContainer();

    // Child –º–æ–∂–µ —Ä–µ–∑–æ–ª–≤–∏—Ç–∏ parent —Å–µ—Ä–≤—ñ—Å–∏
    const originalResolve = child.resolve.bind(child);
    child.resolve = (name) => {
      if (child.has(name)) {
        return originalResolve(name);
      }
      return this.resolve(name);
    };

    return child;
  }

  /**
     * –í–∏–∫–æ–Ω—É—î —Ñ—É–Ω–∫—Ü—ñ—é –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º resolve –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
     *
     * @param {Function} fn - –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
     * @param {Array<string>} dependencies - –ú–∞—Å–∏–≤ —ñ–º–µ–Ω –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
     * @returns {*} - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó
     */
  call(fn, dependencies = []) {
    const resolvedDeps = dependencies.map(name => this.resolve(name));
    return fn(...resolvedDeps);
  }

  /**
     * –û—Ç—Ä–∏–º—É—î –≥—Ä–∞—Ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π —Å–µ—Ä–≤—ñ—Å—É
     *
     * @param {string} name - –Ü–º'—è —Å–µ—Ä–≤—ñ—Å—É
     * @param {Set} visited - –í—ñ–¥–≤—ñ–¥–∞–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏ (–¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è —Ü–∏–∫–ª—ñ–≤)
     * @returns {Object} - –ì—Ä–∞—Ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
     */
  getDependencyGraph(name, visited = new Set()) {
    if (visited.has(name)) {
      return { name, circular: true };
    }

    visited.add(name);

    const service = this.services.get(name);
    if (!service) {
      return { name, error: 'Not registered' };
    }

    const dependencies = service.dependencies.map(depName =>
      this.getDependencyGraph(depName, new Set(visited))
    );

    return {
      name,
      singleton: service.singleton,
      dependencies
    };
  }

  /**
     * Debug - –≤–∏–≤–æ–¥–∏—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
     */
  debug() {
    console.group('üîß DI Container Debug');
    console.log('Registered services:', this.getServices());
    console.log('Singletons:', Array.from(this.singletons.keys()));
    console.log('Currently resolving:', Array.from(this.resolving));
    console.groupEnd();
  }
}

/**
 * –ì–ª–æ–±–∞–ª—å–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è ATLAS
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —è–∫ singleton –¥–ª—è –≤—Å—å–æ–≥–æ –¥–æ–¥–∞—Ç–∫—É
 */
export const container = new DIContainer();

/**
 * Helper —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è service provider
 *
 * @param {DIContainer} container - DI Container
 * @returns {Function} - Service provider function
 */
export function createServiceProvider(container) {
  return {
    register(name, factory, options) {
      container.register(name, factory, options);
      return this;
    },

    singleton(name, factory, options) {
      container.singleton(name, factory, options);
      return this;
    },

    value(name, value) {
      container.value(name, value);
      return this;
    }
  };
}

export default container;
