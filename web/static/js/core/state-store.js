/**
 * State Store - Redux-like State Management –¥–ª—è ATLAS v4.0
 *
 * –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å—Ç–∞–Ω–æ–º –∑ –ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–∏–º–∏ –∑–º—ñ–Ω–∞–º–∏
 * –ó–∞–±–µ–∑–ø–µ—á—É—î single source of truth –¥–ª—è –≤—Å—ñ—î—ó –ø—Ä–æ–≥—Ä–∞–º–∏
 *
 * @example
 * const store = new StateStore(initialState);
 *
 * // Register reducers
 * store.registerReducer('conversation', conversationReducer);
 *
 * // Subscribe to changes
 * store.subscribe((state, prevState) => {
 *     console.log('State changed:', state);
 * });
 *
 * // Dispatch actions
 * store.dispatch({ type: 'CONVERSATION_MODE_ACTIVATED' });
 */

export class StateStore {
  constructor(initialState = {}) {
    this.state = this.deepFreeze(initialState);
    this.reducers = new Map();
    this.listeners = new Set();
    this.middleware = [];
    this.history = [];
    this.maxHistorySize = 50;
    this.isDispatching = false;
  }

  /**
     * –†–µ—î—Å—Ç—Ä—É—î reducer –¥–ª—è –º–æ–¥—É–ª—è
     *
     * @param {string} key - –ö–ª—é—á –≤ state (–Ω–∞–∑–≤–∞ –º–æ–¥—É–ª—è)
     * @param {Function} reducer - –§—É–Ω–∫—Ü—ñ—è reducer (state, action) => newState
     */
  registerReducer(key, reducer) {
    if (typeof reducer !== 'function') {
      throw new Error(`Reducer for "${key}" must be a function`);
    }

    this.reducers.set(key, reducer);

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ state –¥–ª—è —Ü—å–æ–≥–æ reducer
    if (!(key in this.state)) {
      this.state = {
        ...this.state,
        [key]: reducer(undefined, { type: '@@INIT' })
      };
    }
  }

  /**
     * –î–æ–¥–∞—î middleware
     *
     * @param {Function} middleware - (store) => (next) => (action) => result
     */
  use(middleware) {
    if (typeof middleware !== 'function') {
      throw new Error('Middleware must be a function');
    }
    this.middleware.push(middleware);
  }

  /**
     * –í—ñ–¥–ø—Ä–∞–≤–ª—è—î action –¥–ª—è –∑–º—ñ–Ω–∏ —Å—Ç–∞–Ω—É
     *
     * @param {Object} action - Action –æ–±'—î–∫—Ç –∑ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º –ø–æ–ª–µ–º type
     * @returns {Object} - Action —â–æ –±—É–≤ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∏–π
     */
  dispatch(action) {
    if (!action || typeof action !== 'object') {
      throw new Error('Action must be an object');
    }

    if (!action.type) {
      throw new Error('Action must have a "type" property');
    }

    if (this.isDispatching) {
      throw new Error('Reducers may not dispatch actions');
    }

    try {
      this.isDispatching = true;

      // Apply middleware
      let dispatchChain = (act) => this._dispatch(act);

      for (let i = this.middleware.length - 1; i >= 0; i--) {
        dispatchChain = this.middleware[i](this)(dispatchChain);
      }

      return dispatchChain(action);

    } finally {
      this.isDispatching = false;
    }
  }

  /**
     * –í–Ω—É—Ç—Ä—ñ—à–Ω—è —Ñ—É–Ω–∫—Ü—ñ—è dispatch
     *
     * @private
     */
  _dispatch(action) {
    const prevState = this.state;

    // Apply all reducers
    const nextState = {};
    for (const [key, reducer] of this.reducers.entries()) {
      nextState[key] = reducer(prevState[key], action);
    }

    this.state = this.deepFreeze(nextState);

    // Add to history
    this.addToHistory(action, prevState, this.state);

    // Notify listeners if state changed
    if (prevState !== this.state) {
      this.notifyListeners(this.state, prevState, action);
    }

    return action;
  }

  /**
     * –ü—ñ–¥–ø–∏—Å—É—î—Ç—å—Å—è –Ω–∞ –∑–º—ñ–Ω–∏ —Å—Ç–∞–Ω—É
     *
     * @param {Function} listener - (state, prevState, action) => void
     * @returns {Function} - Unsubscribe function
     */
  subscribe(listener) {
    if (typeof listener !== 'function') {
      throw new Error('Listener must be a function');
    }

    this.listeners.add(listener);

    // Return unsubscribe function
    return () => {
      this.listeners.delete(listener);
    };
  }

  /**
     * –ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
     *
     * @returns {Object} - –ü–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω (frozen)
     */
  getState() {
    return this.state;
  }

  /**
     * –ü–æ–≤–µ—Ä—Ç–∞—î —á–∞—Å—Ç–∏–Ω—É —Å—Ç–∞–Ω—É –∑–∞ –∫–ª—é—á–µ–º
     *
     * @param {string} key - –ö–ª—é—á –º–æ–¥—É–ª—è
     * @returns {*} - –°—Ç–∞–Ω –º–æ–¥—É–ª—è
     */
  getModuleState(key) {
    return this.state[key];
  }

  /**
     * –°–ø–æ–≤—ñ—â–∞—î –≤—Å—ñ—Ö listeners –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞–Ω—É
     *
     * @private
     */
  notifyListeners(state, prevState, action) {
    for (const listener of this.listeners) {
      try {
        listener(state, prevState, action);
      } catch (error) {
        console.error('Error in state listener:', error);
      }
    }
  }

  /**
     * –î–æ–¥–∞—î –∑–∞–ø–∏—Å –≤ —ñ—Å—Ç–æ—Ä—ñ—é
     *
     * @private
     */
  addToHistory(action, prevState, nextState) {
    this.history.push({
      action,
      prevState,
      nextState,
      timestamp: Date.now()
    });

    // –û–±–º–µ–∂—É—î–º–æ —Ä–æ–∑–º—ñ—Ä —ñ—Å—Ç–æ—Ä—ñ—ó
    if (this.history.length > this.maxHistorySize) {
      this.history.shift();
    }
  }

  /**
     * –ü–æ–≤–µ—Ä—Ç–∞—î —ñ—Å—Ç–æ—Ä—ñ—é –∑–º—ñ–Ω
     *
     * @param {number} limit - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Å—ñ–≤
     * @returns {Array} - –Ü—Å—Ç–æ—Ä—ñ—è –∑–º—ñ–Ω
     */
  getHistory(limit = 10) {
    return this.history.slice(-limit);
  }

  /**
     * –ì–ª–∏–±–æ–∫–µ –∑–∞–º–æ—Ä–æ–∂—É–≤–∞–Ω–Ω—è –æ–±'—î–∫—Ç–∞
     *
     * @private
     */
  deepFreeze(obj) {
    if (typeof obj !== 'object' || obj === null) {
      return obj;
    }

    Object.freeze(obj);

    Object.getOwnPropertyNames(obj).forEach(prop => {
      if (obj[prop] !== null &&
                (typeof obj[prop] === 'object' || typeof obj[prop] === 'function') &&
                !Object.isFrozen(obj[prop])) {
        this.deepFreeze(obj[prop]);
      }
    });

    return obj;
  }

  /**
     * –°—Ç–≤–æ—Ä—é—î selector –¥–ª—è –æ–±—á–∏—Å–ª—é–≤–∞–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å
     *
     * @param {Function} selectorFn - (state) => value
     * @returns {Function} - Memoized selector
     */
  createSelector(selectorFn) {
    let lastState = null;
    let lastResult = null;

    return () => {
      if (this.state !== lastState) {
        lastState = this.state;
        lastResult = selectorFn(this.state);
      }
      return lastResult;
    };
  }

  /**
     * Replays actions from history
     *
     * @param {number} steps - –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—Ä–æ–∫—ñ–≤ –Ω–∞–∑–∞–¥
     */
  replay(steps = 1) {
    if (steps > this.history.length) {
      steps = this.history.length;
    }

    const targetHistory = this.history.slice(0, -steps);

    // Reset state
    this.state = {};
    this.history = [];

    // Replay actions
    for (const record of targetHistory) {
      this.dispatch(record.action);
    }
  }

  /**
     * Debug - –≤–∏–≤–æ–¥–∏—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ store
     */
  debug() {
    console.group('üè™ State Store Debug');
    console.log('Current state:', this.state);
    console.log('Registered reducers:', Array.from(this.reducers.keys()));
    console.log('Listeners count:', this.listeners.size);
    console.log('Middleware count:', this.middleware.length);
    console.log('History size:', this.history.length);
    console.groupEnd();
  }

  /**
     * –û—á–∏—â—É—î store
     */
  clear() {
    this.listeners.clear();
    this.history = [];
  }
}

/**
 * Helper —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è actions
 */
export const actionCreators = {
  /**
     * –°—Ç–≤–æ—Ä—é—î action creator
     *
     * @param {string} type - –¢–∏–ø action
     * @returns {Function} - Action creator function
     */
  create(type) {
    return (payload = {}) => ({
      type,
      payload,
      timestamp: Date.now()
    });
  },

  /**
     * –°—Ç–≤–æ—Ä—é—î async action creator (thunk)
     *
     * @param {Function} asyncFn - Async function
     * @returns {Function} - Thunk action creator
     */
  async(asyncFn) {
    return (store) => (next) => (action) => {
      if (typeof action === 'function') {
        return action(store.dispatch, store.getState);
      }
      return next(action);
    };
  }
};

/**
 * Middleware –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è actions
 */
export const loggingMiddleware = (store) => (next) => (action) => {
  console.group(`Action: ${action.type}`);
  console.log('Payload:', action.payload);
  console.log('Previous state:', store.getState());

  const result = next(action);

  console.log('Next state:', store.getState());
  console.groupEnd();

  return result;
};

/**
 * Middleware –¥–ª—è dev tools
 */
export const devToolsMiddleware = (store) => (next) => (action) => {
  if (window.__REDUX_DEVTOOLS_EXTENSION__) {
    window.__REDUX_DEVTOOLS_EXTENSION__.send(action, store.getState());
  }
  return next(action);
};

/**
 * –ì–ª–æ–±–∞–ª—å–Ω–∏–π store –¥–ª—è ATLAS
 */
export const store = new StateStore({
  conversation: {},
  model3d: {},
  voice: {},
  chat: {},
  system: {}
});

export default store;
