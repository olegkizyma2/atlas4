/**
 * –î—ñ–∞–≥–Ω–æ—Å—Ç–∏—á–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ 3D –º–æ–¥–µ–ª—ñ —Ç–∞ UI
 */

// –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è DOM
document.addEventListener('DOMContentLoaded', () => {
  setTimeout(() => {
    console.log('üîç === –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê 3D –ú–û–î–ï–õ–Ü –¢–ê UI ===');
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ model-viewer
    const modelViewer = document.getElementById('model-viewer');
    console.log('üì¶ Model Viewer:', modelViewer ? '‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ' : '‚ùå –ù–ï –ó–ù–ê–ô–î–ï–ù–û');
    
    if (modelViewer) {
      console.log('  - Display:', window.getComputedStyle(modelViewer).display);
      console.log('  - Visibility:', window.getComputedStyle(modelViewer).visibility);
      console.log('  - Opacity:', window.getComputedStyle(modelViewer).opacity);
      console.log('  - Z-index:', window.getComputedStyle(modelViewer).zIndex);
      console.log('  - Pointer-events:', window.getComputedStyle(modelViewer).pointerEvents);
      console.log('  - Loaded:', modelViewer.loaded);
      console.log('  - Model:', modelViewer.model ? '‚úÖ' : '‚ùå');
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ model-container
    const modelContainer = document.querySelector('.model-container');
    console.log('üì¶ Model Container:', modelContainer ? '‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ' : '‚ùå –ù–ï –ó–ù–ê–ô–î–ï–ù–û');
    
    if (modelContainer) {
      console.log('  - Display:', window.getComputedStyle(modelContainer).display);
      console.log('  - Visibility:', window.getComputedStyle(modelContainer).visibility);
      console.log('  - Opacity:', window.getComputedStyle(modelContainer).opacity);
      console.log('  - Z-index:', window.getComputedStyle(modelContainer).zIndex);
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ input
    const messageInput = document.getElementById('message-input');
    console.log('üí¨ Message Input:', messageInput ? '‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ' : '‚ùå –ù–ï –ó–ù–ê–ô–î–ï–ù–û');
    
    if (messageInput) {
      console.log('  - Display:', window.getComputedStyle(messageInput).display);
      console.log('  - Visibility:', window.getComputedStyle(messageInput).visibility);
      console.log('  - Pointer-events:', window.getComputedStyle(messageInput).pointerEvents);
      console.log('  - Disabled:', messageInput.disabled);
      console.log('  - ReadOnly:', messageInput.readOnly);
      
      // –¢–µ—Å—Ç —Ñ–æ–∫—É—Å—É
      try {
        messageInput.focus();
        console.log('  - Focus test: ‚úÖ –ü—Ä–∞—Ü—é—î');
      } catch (e) {
        console.log('  - Focus test: ‚ùå –ü–æ–º–∏–ª–∫–∞:', e.message);
      }
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ input-container
    const inputContainer = document.querySelector('.input-container');
    console.log('üí¨ Input Container:', inputContainer ? '‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ' : '‚ùå –ù–ï –ó–ù–ê–ô–î–ï–ù–û');
    
    if (inputContainer) {
      console.log('  - Display:', window.getComputedStyle(inputContainer).display);
      console.log('  - Pointer-events:', window.getComputedStyle(inputContainer).pointerEvents);
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ chat-panel
    const chatPanel = document.querySelector('.minimal-chat-panel');
    console.log('üí¨ Chat Panel:', chatPanel ? '‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ' : '‚ùå –ù–ï –ó–ù–ê–ô–î–ï–ù–û');
    
    if (chatPanel) {
      console.log('  - Display:', window.getComputedStyle(chatPanel).display);
      console.log('  - Z-index:', window.getComputedStyle(chatPanel).zIndex);
      console.log('  - Pointer-events:', window.getComputedStyle(chatPanel).pointerEvents);
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ managers
    if (window.atlasApp) {
      console.log('üéÆ Atlas App:', '‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ');
      console.log('  - glbLivingSystem:', window.atlasApp.managers.glbLivingSystem ? '‚úÖ' : '‚ùå');
      console.log('  - livingBehavior:', window.atlasApp.managers.livingBehavior ? '‚úÖ' : '‚ùå');
      console.log('  - enhancedBehavior:', window.atlasApp.managers.enhancedBehavior ? '‚úÖ' : '‚ùå');
      console.log('  - ttsVisualization:', window.atlasApp.managers.ttsVisualization ? '‚úÖ' : '‚ùå');
      
      if (window.atlasApp.managers.glbLivingSystem) {
        const living = window.atlasApp.managers.glbLivingSystem;
        console.log('  - Living state:', {
          isAlive: living.livingState.isAlive,
          isAwake: living.livingState.isAwake,
          isSpeaking: living.livingState.isSpeaking
        });
      }
    } else {
      console.log('üéÆ Atlas App:', '‚ùå –ù–ï –ó–ù–ê–ô–î–ï–ù–û');
    }
    
    console.log('üîç === –ö–Ü–ù–ï–¶–¨ –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ò ===');
  }, 2000); // –ß–µ–∫–∞—î–º–æ 2 —Å–µ–∫—É–Ω–¥–∏ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
});
