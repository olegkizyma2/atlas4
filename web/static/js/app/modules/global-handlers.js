/**
 * ATLAS Global Handlers - v4.0
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –æ–±—Ä–æ–±–∫—É –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –ø–æ–¥—ñ–π —Ç–∞ –ø–æ–º–∏–ª–æ–∫
 */

import { logger } from '../core/logger.js';

export class GlobalHandlers {
  constructor(managers, uiManager) {
    this.logger = new logger.constructor('GLOBAL-HANDLERS');
    this.managers = managers;
    this.uiManager = uiManager;
  }

  setupGlobalHandlers() {
    this.logger.info('üõ°Ô∏è Setting up global handlers...');

    // –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å
    this.setupUnloadProtection();

    // –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
    this.setupErrorHandlers();

    // –û–±—Ä–æ–±–∫–∞ –≤—Ç—Ä–∞—Ç–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è
    this.setupConnectionHandlers();

    this.logger.info('‚úÖ Global handlers setup complete');
  }

  setupUnloadProtection() {
    window.addEventListener('beforeunload', (e) => {
      const pageAge = Date.now() - performance.timing.navigationStart;
      const isStreaming = this.managers.chat && this.managers.chat.isStreaming;
      const isRecentLoad = pageAge < 10000;

      if (isStreaming || isRecentLoad) {
        this.logger.warn(`Preventing reload: streaming=${isStreaming}, recentLoad=${isRecentLoad}`);

        const message = isStreaming ?
          '–ó–∞—á–µ–∫–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...' :
          '–ó–∞—á–µ–∫–∞–π—Ç–µ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥...';

        e.preventDefault();
        e.returnValue = message;
        return message;
      }
    });
  }

  setupErrorHandlers() {
    window.addEventListener('error', (e) => {
      this.logger.error('Global error', e.error?.message || 'Unknown error');
      this.uiManager.showErrorMessage(`–ü–æ–º–∏–ª–∫–∞: ${e.error?.message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞'}`);
    });

    window.addEventListener('unhandledrejection', (e) => {
      // –Ü–≥–Ω–æ—Ä—É—î–º–æ AbortError —è–∫ –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏
      if (e.reason?.name === 'AbortError' || e.reason?.message?.includes('aborted')) {
        this.logger.debug('Ignoring AbortError from timeout/user action');
        e.preventDefault(); // Prevent console error
        return;
      }

      this.logger.error('Unhandled promise rejection', e.reason?.message || 'Unknown reason');
      this.uiManager.showErrorMessage(`Promise –ø–æ–º–∏–ª–∫–∞: ${e.reason?.message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø—Ä–∏—á–∏–Ω–∞'}`);
    });
  }

  setupConnectionHandlers() {
    window.addEventListener('online', () => {
      this.logger.info('Connection restored');
      this.uiManager.showSuccessMessage('–ó\'—î–¥–Ω–∞–Ω–Ω—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ');
    });

    window.addEventListener('offline', () => {
      this.logger.warn('Connection lost');
      this.uiManager.showErrorMessage('–ó\'—î–¥–Ω–∞–Ω–Ω—è –≤—Ç—Ä–∞—á–µ–Ω–æ');
    });
  }
}
