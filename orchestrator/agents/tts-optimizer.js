/**
 * TTS OPTIMIZER AGENT (—Å—Ç–∞–∂–µ -3)
 * –°–∏—Å—Ç–µ–º–Ω–∏–π –∞–≥–µ–Ω—Ç –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –∞–≥–µ–Ω—Ç—ñ–≤ –¥–ª—è TTS –æ–∑–≤—É—á–∫–∏
 *
 * –†–æ–ª—å: –°–∫–æ—Ä–æ—á–µ–Ω–Ω—è —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è —Ç–µ–∫—Å—Ç—É –¥–ª—è —à–≤–∏–¥–∫–æ—ó –æ–∑–≤—É—á–∫–∏
 * –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∞–≥–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥ TTS
 */

import logger from '../utils/logger.js';
import { TTS_CONFIG } from '../../config/global-config.js';

class TTSOptimizer {
  constructor() {
    this.name = 'tts-optimizer';
    this.signature = '[TTS-OPT]';

    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑ –Ω–æ–≤–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
    this.config = TTS_CONFIG.optimization || {
      enabled: true,
      sentences: { maxSentences: 5, minSentences: 3 },
      length: { maxLength: 500, minLength: 20 },
      fallback: { onError: true, preserveAgentTone: true },
      debug: { enabled: false }
    };

    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
    this.maxSentences = this.config.sentences?.maxSentences || 5;
    this.minSentences = this.config.sentences?.minSentences || 3;

    // –ù–æ–≤–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –¥–ª—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ª—ñ–º—ñ—Ç—É
    this.customCharacterLimit = null; // –ö–∞—Å—Ç–æ–º–Ω–∏–π –ª—ñ–º—ñ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  }

  /**
   * –û–ø—Ç–∏–º—ñ–∑—É—î —Ç–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è TTS
   * @param {string} originalText - –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
   * @param {string} agentName - –Ü–º'—è –∞–≥–µ–Ω—Ç–∞, —è–∫–∏–π —Å—Ç–≤–æ—Ä–∏–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
   * @param {Object} options - –î–æ–¥–∞—Ç–∫–æ–≤—ñ –æ–ø—Ü—ñ—ó
   * @returns {string} - –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è TTS
   */
  async optimizeForTTS(originalText, agentName, options = {}) {
    try {
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è
      if (!this.config.enabled) {
        if (this.config.debugMode) {
          logger.info(`${this.signature} –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –≤—ñ–¥–∫–ª—é—á–µ–Ω–∞ —É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó`);
        }
        return originalText;
      }

      // –ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–õ–ò–í–ê –ü–ï–†–ï–í–Ü–†–ö–ê: –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è task mode
      const mode = options.mode || 'chat';
      const chatModeOptimizationEnabled = this.config.modes?.chat?.enabled || false;

      if (mode === 'chat' && !chatModeOptimizationEnabled) {
        if (this.config.debug?.enabled) {
          logger.info(`${this.signature} –ü–†–û–ü–£–°–ö–ê–Ñ–ú–û –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é –¥–ª—è chat —Ä–µ–∂–∏–º—É (–∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ –≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó)`);
        }
        return originalText;
      }

      if (mode === 'task') {
        const taskModeOptimizationEnabled = this.config.modes?.task?.enabled !== false; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º —É–≤—ñ–º–∫–Ω–µ–Ω–æ
        if (!taskModeOptimizationEnabled) {
          if (this.config.debug?.enabled) {
            logger.info(`${this.signature} –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –≤—ñ–¥–∫–ª—é—á–µ–Ω–∞ –¥–ª—è task —Ä–µ–∂–∏–º—É –≤ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó`);
          }
          return originalText;
        }
      }

      if (this.config.debug?.enabled) {
        logger.info(`${this.signature} ‚úÖ –†–û–ó–ü–û–ß–ò–ù–ê–Ñ–ú–û –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—é –¥–ª—è –∞–≥–µ–Ω—Ç–∞: ${agentName} (—Ä–µ–∂–∏–º: ${mode})`);
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ª—ñ–º—ñ—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      const activeCharacterLimit = this._getActiveCharacterLimit();

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–µ —Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∞–±–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ª—ñ–º—ñ—Ç—É
      if (!this._needsOptimizationByLength(originalText, activeCharacterLimit)) {
        if (this.config.debugMode) {
          logger.info(`${this.signature} –¢–µ–∫—Å—Ç –≤ –º–µ–∂–∞—Ö –ª—ñ–º—ñ—Ç—É (${originalText.length}/${activeCharacterLimit} —Å–∏–º–≤–æ–ª—ñ–≤)`);
        }

        // –í—Å–µ –∂ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–µ—á–µ–Ω—å
        if (this.isTextShortEnough(originalText)) {
          return originalText;
        }
      }

      // –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —Ä–µ—á–µ–Ω–Ω—è
      const sentences = this.splitIntoSentences(originalText);

      // –Ø–∫—â–æ —Ä–µ—á–µ–Ω—å –º–µ–Ω—à–µ –º–∞–∫—Å–∏–º—É–º—É —ñ –≤ –º–µ–∂–∞—Ö –ª—ñ–º—ñ—Ç—É —Å–∏–º–≤–æ–ª—ñ–≤, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —è–∫ —î
      if (sentences.length <= this.maxSentences && !this._needsOptimizationByLength(originalText, activeCharacterLimit)) {
        return originalText;
      }

      // –û–ø—Ç–∏–º—ñ–∑—É—î–º–æ —Ç–µ–∫—Å—Ç –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ª—ñ–º—ñ—Ç—É
      const optimized = await this.intelligentSummarize(sentences, agentName, {
        ...options,
        characterLimit: activeCharacterLimit
      });

      logger.info(`${this.signature} –¢–µ–∫—Å—Ç –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ: ${originalText.length} -> ${optimized.length} —Å–∏–º–≤–æ–ª—ñ–≤`);

      return optimized;

    } catch (error) {
      logger.error(`${this.signature} –ü–æ–º–∏–ª–∫–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó TTS:`, error);
      // –£ –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–µ—Ä—à—ñ 3 —Ä–µ—á–µ–Ω–Ω—è
      return this.getFallbackText(originalText);
    }
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —Ç–µ–∫—Å—Ç –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—Ä–æ—Ç–∫–∏–π
   */
  isTextShortEnough(text) {
    const sentences = this.splitIntoSentences(text);
    return sentences.length <= this.maxSentences &&
           text.length <= this.config.maxLength &&
           text.length >= this.config.minLength;
  }

  /**
   * –†–æ–∑–±–∏–≤–∞—î —Ç–µ–∫—Å—Ç –Ω–∞ —Ä–µ—á–µ–Ω–Ω—è
   */
  splitIntoSentences(text) {
    if (!text || typeof text !== 'string') return [];

    // –û—á–∏—â–∞—î–º–æ –≤—ñ–¥ markdown —Ç–∞ HTML —Ç–µ–≥—ñ–≤
    const cleanText = text
      .replace(/\*\*(.*?)\*\*/g, '$1') // –ñ–∏—Ä–Ω–∏–π —Ç–µ–∫—Å—Ç
      .replace(/\*(.*?)\*/g, '$1')     // –ö—É—Ä—Å–∏–≤
      .replace(/<[^>]*>/g, '')         // HTML —Ç–µ–≥–∏
      .replace(/```[\s\S]*?```/g, '')  // –ë–ª–æ–∫–∏ –∫–æ–¥—É
      .replace(/`([^`]*)`/g, '$1');    // –Ü–Ω–ª–∞–π–Ω –∫–æ–¥

    // –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ —Ä–µ—á–µ–Ω–Ω—è –±—ñ–ª—å—à —Ä–æ–∑—É–º–Ω–æ
    const sentences = cleanText
      .split(/[.!?]+/)
      .map(s => s.trim())
      .filter(s => s.length > 5) // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞–Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫—ñ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∏
      .map(s => {
        // –î–æ–¥–∞—î–º–æ –∫—Ä–∞–ø–∫—É —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ä–µ—á–µ–Ω–Ω—è –Ω–µ –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è –Ω–∞ —Ä–æ–∑–¥—ñ–ª–æ–≤–∏–π –∑–Ω–∞–∫
        if (!/[.!?]$/.test(s)) {
          return s + '.';
        }
        return s;
      });

    return sentences.filter(s => s.length > 5); // –ü–æ–≤—Ç–æ—Ä–Ω–æ —Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫—Ä–∞–ø–æ–∫
  }

  /**
   * –Ü–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–µ —Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
   */
  async intelligentSummarize(sentences, agentName, options = {}) {
    try {
      // –°–ü–†–û–ë–£–Ñ–ú–û LLM –¢–Ü–õ–¨–ö–ò –Ø–ö–©–û –î–û–°–¢–£–ü–ù–ò–ô
      const fallbackLLMAvailable = await this.checkFallbackLLMAvailability();

      if (fallbackLLMAvailable) {
        // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è
        const { default: TTSPrompt } = await import('../../prompts/system/tts_optimization.js');

        // –§–æ—Ä–º—É—î–º–æ –ø—Ä–æ–º–ø—Ç
        const prompt = TTSPrompt.generatePrompt(sentences.join(' '), agentName, {
          maxSentences: this.maxSentences,
          minSentences: this.minSentences,
          ...options
        });

        // –í–∏–∫–ª–∏–∫–∞—î–º–æ LLM –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fallback LLM)
        const { default: fallbackLLM } = await import('../ai/fallback-llm.js');
        const result = await fallbackLLM.chatCompletion([
          { role: 'user', content: prompt }
        ], {
          temperature: 0.3, // –ù–∏–∑—å–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ
          max_tokens: 200,
          timeout: 10000,
          ...options
        });

        if (result && result.choices && result.choices[0] && result.choices[0].message) {
          // –û—á–∏—â–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          const optimized = this.cleanOptimizedText(result.choices[0].message.content);

          // –í–∞–ª—ñ–¥—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          if (this.validateOptimizedText(optimized)) {
            logger.info(`${this.signature} ‚úÖ LLM –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞: ${sentences.join(' ').length} -> ${optimized.length} —Å–∏–º–≤–æ–ª—ñ–≤`);
            return optimized;
          } else {
            throw new Error('–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç LLM –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó');
          }
        } else {
          throw new Error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ LLM');
        }
      } else {
        logger.info(`${this.signature} üîÑ LLM –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —Ä–æ–∑—É–º–Ω–∏–π fallback`);
        throw new Error('LLM –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
      }

    } catch (error) {
      logger.warn(`${this.signature} –ü–æ–º–∏–ª–∫–∞ LLM –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó (${error.message}), –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é —Ä–æ–∑—É–º–Ω–∏–π fallback`);
      return this.getSmartFallbackText(sentences.join(' '));
    }
  }

  /**
   * –û—á–∏—â–∞—î –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç
   */
  cleanOptimizedText(text) {
    return text
      .trim()
      .replace(/^["']|["']$/g, '') // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –ª–∞–ø–∫–∏ –Ω–∞ –ø–æ—á–∞—Ç–∫—É/–∫—ñ–Ω—Ü—ñ
      .replace(/\n+/g, ' ')        // –ó–∞–º—ñ–Ω—é—î–º–æ –ø–µ—Ä–µ–Ω–æ—Å–∏ —Ä—è–¥–∫—ñ–≤ –Ω–∞ –ø—Ä–æ–±—ñ–ª–∏
      .replace(/\s+/g, ' ')        // –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –ø—Ä–æ–±—ñ–ª–∏
      .replace(/\s+\./g, '.')      // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –ø—Ä–æ–±—ñ–ª–∏ –ø–µ—Ä–µ–¥ –∫—Ä–∞–ø–∫–∞–º–∏
      .replace(/\s+,/g, ',')       // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –ø—Ä–æ–±—ñ–ª–∏ –ø–µ—Ä–µ–¥ –∫–æ–º–∞–º–∏
      .replace(/\s+!/g, '!')       // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –ø—Ä–æ–±—ñ–ª–∏ –ø–µ—Ä–µ–¥ –∑–Ω–∞–∫–∞–º–∏ –æ–∫–ª–∏–∫—É
      .replace(/\s+\?/g, '?')      // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –ø—Ä–æ–±—ñ–ª–∏ –ø–µ—Ä–µ–¥ –∑–Ω–∞–∫–∞–º–∏ –ø–∏—Ç–∞–Ω–Ω—è
      .trim();
  }

  /**
   * –í–∞–ª—ñ–¥—É—î –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç
   */
  validateOptimizedText(text) {
    const sentences = this.splitIntoSentences(text);
    return sentences.length >= this.minSentences &&
           sentences.length <= this.maxSentences &&
           text.length >= this.config.minLength &&
           text.length <= this.config.maxLength;
  }

  /**
   * Fallback –º–µ—Ç–æ–¥ - –ø–æ–≤–µ—Ä—Ç–∞—î –ø–µ—Ä—à—ñ N —Ä–µ—á–µ–Ω—å –∞–±–æ —Å–∫–æ—Ä–æ—á—É—î –¥–æ–≤–≥–∏–π —Ç–µ–∫—Å—Ç
   */
  getFallbackText(originalText) {
    return this.getSmartFallbackText(originalText);
  }

  /**
   * –†–û–ó–£–ú–ù–ò–ô FALLBACK - –∫—Ä–∞—â–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –±–µ–∑ LLM
   */
  getSmartFallbackText(originalText) {
    const sentences = this.splitIntoSentences(originalText);

    if (sentences.length === 0) {
      return originalText.substring(0, 200) + '...';
    }

    const activeLimit = this._getActiveCharacterLimit();
    let result = '';
    let sentenceCount = 0;

    // –°—Ç—Ä–∞—Ç–µ–≥—ñ—è: –¥–æ–¥–∞—î–º–æ —Ä–µ—á–µ–Ω–Ω—è –ø–æ–∫–∏ –Ω–µ –¥–æ—Å—è–≥–Ω–µ–º–æ –ª—ñ–º—ñ—Ç—É —Å–∏–º–≤–æ–ª—ñ–≤ –∞–±–æ –º–∞–∫—Å–∏–º—É–º—É —Ä–µ—á–µ–Ω—å
    for (const sentence of sentences) {
      const testResult = result ? result + ' ' + sentence : sentence;

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ü—å–æ–≥–æ —Ä–µ—á–µ–Ω–Ω—è –Ω–µ –ø–µ—Ä–µ–≤–∏—â–∏—Ç—å –ª—ñ–º—ñ—Ç–∏
      if (testResult.length <= activeLimit && sentenceCount < this.maxSentences) {
        result = testResult;
        sentenceCount++;
      } else {
        break;
      }
    }

    // –Ø–∫—â–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å–µ —â–µ –ø—É—Å—Ç–∏–π –∞–±–æ –¥—É–∂–µ –∫–æ—Ä–æ—Ç–∫–∏–π
    if (!result || result.length < 50) {
      result = sentences[0] || originalText.substring(0, activeLimit);
    }

    // –û—Å—Ç–∞—Ç–æ—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–º—ñ—Ç—É
    if (result.length > activeLimit) {
      result = result.substring(0, activeLimit - 3) + '...';
    }

    // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è —â–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    if (!/[.!?]$/.test(result.trim()) && !result.endsWith('...')) {
      result = result.trim() + '.';
    }

    // –û—á–∏—â—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result = this.cleanOptimizedText(result);

    logger.info(`${this.signature} üéØ –†–æ–∑—É–º–Ω–∏–π fallback: ${originalText.length} -> ${result.length} —Å–∏–º–≤–æ–ª—ñ–≤ (${sentenceCount} —Ä–µ—á–µ–Ω—å)`);

    return result;
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä—è—î –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å fallback LLM
   */
  async checkFallbackLLMAvailability() {
    try {
      const response = await fetch('http://localhost:4000/v1/models', {
        method: 'GET',
        timeout: 3000
      });
      return response.ok;
    } catch (error) {
      return false;
    }
  }

  /**
   * –í–∏–∑–Ω–∞—á–∞—î –∞–∫—Ç–∏–≤–Ω–∏–π –ª—ñ–º—ñ—Ç —Å–∏–º–≤–æ–ª—ñ–≤ (–∫–∞—Å—Ç–æ–º–Ω–∏–π –∞–±–æ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó)
   */
  _getActiveCharacterLimit() {
    // –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: –∫–∞—Å—Ç–æ–º–Ω–∏–π –ª—ñ–º—ñ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ > –≥–ª–æ–±–∞–ª—å–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è > —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π
    if (this.customCharacterLimit && this.customCharacterLimit > 0) {
      return this.customCharacterLimit;
    }

    if (this.config.characterLimit?.maxCharacters) {
      return this.config.characterLimit.maxCharacters;
    }

    // Fallback –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∞–±–æ 800
    return this.config.maxLength || 800;
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–æ–≤–∂–∏–Ω–∏ —Ç–µ–∫—Å—Ç—É
   */
  _needsOptimizationByLength(text, characterLimit) {
    const textLength = text.length;

    // –Ø–∫—â–æ —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–≤–∏—â—É—î –ª—ñ–º—ñ—Ç - –ø–æ—Ç—Ä—ñ–±–Ω–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è
    if (textLength > characterLimit) {
      return true;
    }

    // –Ø–∫—â–æ —î –ø–æ—Ä—ñ–≥ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è —ñ —Ç–µ–∫—Å—Ç –π–æ–≥–æ –ø–µ—Ä–µ–≤–∏—â—É—î
    const warningThreshold = this.config.characterLimit?.warningThreshold || characterLimit * 0.8;
    if (textLength > warningThreshold) {
      return true;
    }

    return false;
  }

  /**
   * –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –∫–∞—Å—Ç–æ–º–Ω–∏–π –ª—ñ–º—ñ—Ç —Å–∏–º–≤–æ–ª—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  setUserCharacterLimit(limit) {
    if (typeof limit === 'number' && limit > 0) {
      this.customCharacterLimit = limit;
      logger.info(`${this.signature} –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–∞—Å—Ç–æ–º–Ω–∏–π –ª—ñ–º—ñ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${limit} —Å–∏–º–≤–æ–ª—ñ–≤`);
      return true;
    } else {
      logger.warn(`${this.signature} –ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π –ª—ñ–º—ñ—Ç —Å–∏–º–≤–æ–ª—ñ–≤: ${limit}`);
      return false;
    }
  }

  /**
   * –°–∫–∏–¥–∞—î –∫–∞—Å—Ç–æ–º–Ω–∏–π –ª—ñ–º—ñ—Ç —Å–∏–º–≤–æ–ª—ñ–≤ –¥–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
   */
  resetUserCharacterLimit() {
    const previousLimit = this.customCharacterLimit;
    this.customCharacterLimit = null;
    logger.info(`${this.signature} –°–∫–∏–Ω—É—Ç–æ –∫–∞—Å—Ç–æ–º–Ω–∏–π –ª—ñ–º—ñ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–±—É–ª–æ: ${previousLimit})`);
  }

  /**
   * –û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω–∏–π –∞–∫—Ç–∏–≤–Ω–∏–π –ª—ñ–º—ñ—Ç —Å–∏–º–≤–æ–ª—ñ–≤
   */
  getCurrentCharacterLimit() {
    return this._getActiveCharacterLimit();
  }

  /**
   * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–æ–±–æ—Ç–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ç–æ—Ä–∞
   */
  getStats() {
    return {
      name: this.name,
      signature: this.signature,
      maxSentences: this.maxSentences,
      minSentences: this.minSentences,
      characterLimit: {
        current: this._getActiveCharacterLimit(),
        custom: this.customCharacterLimit,
        default: this.config.characterLimit?.maxCharacters || this.config.maxLength || 800,
        isCustomSet: this.customCharacterLimit !== null
      },
      status: 'active'
    };
  }
}

export default new TTSOptimizer();
