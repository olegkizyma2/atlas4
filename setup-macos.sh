#!/bin/bash

# =============================================================================
# ATLAS v4.0 - –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –Ω–∞ macOS
# =============================================================================
# –¶–µ–π —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î —Ç–∞ –Ω–∞–ª–∞—à—Ç–æ–≤—É—î ATLAS —Å–∏—Å—Ç–µ–º—É –Ω–∞ macOS
# –ø—ñ—Å–ª—è –∫–ª–æ–Ω—É–≤–∞–Ω–Ω—è –∑ GitHub
#
# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
#   git clone https://github.com/olegkizyma2/atlas4.git
#   cd atlas4
#   chmod +x setup-macos.sh
#   ./setup-macos.sh
#
# –í–∏–º–æ–≥–∏: macOS 11.0+ (Big Sur –∞–±–æ –Ω–æ–≤—ñ—à–µ)
# =============================================================================

set -e

# ANSI –∫–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m'

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
REPO_ROOT="$(cd "$(dirname "$0")" && pwd)"
LOGS_DIR="$REPO_ROOT/logs"
MODELS_DIR="$REPO_ROOT/models"

# =============================================================================
# Utility Functions
# =============================================================================

print_banner() {
    echo ""
    echo -e "${CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${CYAN}‚ïë${WHITE}          ATLAS v4.0 - macOS Deployment Setup                  ${CYAN}‚ïë${NC}"
    echo -e "${CYAN}‚ïë${WHITE}       Adaptive Task and Learning Assistant System              ${CYAN}‚ïë${NC}"
    echo -e "${CYAN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
}

log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_success() {
    echo -e "${GREEN}‚úÖ${NC} $1"
}

log_step() {
    echo ""
    echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${BLUE}üîß $1${NC}"
    echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo ""
}

check_command() {
    if command -v "$1" >/dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}

check_macos_version() {
    local min_version="11.0"
    local current_version=$(sw_vers -productVersion)
    
    log_info "macOS version: $current_version"
    
    if [ "$(printf '%s\n' "$min_version" "$current_version" | sort -V | head -n1)" = "$min_version" ]; then
        log_success "macOS version is compatible"
        return 0
    else
        log_error "–ü–æ—Ç—Ä—ñ–±–Ω–∞ macOS 11.0 (Big Sur) –∞–±–æ –Ω–æ–≤—ñ—à–∞. –ü–æ—Ç–æ—á–Ω–∞ –≤–µ—Ä—Å—ñ—è: $current_version"
        return 1
    fi
}

check_architecture() {
    local arch=$(uname -m)
    log_info "–ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞ –ø—Ä–æ—Ü–µ—Å–æ—Ä–∞: $arch"
    
    if [ "$arch" = "arm64" ]; then
        log_success "–í–∏—è–≤–ª–µ–Ω–æ Apple Silicon (M1/M2/M3) - –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ Metal GPU acceleration"
        export USE_METAL_GPU=true
        export TTS_DEVICE="mps"
        export WHISPER_DEVICE="metal"
    elif [ "$arch" = "x86_64" ]; then
        log_warn "–í–∏—è–≤–ª–µ–Ω–æ Intel –ø—Ä–æ—Ü–µ—Å–æ—Ä - Metal GPU acceleration –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"
        export USE_METAL_GPU=false
        export TTS_DEVICE="cpu"
        export WHISPER_DEVICE="cpu"
    else
        log_error "–ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∞ –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞: $arch"
        return 1
    fi
}

# =============================================================================
# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –≤–∏–º–æ–≥
# =============================================================================

check_system_requirements() {
    log_step "–ö–†–û–ö 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –≤–∏–º–æ–≥"
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ macOS –≤–µ—Ä—Å—ñ—ó
    if ! check_macos_version; then
        exit 1
    fi
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∏
    if ! check_architecture; then
        exit 1
    fi
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—ó –ø–∞–º'—è—Ç—ñ
    local total_mem=$(sysctl hw.memsize | awk '{print $2/1024/1024/1024}')
    log_info "–î–æ—Å—Ç—É–ø–Ω–∞ –ø–∞–º'—è—Ç—å: ${total_mem} GB"
    
    if (( $(echo "$total_mem < 8" | bc -l) )); then
        log_warn "–†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –º—ñ–Ω—ñ–º—É–º 8GB RAM. –°–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –ø–æ–≤—ñ–ª—å–Ω–æ."
    else
        log_success "–î–æ—Å—Ç–∞—Ç–Ω—å–æ –ø–∞–º'—è—Ç—ñ –¥–ª—è —Ä–æ–±–æ—Ç–∏ —Å–∏—Å—Ç–µ–º–∏"
    fi
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–ª—å–Ω–æ–≥–æ –º—ñ—Å—Ü—è –Ω–∞ –¥–∏—Å–∫—É
    local free_space=$(df -h "$REPO_ROOT" | tail -1 | awk '{print $4}' | sed 's/Gi//;s/G//')
    log_info "–í—ñ–ª—å–Ω–µ –º—ñ—Å—Ü–µ –Ω–∞ –¥–∏—Å–∫—É: ${free_space} GB"
    
    if (( $(echo "$free_space < 10" | bc -l) )); then
        log_error "–ü–æ—Ç—Ä—ñ–±–Ω–æ –º—ñ–Ω—ñ–º—É–º 10GB –≤—ñ–ª—å–Ω–æ–≥–æ –º—ñ—Å—Ü—è (–¥–ª—è –º–æ–¥–µ–ª–µ–π —Ç–∞ –¥–∞–Ω–∏—Ö)"
        exit 1
    else
        log_success "–î–æ—Å—Ç–∞—Ç–Ω—å–æ –º—ñ—Å—Ü—è –Ω–∞ –¥–∏—Å–∫—É"
    fi
}

# =============================================================================
# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Homebrew
# =============================================================================

install_homebrew() {
    log_step "–ö–†–û–ö 2: –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Homebrew"
    
    if check_command brew; then
        log_success "Homebrew –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        log_info "–í–µ—Ä—Å—ñ—è: $(brew --version | head -1)"
    else
        log_info "–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Homebrew..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        
        # –î–æ–¥–∞—Ç–∏ Homebrew –¥–æ PATH
        if [ "$(uname -m)" = "arm64" ]; then
            echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
            eval "$(/opt/homebrew/bin/brew shellenv)"
        else
            echo 'eval "$(/usr/local/bin/brew shellenv)"' >> ~/.zprofile
            eval "$(/usr/local/bin/brew shellenv)"
        fi
        
        log_success "Homebrew –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    fi
    
    # –û–Ω–æ–≤–∏—Ç–∏ Homebrew
    log_info "–û–Ω–æ–≤–ª–µ–Ω–Ω—è Homebrew..."
    brew update || log_warn "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ Homebrew (–º–æ–∂–ª–∏–≤–æ –Ω–µ–º–∞—î —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É)"
}

# =============================================================================
# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Python
# =============================================================================

install_python() {
    log_step "–ö–†–û–ö 3: –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Python 3.9+"
    
    if check_command python3; then
        local python_version=$(python3 --version | awk '{print $2}')
        log_info "–í–∏—è–≤–ª–µ–Ω–æ Python: $python_version"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó –≤–µ—Ä—Å—ñ—ó 3.9
        local min_version="3.9"
        if [ "$(printf '%s\n' "$min_version" "$python_version" | sort -V | head -n1)" = "$min_version" ]; then
            log_success "Python –≤–µ—Ä—Å—ñ—è –ø—ñ–¥—Ö–æ–¥–∏—Ç—å"
            return 0
        fi
    fi
    
    log_info "–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Python 3.11 —á–µ—Ä–µ–∑ Homebrew..."
    brew install python@3.11
    
    # –î–æ–¥–∞—Ç–∏ –¥–æ PATH
    echo 'export PATH="/opt/homebrew/opt/python@3.11/bin:$PATH"' >> ~/.zprofile
    export PATH="/opt/homebrew/opt/python@3.11/bin:$PATH"
    
    log_success "Python –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: $(python3 --version)"
}

# =============================================================================
# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Node.js
# =============================================================================

install_nodejs() {
    log_step "–ö–†–û–ö 4: –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Node.js 18+"
    
    if check_command node; then
        local node_version=$(node --version | sed 's/v//')
        log_info "–í–∏—è–≤–ª–µ–Ω–æ Node.js: $node_version"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó –≤–µ—Ä—Å—ñ—ó 16
        local min_version="16.0.0"
        if [ "$(printf '%s\n' "$min_version" "$node_version" | sort -V | head -n1)" = "$min_version" ]; then
            log_success "Node.js –≤–µ—Ä—Å—ñ—è –ø—ñ–¥—Ö–æ–¥–∏—Ç—å"
            return 0
        fi
    fi
    
    log_info "–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Node.js 20 —á–µ—Ä–µ–∑ Homebrew..."
    brew install node@20
    
    # –î–æ–¥–∞—Ç–∏ –¥–æ PATH
    echo 'export PATH="/opt/homebrew/opt/node@20/bin:$PATH"' >> ~/.zprofile
    export PATH="/opt/homebrew/opt/node@20/bin:$PATH"
    
    log_success "Node.js –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: $(node --version)"
    log_info "npm –≤–µ—Ä—Å—ñ—è: $(npm --version)"
}

# =============================================================================
# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Git (—è–∫—â–æ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)
# =============================================================================

install_git() {
    log_step "–ö–†–û–ö 5: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Git"
    
    if check_command git; then
        log_success "Git –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: $(git --version)"
    else
        log_info "–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Git..."
        brew install git
        log_success "Git –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    fi
}

# =============================================================================
# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
# =============================================================================

install_dependencies() {
    log_step "–ö–†–û–ö 6: –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"
    
    log_info "–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–Ω–∏—Ö —É—Ç–∏–ª—ñ—Ç..."
    brew install wget curl jq portaudio ffmpeg cmake
    
    # –î–ª—è Mac M1/M2/M3 - –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ Metal tools
    if [ "$USE_METAL_GPU" = "true" ]; then
        log_info "–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Metal SDK –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ–≤..."
        xcode-select --install 2>/dev/null || log_info "Xcode Command Line Tools –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    fi
    
    log_success "–°–∏—Å—Ç–µ–º–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
}

# =============================================================================
# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Goose Desktop
# =============================================================================

install_goose() {
    log_step "–ö–†–û–ö 7: –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Goose AI"
    
    # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ Desktop –≤–µ—Ä—Å—ñ—é
    if [ -x "/Applications/Goose.app/Contents/MacOS/goose" ]; then
        log_success "Goose Desktop –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        export GOOSE_BIN="/Applications/Goose.app/Contents/MacOS/goose"
        return 0
    fi
    
    # –Ø–∫—â–æ Desktop –Ω–µ–º–∞—î, –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ CLI
    if check_command goose; then
        log_success "Goose CLI –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        export GOOSE_BIN="goose"
        return 0
    fi
    
    log_info "–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Goose CLI..."
    brew tap block/goose
    brew install goose
    
    log_success "Goose –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    export GOOSE_BIN="goose"
    
    log_warn ""
    log_warn "–í–ê–ñ–õ–ò–í–û: –î–ª—è –∫—Ä–∞—â–æ—ó –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è Goose Desktop:"
    log_warn "–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –∑: https://github.com/block/goose/releases"
    log_warn ""
}

# =============================================================================
# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Python –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
# =============================================================================

setup_python_venv() {
    log_step "–ö–†–û–ö 8: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Python –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞"
    
    cd "$REPO_ROOT"
    
    # –°—Ç–≤–æ—Ä–∏—Ç–∏ venv —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
    if [ ! -d "web/venv" ]; then
        log_info "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞..."
        python3 -m venv web/venv
        log_success "–í—ñ—Ä—Ç—É–∞–ª—å–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ"
    else
        log_info "–í—ñ—Ä—Ç—É–∞–ª—å–Ω–µ —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –≤–∂–µ —ñ—Å–Ω—É—î"
    fi
    
    # –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
    log_info "–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Python –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π..."
    source web/venv/bin/activate
    
    pip install --upgrade pip --quiet
    pip install -r requirements.txt --quiet
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ TTS –ø—ñ–¥—Ç—Ä–∏–º–∫–∏
    log_info "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ PyTorch MPS (Metal Performance Shaders)..."
    if python3 -c "import torch; print(torch.backends.mps.is_available())" 2>/dev/null | grep -q "True"; then
        log_success "PyTorch MPS –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ - –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ GPU acceleration"
        export TTS_DEVICE="mps"
    else
        log_warn "PyTorch MPS –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π - –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ CPU –¥–ª—è TTS"
        export TTS_DEVICE="cpu"
    fi
    
    deactivate
    log_success "Python –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
}

# =============================================================================
# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Node.js –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
# =============================================================================

setup_nodejs_packages() {
    log_step "–ö–†–û–ö 9: –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Node.js –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π"
    
    cd "$REPO_ROOT"
    
    log_info "–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è npm –ø–∞–∫–µ—Ç—ñ–≤..."
    npm install --silent
    
    # –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –ø–∞–∫–µ—Ç–∏ –≤ config/
    if [ -f "config/package.json" ]; then
        log_info "–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è config –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π..."
        cd config
        npm install --silent
        cd "$REPO_ROOT"
    fi
    
    log_success "Node.js –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
}

# =============================================================================
# –ö–æ–º–ø—ñ–ª—è—Ü—ñ—è Whisper.cpp –∑ Metal –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é
# =============================================================================

build_whisper_cpp() {
    log_step "–ö–†–û–ö 10: –ö–æ–º–ø—ñ–ª—è—Ü—ñ—è Whisper.cpp (–∑ Metal GPU)"
    
    local whisper_dir="$REPO_ROOT/third_party/whisper.cpp.upstream"
    
    if [ ! -d "$whisper_dir" ]; then
        log_info "–ö–ª–æ–Ω—É–≤–∞–Ω–Ω—è Whisper.cpp —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ—é..."
        mkdir -p "$REPO_ROOT/third_party"
        cd "$REPO_ROOT/third_party"
        git clone https://github.com/ggerganov/whisper.cpp.git whisper.cpp.upstream
        cd whisper.cpp.upstream
    else
        log_info "Whisper.cpp –≤–∂–µ –∫–ª–æ–Ω–æ–≤–∞–Ω–æ, –æ–Ω–æ–≤–ª–µ–Ω–Ω—è..."
        cd "$whisper_dir"
        git pull
    fi
    
    # –ö–æ–º–ø—ñ–ª—è—Ü—ñ—è –∑ Metal –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –¥–ª—è M1/M2/M3
    if [ "$USE_METAL_GPU" = "true" ]; then
        log_info "–ö–æ–º–ø—ñ–ª—è—Ü—ñ—è Whisper.cpp –∑ Metal GPU acceleration..."
        mkdir -p build
        cd build
        cmake .. -DWHISPER_METAL=ON -DWHISPER_COREML=ON
        make -j$(sysctl -n hw.ncpu)
        log_success "Whisper.cpp —Å–∫–æ–º–ø—ñ–ª—å–æ–≤–∞–Ω–æ –∑ Metal –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é"
    else
        log_info "–ö–æ–º–ø—ñ–ª—è—Ü—ñ—è Whisper.cpp (CPU —Ä–µ–∂–∏–º)..."
        make clean
        make -j$(sysctl -n hw.ncpu)
        log_success "Whisper.cpp —Å–∫–æ–º–ø—ñ–ª—å–æ–≤–∞–Ω–æ"
    fi
    
    cd "$REPO_ROOT"
}

# =============================================================================
# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª–µ–π Whisper
# =============================================================================

download_whisper_models() {
    log_step "–ö–†–û–ö 11: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Whisper –º–æ–¥–µ–ª–µ–π"
    
    mkdir -p "$MODELS_DIR/whisper"
    cd "$MODELS_DIR/whisper"
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ Large-v3 –º–æ–¥–µ–ª—å –¥–ª—è –∫—Ä–∞—â–æ—ó —è–∫–æ—Å—Ç—ñ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—ó –º–æ–≤–∏
    local model_url="https://huggingface.co/ggerganov/whisper.cpp/resolve/main/ggml-large-v3.bin"
    local model_file="ggml-large-v3.bin"
    
    if [ -f "$model_file" ]; then
        log_info "–ú–æ–¥–µ–ª—å $model_file –≤–∂–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞"
    else
        log_info "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Whisper Large-v3 –º–æ–¥–µ–ª—ñ (~3GB)..."
        log_warn "–¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —à–≤–∏–¥–∫–æ—Å—Ç—ñ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É..."
        
        if wget --show-progress -O "$model_file" "$model_url" 2>&1 | grep -o '[0-9]*%' | tail -1; then
            log_success "–ú–æ–¥–µ–ª—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞"
        else
            log_error "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–æ–¥–µ–ª—å"
            return 1
        fi
    fi
    
    cd "$REPO_ROOT"
}

# =============================================================================
# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
# =============================================================================

create_directories() {
    log_step "–ö–†–û–ö 12: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π"
    
    mkdir -p "$LOGS_DIR"
    mkdir -p "$LOGS_DIR/archive"
    mkdir -p "$MODELS_DIR/whisper"
    mkdir -p "$MODELS_DIR/tts"
    mkdir -p "$HOME/.local/share/goose/sessions"
    mkdir -p "$HOME/.config/goose"
    mkdir -p data
    
    log_success "–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —Å—Ç–≤–æ—Ä–µ–Ω–æ"
}

# =============================================================================
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
# =============================================================================

configure_system() {
    log_step "–ö–†–û–ö 13: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–Ω–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó"
    
    # –°—Ç–≤–æ—Ä–∏—Ç–∏ .env —Ñ–∞–π–ª —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
    if [ ! -f "$REPO_ROOT/.env" ]; then
        log_info "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è .env —Ñ–∞–π–ª—É..."
        cat > "$REPO_ROOT/.env" << EOF
# ATLAS System Configuration
# Generated: $(date)

# System
NODE_ENV=production
FORCE_FREE_PORTS=true

# Goose Configuration
GOOSE_BIN=${GOOSE_BIN}
GOOSE_SERVER_PORT=3000
GOOSE_DISABLE_KEYRING=1

# TTS Configuration
REAL_TTS_MODE=true
TTS_DEVICE=${TTS_DEVICE}
TTS_PORT=3001

# Whisper Configuration
WHISPER_BACKEND=cpp
WHISPER_DEVICE=${WHISPER_DEVICE}
WHISPER_PORT=3002
WHISPER_CPP_MODEL=$MODELS_DIR/whisper/ggml-large-v3.bin
WHISPER_CPP_NGL=20
WHISPER_CPP_THREADS=6

# Ports
FRONTEND_PORT=5001
ORCHESTRATOR_PORT=5101

# Features
USE_METAL_GPU=${USE_METAL_GPU}
EOF
        log_success ".env —Ñ–∞–π–ª —Å—Ç–≤–æ—Ä–µ–Ω–æ"
    else
        log_info ".env —Ñ–∞–π–ª –≤–∂–µ —ñ—Å–Ω—É—î (–ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ)"
    fi
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Goose
    log_info "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó Goose..."
    if [ ! -f "$HOME/.config/goose/config.yaml" ]; then
        log_warn "Goose —â–µ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ"
        log_warn "–ü–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –ø—ñ—Å–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"
    else
        log_success "Goose –≤–∂–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ"
    fi
}

# =============================================================================
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Goose
# =============================================================================

configure_goose() {
    log_step "–ö–†–û–ö 14: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Goose AI"
    
    if [ ! -f "$HOME/.config/goose/config.yaml" ]; then
        log_warn ""
        log_warn "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        log_warn "  Goose –ø–æ—Ç—Ä–µ–±—É—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ GitHub Copilot"
        log_warn "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
        log_warn ""
        log_info "–ó–∞–ø—É—Å–∫–∞—î–º–æ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è..."
        log_info "–ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π –Ω–∞ –µ–∫—Ä–∞–Ω—ñ"
        log_info ""
        
        sleep 2
        
        if [ -n "$GOOSE_BIN" ]; then
            $GOOSE_BIN configure || log_warn "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–æ–ø—É—â–µ–Ω–æ –∞–±–æ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
        else
            log_error "Goose binary –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
            return 1
        fi
    else
        log_success "Goose –≤–∂–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ"
    fi
}

# =============================================================================
# –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
# =============================================================================

test_installation() {
    log_step "–ö–†–û–ö 15: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"
    
    local all_ok=true
    
    # Python
    if check_command python3; then
        log_success "Python: $(python3 --version)"
    else
        log_error "Python –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        all_ok=false
    fi
    
    # Node.js
    if check_command node; then
        log_success "Node.js: $(node --version)"
    else
        log_error "Node.js –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        all_ok=false
    fi
    
    # Goose
    if [ -n "$GOOSE_BIN" ] && [ -x "$GOOSE_BIN" ]; then
        log_success "Goose: –¥–æ—Å—Ç—É–ø–Ω–∏–π"
    else
        log_error "Goose –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        all_ok=false
    fi
    
    # Whisper binary
    local whisper_bin="$REPO_ROOT/third_party/whisper.cpp.upstream/build/bin/whisper-cli"
    if [ -x "$whisper_bin" ]; then
        log_success "Whisper.cpp: —Å–∫–æ–º–ø—ñ–ª—å–æ–≤–∞–Ω–æ"
    else
        log_warn "Whisper.cpp binary –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏–º–µ—Ç—å—Å—è fallback)"
    fi
    
    # Whisper model
    if [ -f "$MODELS_DIR/whisper/ggml-large-v3.bin" ]; then
        log_success "Whisper Large-v3 –º–æ–¥–µ–ª—å: –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞"
    else
        log_error "Whisper –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞"
        all_ok=false
    fi
    
    # Metal GPU
    if [ "$USE_METAL_GPU" = "true" ]; then
        log_success "Metal GPU: –¥–æ—Å—Ç—É–ø–Ω–∏–π (Apple Silicon)"
    else
        log_info "Metal GPU: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π (Intel –ø—Ä–æ—Ü–µ—Å–æ—Ä)"
    fi
    
    # PyTorch MPS
    if python3 -c "import torch; assert torch.backends.mps.is_available()" 2>/dev/null; then
        log_success "PyTorch MPS: –¥–æ—Å—Ç—É–ø–Ω–∏–π"
    else
        log_warn "PyTorch MPS: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π (–±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ CPU)"
    fi
    
    echo ""
    if [ "$all_ok" = "true" ]; then
        log_success "–í—Å—ñ –æ—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!"
        return 0
    else
        log_error "–î–µ—è–∫—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–æ—Ä–µ–∫—Ç–Ω–æ"
        return 1
    fi
}

# =============================================================================
# –§—ñ–Ω–∞–ª—å–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó
# =============================================================================

print_final_instructions() {
    echo ""
    echo -e "${GREEN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${GREEN}‚ïë${WHITE}                 –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–Ü–®–ù–û!                  ${GREEN}‚ïë${NC}"
    echo -e "${GREEN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    echo ""
    echo -e "${CYAN}üìã –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:${NC}"
    echo ""
    echo -e "${YELLOW}1.${NC} –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —Å–∏—Å—Ç–µ–º—É:"
    echo -e "   ${WHITE}./restart_system.sh start${NC}"
    echo ""
    echo -e "${YELLOW}2.${NC} –ê–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ Make –∫–æ–º–∞–Ω–¥–∏:"
    echo -e "   ${WHITE}make start${NC}"
    echo ""
    echo -e "${YELLOW}3.${NC} –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º–∏:"
    echo -e "   ${WHITE}./restart_system.sh status${NC}"
    echo ""
    echo -e "${YELLOW}4.${NC} –ü–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –ª–æ–≥–∏:"
    echo -e "   ${WHITE}./restart_system.sh logs${NC}"
    echo ""
    echo -e "${CYAN}üåê –î–æ—Å—Ç—É–ø –¥–æ —Å–∏—Å—Ç–µ–º–∏:${NC}"
    echo ""
    echo -e "   ${WHITE}‚Ä¢ –í–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å:${NC}     http://localhost:5001"
    echo -e "   ${WHITE}‚Ä¢ Orchestrator API:${NC}  http://localhost:5101"
    echo -e "   ${WHITE}‚Ä¢ Goose Server:${NC}      http://localhost:3000"
    echo -e "   ${WHITE}‚Ä¢ TTS Service:${NC}       http://localhost:3001"
    echo -e "   ${WHITE}‚Ä¢ Whisper Service:${NC}   http://localhost:3002"
    echo ""
    echo -e "${CYAN}üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è:${NC}"
    echo ""
    echo -e "   ${WHITE}‚Ä¢ README.md${NC}          - –ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è"
    echo -e "   ${WHITE}‚Ä¢ docs/ATLAS_SYSTEM_ARCHITECTURE.md${NC} - –ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞"
    echo -e "   ${WHITE}‚Ä¢ .github/copilot-instructions.md${NC}  - –†–æ–∑—Ä–æ–±–∫–∞"
    echo ""
    echo -e "${CYAN}üí° –ö–æ—Ä–∏—Å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:${NC}"
    echo ""
    echo -e "   ${WHITE}make help${NC}            - –ü–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ Make –∫–æ–º–∞–Ω–¥–∏"
    echo -e "   ${WHITE}./restart_system.sh help${NC} - –ü–æ–∫–∞–∑–∞—Ç–∏ –æ–ø—Ü—ñ—ó —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è"
    echo ""
    
    if [ ! -f "$HOME/.config/goose/config.yaml" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  –í–ê–ñ–õ–ò–í–û:${NC}"
        echo ""
        echo -e "   Goose –ø–æ—Ç—Ä–µ–±—É—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ –ø–µ—Ä—à–∏–º –∑–∞–ø—É—Å–∫–æ–º:"
        echo -e "   ${WHITE}${GOOSE_BIN} configure${NC}"
        echo ""
    fi
    
    echo -e "${GREEN}‚ú® –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏!${NC}"
    echo ""
}

# =============================================================================
# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
# =============================================================================

main() {
    print_banner
    
    log_info "–†–æ–∑–ø–æ—á–∞—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫—É ATLAS v4.0 –Ω–∞ macOS"
    log_info "–†–æ–±–æ—á–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: $REPO_ROOT"
    echo ""
    
    # –í–∏–∫–æ–Ω–∞—Ç–∏ –∫—Ä–æ–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    check_system_requirements
    install_homebrew
    install_python
    install_nodejs
    install_git
    install_dependencies
    install_goose
    setup_python_venv
    setup_nodejs_packages
    build_whisper_cpp
    download_whisper_models
    create_directories
    configure_system
    configure_goose
    test_installation
    
    # –§—ñ–Ω–∞–ª—å–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó
    print_final_instructions
    
    log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ $(date)"
}

# =============================================================================
# –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
# =============================================================================

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ macOS
if [[ "$OSTYPE" != "darwin"* ]]; then
    log_error "–¶–µ–π —Å–∫—Ä–∏–ø—Ç –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ —Ç—ñ–ª—å–∫–∏ –¥–ª—è macOS"
    exit 1
fi

# –ó–∞–ø—É—Å—Ç–∏—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∫—É
main "$@"
