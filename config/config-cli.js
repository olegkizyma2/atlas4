#!/usr/bin/env node

/**
 * CONFIG CLI - –£—Ç–∏–ª—ñ—Ç–∞ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è–º–∏ ATLAS
 *
 * –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
 *   node config/config-cli.js sync          # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –≤—Å—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
 *   node config/config-cli.js status        # –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π
 *   node config/config-cli.js backup        # –°—Ç–≤–æ—Ä–∏—Ç–∏ backup
 *   node config/config-cli.js restore <path> # –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ –∑ backup
 *   node config/config-cli.js validate      # –í–∞–ª—ñ–¥—É–≤–∞—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
 *   node config/config-cli.js watch         # –°–ª—ñ–¥–∫—É–≤–∞—Ç–∏ –∑–∞ –∑–º—ñ–Ω–∞–º–∏ —Ç–∞ –∞–≤—Ç–æ—Å–∏–Ω–∫
 */

import { program } from 'commander';
import { watch } from 'chokidar';
import { resolve, join } from 'path';
import { existsSync } from 'fs';
import chalk from 'chalk';

// –Ü–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
import configManagerDefault, {
  syncAllConfigs,
  syncConfig,
  createConfigBackup,
  restoreConfigBackup,
  getConfigStatus,
  validateGlobalConfig
} from './config-manager.js';

const configManager = configManagerDefault;

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è CLI
program
  .name('atlas-config')
  .description('–£—Ç–∏–ª—ñ—Ç–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è–º–∏ ATLAS')
  .version('4.0.0');

/**
 * –ö–æ–º–∞–Ω–¥–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
 */
program
  .command('sync')
  .description('–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –≤—Å—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ –≥–ª–æ–±–∞–ª—å–Ω–æ—ó')
  .option('-t, --target <name>', '–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É —Ü—ñ–ª—å')
  .option('-f, --force', '–§–æ—Ä—Å—É–≤–∞—Ç–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—é –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ')
  .option('--backup', '–°—Ç–≤–æ—Ä–∏—Ç–∏ backup –ø–µ—Ä–µ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—î—é')
  .action(async (options) => {
    try {
      console.log(chalk.blue('üîÑ –ü–æ—á–∞—Ç–æ–∫ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π ATLAS'));

      // –°—Ç–≤–æ—Ä—é—î–º–æ backup —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
      if (options.backup) {
        console.log(chalk.yellow('üì¶ –°—Ç–≤–æ—Ä—é—î–º–æ backup...'));
        const backupPath = await createConfigBackup();
        console.log(chalk.green(`‚úÖ Backup —Å—Ç–≤–æ—Ä–µ–Ω–æ: ${backupPath}`));
      }

      // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è
      if (options.target) {
        console.log(chalk.cyan(`üéØ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ —Ü—ñ–ª—å: ${options.target}`));
        await syncConfig(options.target);
      } else {
        console.log(chalk.cyan('üåê –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –≤—Å—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó'));
        const results = await syncAllConfigs();

        if (results.errors.length > 0) {
          console.log(chalk.red(`\n‚ùå –í–∏—è–≤–ª–µ–Ω–æ ${results.errors.length} –ø–æ–º–∏–ª–æ–∫!`));
          process.exit(1);
        }
      }

      console.log(chalk.green('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!'));

    } catch (error) {
      console.error(chalk.red('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:'), error.message);
      process.exit(1);
    }
  });

/**
 * –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç—É—Å—É
 */
program
  .command('status')
  .description('–ü–æ–∫–∞–∑–∞—Ç–∏ —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π')
  .option('-v, --verbose', '–î–æ–∫–ª–∞–¥–Ω–∏–π –≤–∏–≤—ñ–¥')
  .action(async (options) => {
    try {
      const status = getConfigStatus();

      console.log(chalk.blue('üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π ATLAS\n'));

      // –ì–ª–æ–±–∞–ª—å–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
      console.log(chalk.bold('üåç –ì–ª–æ–±–∞–ª—å–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è:'));
      console.log(`   –•–µ—à: ${status.globalConfig.hash.substring(0, 12)}...`);
      console.log(`   –ü–æ—Ç—Ä–µ–±—É—î —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó: ${status.globalConfig.needsSync ? chalk.red('–¢–ê–ö') : chalk.green('–ù–Ü')}\n`);

      // –¶—ñ–ª—ñ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
      console.log(chalk.bold('üéØ –¶—ñ–ª—ñ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:'));

      for (const [name, target] of Object.entries(status.targets)) {
        const exists = target.exists ? chalk.green('‚úì') : chalk.red('‚úó');
        const synced = target.lastSync ? chalk.green(new Date(target.lastSync).toLocaleString('uk-UA')) : chalk.gray('–ù—ñ–∫–æ–ª–∏');

        console.log(`   ${exists} ${chalk.bold(name)}`);
        if (options.verbose) {
          console.log(`      –®–ª—è—Ö: ${target.path}`);
          console.log(`      –û—Å—Ç–∞–Ω–Ω—ñ–π —Å–∏–Ω–∫: ${synced}`);
          if (target.checksum) {
            console.log(`      –ß–µ–∫—Å—É–º–∞: ${target.checksum.substring(0, 8)}...`);
          }
        }
      }

      // –ü—ñ–¥—Å—É–º–æ–∫
      const totalTargets = Object.keys(status.targets).length;
      const existingTargets = Object.values(status.targets).filter(t => t.exists).length;
      const syncedTargets = Object.values(status.targets).filter(t => t.lastSync).length;

      console.log(`\nüìà –ü—ñ–¥—Å—É–º–æ–∫:`);
      console.log(`   –í—Å—å–æ–≥–æ —Ü—ñ–ª–µ–π: ${totalTargets}`);
      console.log(`   –Ü—Å–Ω—É—é—á–∏—Ö —Ñ–∞–π–ª—ñ–≤: ${existingTargets}/${totalTargets}`);
      console.log(`   –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–∏—Ö: ${syncedTargets}/${totalTargets}`);

    } catch (error) {
      console.error(chalk.red('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É:'), error.message);
      process.exit(1);
    }
  });

/**
 * –ö–æ–º–∞–Ω–¥–∞ backup
 */
program
  .command('backup')
  .description('–°—Ç–≤–æ—Ä–∏—Ç–∏ backup –ø–æ—Ç–æ—á–Ω–∏—Ö –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π')
  .option('-d, --dir <directory>', '–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è –¥–ª—è backup (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º config/backups)')
  .action(async (options) => {
    try {
      console.log(chalk.blue('üì¶ –°—Ç–≤–æ—Ä—é—î–º–æ backup –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π...'));

      const backupPath = await createConfigBackup();

      console.log(chalk.green(`‚úÖ Backup —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!`));
      console.log(chalk.gray(`   –®–ª—è—Ö: ${backupPath}`));

    } catch (error) {
      console.error(chalk.red('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è backup:'), error.message);
      process.exit(1);
    }
  });

/**
 * –ö–æ–º–∞–Ω–¥–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
 */
program
  .command('restore <backup-path>')
  .description('–í—ñ–¥–Ω–æ–≤–∏—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ backup')
  .option('-f, --force', '–§–æ—Ä—Å—É–≤–∞—Ç–∏ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –±–µ–∑ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è')
  .action(async (backupPath, options) => {
    try {
      if (!existsSync(backupPath)) {
        console.error(chalk.red(`‚ùå Backup –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ${backupPath}`));
        process.exit(1);
      }

      if (!options.force) {
        console.log(chalk.yellow('‚ö†Ô∏è –¶–µ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ –ø–æ—Ç–æ—á–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó!'));
        console.log(chalk.gray('   –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ --force –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è'));
        return;
      }

      console.log(chalk.blue(`üîÑ –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑: ${backupPath}`));

      await restoreConfigBackup(backupPath);

      console.log(chalk.green('‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!'));

    } catch (error) {
      console.error(chalk.red('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è:'), error.message);
      process.exit(1);
    }
  });

/**
 * –ö–æ–º–∞–Ω–¥–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
 */
program
  .command('validate')
  .description('–í–∞–ª—ñ–¥—É–≤–∞—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é')
  .option('--strict', '–°—Ç—Ä–æ–≥–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è')
  .action(async (options) => {
    try {
      console.log(chalk.blue('üîç –í–∞–ª—ñ–¥—É—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é...'));

      validateGlobalConfig();

      console.log(chalk.green('‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –≤–∞–ª—ñ–¥–Ω–∞!'));

      // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —É —Å—Ç—Ä–æ–≥–æ–º—É —Ä–µ–∂–∏–º—ñ
      if (options.strict) {
        console.log(chalk.cyan('üî¨ –í–∏–∫–æ–Ω—É—î–º–æ —Å—Ç—Ä–æ–≥—É –≤–∞–ª—ñ–¥–∞—Ü—ñ—é...'));

        const status = getConfigStatus();
        const issues = [];

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤—Å—ñ —Ü—ñ–ª—ñ —ñ—Å–Ω—É—é—Ç—å
        for (const [name, target] of Object.entries(status.targets)) {
          if (!target.exists) {
            issues.push(`–í—ñ–¥—Å—É—Ç–Ω—ñ–π —Ñ–∞–π–ª: ${name} (${target.path})`);
          }
          if (!target.lastSync) {
            issues.push(`–ù—ñ–∫–æ–ª–∏ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞–≤—Å—è: ${name}`);
          }
        }

        if (issues.length > 0) {
          console.log(chalk.yellow('‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–∏:'));
          issues.forEach(issue => console.log(`   - ${issue}`));
          console.log(chalk.gray('\n–í–∏–∫–æ–Ω–∞–π—Ç–µ "atlas-config sync" –¥–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è'));
        } else {
          console.log(chalk.green('‚úÖ –°—Ç—Ä–æ–≥–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ!'));
        }
      }

    } catch (error) {
      console.error(chalk.red('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó:'), error.message);
      process.exit(1);
    }
  });

/**
 * –ö–æ–º–∞–Ω–¥–∞ —Å–ª—ñ–¥–∫—É–≤–∞–Ω–Ω—è
 */
program
  .command('watch')
  .description('–°–ª—ñ–¥–∫—É–≤–∞—Ç–∏ –∑–∞ –∑–º—ñ–Ω–∞–º–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏')
  .option('-i, --interval <seconds>', '–Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö', '5')
  .option('--no-auto-backup', '–ù–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ backup')
  .action(async (options) => {
    try {
      console.log(chalk.blue('üëÅÔ∏è –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è–º–∏...'));
      console.log(chalk.gray('   –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Ctrl+C –¥–ª—è –∑—É–ø–∏–Ω–∫–∏'));

      const globalConfigPath = resolve('config/global-config.js');

      // –°–ª—ñ–¥–∫—É–≤–∞–Ω–Ω—è –∑–∞ —Ñ–∞–π–ª–æ–º –≥–ª–æ–±–∞–ª—å–Ω–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
      const watcher = watch(globalConfigPath, {
        persistent: true,
        ignoreInitial: true
      });

      watcher.on('change', async () => {
        try {
          console.log(chalk.yellow('\nüîÑ –í–∏—è–≤–ª–µ–Ω–æ –∑–º—ñ–Ω–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ñ–π –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...'));

          // –°—Ç–≤–æ—Ä—é—î–º–æ backup —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
          if (options.autoBackup !== false) {
            await createConfigBackup();
            console.log(chalk.green('üì¶ Backup —Å—Ç–≤–æ—Ä–µ–Ω–æ'));
          }

          // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ
          await syncAllConfigs();
          console.log(chalk.green('‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ\n'));

        } catch (error) {
          console.error(chalk.red('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:'), error.message);
        }
      });

      watcher.on('error', (error) => {
        console.error(chalk.red('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è:'), error.message);
      });

      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –∫–æ–∂–Ω—ñ N —Å–µ–∫—É–Ω–¥
      const interval = parseInt(options.interval) * 1000;
      const statusTimer = setInterval(async () => {
        if (configManager.needsSync()) {
          console.log(chalk.yellow('üîÑ –í–∏—è–≤–ª–µ–Ω–æ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ—Å—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó...'));
          try {
            await syncAllConfigs();
            console.log(chalk.green('‚úÖ –ê–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞'));
          } catch (error) {
            console.error(chalk.red('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:'), error.message);
          }
        }
      }, interval);

      // –û–±—Ä–æ–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
      process.on('SIGINT', () => {
        console.log(chalk.blue('\nüëã –ó—É–ø–∏–Ω—è—î–º–æ —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è...'));
        clearInterval(statusTimer);
        watcher.close();
        process.exit(0);
      });

    } catch (error) {
      console.error(chalk.red('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Å–ø–æ—Å—Ç–µ—Ä–µ–∂–µ–Ω–Ω—è:'), error.message);
      process.exit(1);
    }
  });

/**
 * –ö–æ–º–∞–Ω–¥–∞ –æ—á–∏—â–µ–Ω–Ω—è
 */
program
  .command('cleanup')
  .description('–û—á–∏—Å—Ç–∏—Ç–∏ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ backup —Ç–∞ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏')
  .option('-k, --keep <count>', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å backup –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è', '10')
  .action(async (options) => {
    try {
      console.log(chalk.blue('üßπ –û—á–∏—â—É—î–º–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ —Ñ–∞–π–ª–∏...'));

      await configManager.cleanupBackups(parseInt(options.keep));

      console.log(chalk.green('‚úÖ –û—á–∏—â–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!'));

    } catch (error) {
      console.error(chalk.red('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è:'), error.message);
      process.exit(1);
    }
  });

/**
 * –ö–æ–º–∞–Ω–¥–∞ init –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—å–Ω–æ—ó –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
 */
program
  .command('init')
  .description('–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω—É —Å–∏—Å—Ç–µ–º—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π')
  .option('--force', '–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç–∏ —ñ—Å–Ω—É—é—á—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó')
  .action(async (options) => {
    try {
      console.log(chalk.blue('üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω—É —Å–∏—Å—Ç–µ–º—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π...'));

      // –°—Ç–≤–æ—Ä—é—î–º–æ backup —ñ—Å–Ω—É—é—á–∏—Ö –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π
      console.log(chalk.yellow('üì¶ –°—Ç–≤–æ—Ä—é—î–º–æ backup —ñ—Å–Ω—É—é—á–∏—Ö –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π...'));
      const backupPath = await createConfigBackup();
      console.log(chalk.green(`‚úÖ Backup –∑–±–µ—Ä–µ–∂–µ–Ω–æ: ${backupPath}`));

      // –í–∞–ª—ñ–¥—É—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
      console.log(chalk.cyan('üîç –í–∞–ª—ñ–¥—É—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é...'));
      validateGlobalConfig();
      console.log(chalk.green('‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –≤–∞–ª—ñ–¥–Ω–∞'));

      // –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –≤—Å—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
      console.log(chalk.cyan('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –≤—Å—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...'));
      const results = await syncAllConfigs();

      if (results.errors.length > 0) {
        console.log(chalk.red(`‚ùå –í–∏—è–≤–ª–µ–Ω–æ ${results.errors.length} –ø–æ–º–∏–ª–æ–∫ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó!`));
        results.errors.forEach(err => {
          console.log(chalk.red(`   - ${err.name}: ${err.error}`));
        });
        process.exit(1);
      }

      console.log(chalk.green('üéâ –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞!'));
      console.log(chalk.gray('\n–¢–µ–ø–µ—Ä –≤—Å—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—é—Ç—å—Å—è –∑ config/global-config.js'));
      console.log(chalk.gray('–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ "atlas-config watch" –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó'));

    } catch (error) {
      console.error(chalk.red('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:'), error.message);
      process.exit(1);
    }
  });

// –ó–∞–ø—É—Å–∫ CLI
if (import.meta.url === `file://${process.argv[1]}`) {
  program.parse();
}
