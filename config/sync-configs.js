#!/usr/bin/env node

/**
 * SYNC CONFIGS - –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π
 *
 * –¶–µ–π —Å–∫—Ä–∏–ø—Ç –º–æ–∂–Ω–∞ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ –∑ –±—É–¥—å-—è–∫–æ–≥–æ –º—ñ—Å—Ü—è –≤ –ø—Ä–æ—î–∫—Ç—ñ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
 * –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤ npm scripts —Ç–∞ CI/CD
 */

import { dirname, resolve } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –î–∏–Ω–∞–º—ñ—á–Ω–∏–π —ñ–º–ø–æ—Ä—Ç –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ
async function syncConfigurations() {
  try {
    console.log('üîÑ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π ATLAS...');

    // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ config manager
    const { syncAllConfigs, validateGlobalConfig, createConfigBackup } = await import('./config-manager.js');

    // 1. –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≥–ª–æ–±–∞–ª—å–Ω–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    console.log('üîç –í–∞–ª—ñ–¥—É—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é...');
    validateGlobalConfig();
    console.log('‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –≤–∞–ª—ñ–¥–Ω–∞');

    // 2. –°—Ç–≤–æ—Ä—é—î–º–æ backup –ø–µ—Ä–µ–¥ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—î—é (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
    if (process.argv.includes('--backup')) {
      console.log('üì¶ –°—Ç–≤–æ—Ä—é—î–º–æ backup...');
      const backupPath = await createConfigBackup();
      console.log(`‚úÖ Backup —Å—Ç–≤–æ—Ä–µ–Ω–æ: ${backupPath}`);
    }

    // 3. –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è
    console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –≤—Å—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...');
    const results = await syncAllConfigs();

    // 4. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    if (results.errors.length > 0) {
      console.error(`‚ùå –í–∏—è–≤–ª–µ–Ω–æ ${results.errors.length} –ø–æ–º–∏–ª–æ–∫ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:`);
      results.errors.forEach(err => {
        console.error(`   - ${err.name}: ${err.error}`);
      });
      process.exit(1);
    }

    console.log('üéâ –í—Å—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
    console.log(`   ‚úÖ –£—Å–ø—ñ—à–Ω–æ: ${results.success.length}`);

    return results;

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó:', error.message);
    console.error(error.stack);
    process.exit(1);
  }
}

// –í–∏–∫–æ–Ω–∞–Ω–Ω—è –ø—Ä–∏ –ø—Ä—è–º–æ–º—É –≤–∏–∫–ª–∏–∫—É
if (import.meta.url === `file://${process.argv[1]}`) {
  syncConfigurations()
    .then((results) => {
      console.log('\nüìä –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\nüí• –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –Ω–µ–≤–¥–∞–ª–∞:', error.message);
      process.exit(1);
    });
}

export default syncConfigurations;
