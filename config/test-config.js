#!/usr/bin/env node

/**
 * TEST CONFIG - –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π
 */

import { join, resolve, dirname } from 'path';
import { existsSync, readFileSync } from 'fs';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –∫–æ–Ω—Å–æ–ª—ñ
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

function log(color, message) {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logTest(name, status, details = '') {
  const symbol = status ? '‚úÖ' : '‚ùå';
  const color = status ? 'green' : 'red';
  log(color, `${symbol} ${name}`);
  if (details) {
    console.log(`   ${details}`);
  }
}

async function runTests() {
  log('blue', 'üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ü–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π ATLAS\n');

  const tests = [];
  let passed = 0;
  let failed = 0;

  // –¢–µ—Å—Ç 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –≥–ª–æ–±–∞–ª—å–Ω–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
  try {
    const globalConfigPath = join(__dirname, 'global-config.js');
    const exists = existsSync(globalConfigPath);
    tests.push(['–ì–ª–æ–±–∞–ª—å–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —ñ—Å–Ω—É—î', exists]);
    if (exists) passed++; else failed++;
  } catch (error) {
    tests.push(['–ì–ª–æ–±–∞–ª—å–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —ñ—Å–Ω—É—î', false, error.message]);
    failed++;
  }

  // –¢–µ—Å—Ç 2: –Ü–º–ø–æ—Ä—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
  try {
    const { default: GlobalConfig } = await import('./global-config.js');
    const hasAgents = GlobalConfig.AGENTS && Object.keys(GlobalConfig.AGENTS).length > 0;
    tests.push(['–Ü–º–ø–æ—Ä—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó', hasAgents]);
    if (hasAgents) passed++; else failed++;
  } catch (error) {
    tests.push(['–Ü–º–ø–æ—Ä—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó', false, error.message]);
    failed++;
  }

  // –¢–µ—Å—Ç 3: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ config manager
  try {
    const ConfigManager = await import('./config-manager.js');
    const hasExports = ConfigManager.default && typeof ConfigManager.syncAllConfigs === 'function';
    tests.push(['Config Manager —ñ–º–ø–æ—Ä—Ç', hasExports]);
    if (hasExports) passed++; else failed++;
  } catch (error) {
    tests.push(['Config Manager —ñ–º–ø–æ—Ä—Ç', false, error.message]);
    failed++;
  }

  // –¢–µ—Å—Ç 4: –í–∞–ª—ñ–¥–∞—Ü—ñ—è –≥–ª–æ–±–∞–ª—å–Ω–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
  try {
    const { validateGlobalConfig } = await import('./config-manager.js');
    validateGlobalConfig();
    tests.push(['–í–∞–ª—ñ–¥–∞—Ü—ñ—è –≥–ª–æ–±–∞–ª—å–Ω–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó', true]);
    passed++;
  } catch (error) {
    tests.push(['–í–∞–ª—ñ–¥–∞—Ü—ñ—è –≥–ª–æ–±–∞–ª—å–Ω–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó', false, error.message]);
    failed++;
  }

  // –¢–µ—Å—Ç 5: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
  try {
    const { default: GlobalConfig } = await import('./global-config.js');

    const requiredSections = ['AGENTS', 'WORKFLOW_STAGES', 'API_ENDPOINTS', 'TTS_CONFIG', 'VOICE_CONFIG'];
    const missingSections = requiredSections.filter(section => !GlobalConfig[section]);

    const structureValid = missingSections.length === 0;
    const details = structureValid ? '–í—Å—ñ —Ä–æ–∑–¥—ñ–ª–∏ –ø—Ä–∏—Å—É—Ç–Ω—ñ' : `–í—ñ–¥—Å—É—Ç–Ω—ñ: ${missingSections.join(', ')}`;

    tests.push(['–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó', structureValid, details]);
    if (structureValid) passed++; else failed++;
  } catch (error) {
    tests.push(['–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó', false, error.message]);
    failed++;
  }

  // –¢–µ—Å—Ç 6: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–≥–µ–Ω—Ç—ñ–≤
  try {
    const { default: GlobalConfig } = await import('./global-config.js');

    const requiredAgents = ['atlas', 'tetyana', 'grisha', 'system'];
    const existingAgents = Object.keys(GlobalConfig.AGENTS || {});
    const missingAgents = requiredAgents.filter(agent => !existingAgents.includes(agent));

    const agentsValid = missingAgents.length === 0;
    const details = agentsValid ? `–ó–Ω–∞–π–¥–µ–Ω–æ ${existingAgents.length} –∞–≥–µ–Ω—Ç—ñ–≤` : `–í—ñ–¥—Å—É—Ç–Ω—ñ: ${missingAgents.join(', ')}`;

    tests.push(['–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∞–≥–µ–Ω—Ç—ñ–≤', agentsValid, details]);
    if (agentsValid) passed++; else failed++;
  } catch (error) {
    tests.push(['–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∞–≥–µ–Ω—Ç—ñ–≤', false, error.message]);
    failed++;
  }

  // –¢–µ—Å—Ç 7: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ workflow –µ—Ç–∞–ø—ñ–≤
  try {
    const { default: GlobalConfig } = await import('./global-config.js');

    const stages = GlobalConfig.WORKFLOW_STAGES || [];
    const hasStages = stages.length > 0;
    const allHaveAgents = stages.every(stage => stage.agent && stage.name);

    const stagesValid = hasStages && allHaveAgents;
    const details = `–ó–Ω–∞–π–¥–µ–Ω–æ ${stages.length} –µ—Ç–∞–ø—ñ–≤`;

    tests.push(['Workflow –µ—Ç–∞–ø–∏', stagesValid, details]);
    if (stagesValid) passed++; else failed++;
  } catch (error) {
    tests.push(['Workflow –µ—Ç–∞–ø–∏', false, error.message]);
    failed++;
  }

  // –¢–µ—Å—Ç 8: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ API endpoints
  try {
    const { default: GlobalConfig } = await import('./global-config.js');

    const endpoints = GlobalConfig.API_ENDPOINTS || {};
    const requiredServices = ['orchestrator', 'frontend', 'tts'];
    const missingServices = requiredServices.filter(service => !endpoints[service]);

    const endpointsValid = missingServices.length === 0;
    const details = endpointsValid ? `–ó–Ω–∞–π–¥–µ–Ω–æ ${Object.keys(endpoints).length} —Å–µ—Ä–≤—ñ—Å—ñ–≤` : `–í—ñ–¥—Å—É—Ç–Ω—ñ: ${missingServices.join(', ')}`;

    tests.push(['API Endpoints', endpointsValid, details]);
    if (endpointsValid) passed++; else failed++;
  } catch (error) {
    tests.push(['API Endpoints', false, error.message]);
    failed++;
  }

  // –¢–µ—Å—Ç 9: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ utility —Ñ—É–Ω–∫—Ü—ñ–π
  try {
    const { default: GlobalConfig } = await import('./global-config.js');

    const requiredFunctions = ['getAgentConfig', 'getWorkflowStage', 'getApiUrl'];
    const existingFunctions = requiredFunctions.filter(func => typeof GlobalConfig[func] === 'function');

    const functionsValid = existingFunctions.length === requiredFunctions.length;
    const details = `${existingFunctions.length}/${requiredFunctions.length} —Ñ—É–Ω–∫—Ü—ñ–π –¥–æ—Å—Ç—É–ø–Ω–æ`;

    tests.push(['Utility —Ñ—É–Ω–∫—Ü—ñ—ó', functionsValid, details]);
    if (functionsValid) passed++; else failed++;
  } catch (error) {
    tests.push(['Utility —Ñ—É–Ω–∫—Ü—ñ—ó', false, error.message]);
    failed++;
  }

  // –¢–µ—Å—Ç 10: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ
  try {
    const { default: GlobalConfig } = await import('./global-config.js');

    // –¢–µ—Å—Ç—É—î–º–æ getAgentConfig
    const atlasAgent = GlobalConfig.getAgentConfig('atlas');
    const atlasValid = atlasAgent && atlasAgent.name === '–ê—Ç–ª–∞—Å';

    // –¢–µ—Å—Ç—É—î–º–æ —â–æ invalid –∞–≥–µ–Ω—Ç –ø–æ–≤–µ—Ä—Ç–∞—î null (–±–µ–∑ –ø–æ–º–∏–ª–∫–∏)
    let invalidAgentHandled = false;
    try {
      const invalidAgent = GlobalConfig.getAgentConfig('invalid');
      // –Ø–∫—â–æ —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä—Ç–∞—î null/undefined –∑–∞–º—ñ—Å—Ç—å –ø–æ–º–∏–ª–∫–∏
      invalidAgentHandled = !invalidAgent;
    } catch (error) {
      // –Ø–∫—â–æ —Ñ—É–Ω–∫—Ü—ñ—è –∫–∏–¥–∞—î –ø–æ–º–∏–ª–∫—É –¥–ª—è invalid –∞–≥–µ–Ω—Ç–∞ - —Ü–µ —Ç–µ–∂ –ø—Ä–∞–≤–∏–ª—å–Ω–∞ –ø–æ–≤–µ–¥—ñ–Ω–∫–∞
      invalidAgentHandled = error.message.includes('not found');
    }

    // –¢–µ—Å—Ç—É—î–º–æ getWorkflowStage
    const stage1 = GlobalConfig.getWorkflowStage(1);
    const stageValid = stage1 && stage1.stage === 1;

    // –¢–µ—Å—Ç—É—î–º–æ —â–æ invalid stage –ø–æ–≤–µ—Ä—Ç–∞—î null
    let invalidStageHandled = false;
    try {
      const invalidStage = GlobalConfig.getWorkflowStage(999);
      invalidStageHandled = !invalidStage;
    } catch (error) {
      // –Ø–∫—â–æ –∫–∏–¥–∞—î –ø–æ–º–∏–ª–∫—É - —Ç–µ–∂ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
      invalidStageHandled = error.message.includes('not found');
    }

    // –¢–µ—Å—Ç—É—î–º–æ getApiUrl
    const orchestratorUrl = GlobalConfig.getApiUrl('orchestrator');
    const urlValid = orchestratorUrl && orchestratorUrl.includes('localhost');

    const functionalityValid = atlasValid && invalidAgentHandled && stageValid && invalidStageHandled && urlValid;

    const details = `Atlas: ${atlasValid}, InvalidAgent: ${invalidAgentHandled}, Stage: ${stageValid}, InvalidStage: ${invalidStageHandled}, URL: ${urlValid}`;

    tests.push(['–§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å utility', functionalityValid, details]);
    if (functionalityValid) passed++; else failed++;
  } catch (error) {
    tests.push(['–§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å utility', false, error.message]);
    failed++;
  }

  // –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
  log('bold', '\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:');
  tests.forEach(([name, status, details]) => {
    logTest(name, status, details);
  });

  // –ü—ñ–¥—Å—É–º–æ–∫
  console.log('\n' + '='.repeat(50));
  log('bold', `üìà –ü—ñ–¥—Å—É–º–æ–∫: ${passed} ‚úÖ / ${failed} ‚ùå (–í—Å—å–æ–≥–æ: ${tests.length})`);

  if (failed === 0) {
    log('green', 'üéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!');
    log('cyan', 'üìã –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π –≥–æ—Ç–æ–≤–∞ –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è');
    return true;
  } else {
    log('red', 'üí• –î–µ—è–∫—ñ —Ç–µ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π—à–ª–∏');
    log('yellow', 'üîß –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ–º–∏–ª–∫–∏ –≤–∏—â–µ —Ç–∞ –≤–∏–ø—Ä–∞–≤—Ç–µ —ó—Ö');
    return false;
  }
}

// –î–æ–¥–∞—Ç–∫–æ–≤–∏–π —Ç–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó
async function testSync() {
  log('blue', '\nüîÑ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó...');

  try {
    const { getConfigStatus } = await import('./config-manager.js');
    const status = getConfigStatus();

    console.log('–°—Ç–∞—Ç—É—Å —Ü—ñ–ª–µ–π:');
    for (const [name, target] of Object.entries(status.targets)) {
      const exists = target.exists ? '‚úÖ' : '‚ùå';
      console.log(`   ${exists} ${name} (${target.path})`);
    }

    return true;
  } catch (error) {
    log('red', `‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó: ${error.message}`);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async function main() {
  const basicTestsPassed = await runTests();

  if (basicTestsPassed) {
    await testSync();
  }

  const exitCode = basicTestsPassed ? 0 : 1;
  process.exit(exitCode);
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –ø—Ä—è–º–æ–º—É –≤–∏–∫–ª–∏–∫—É
if (import.meta.url === `file://${process.argv[1]}`) {
  main().catch((error) => {
    log('red', `üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: ${error.message}`);
    console.error(error.stack);
    process.exit(1);
  });
}

export default { runTests, testSync };
