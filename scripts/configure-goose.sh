#!/bin/bash

# =============================================================================
# ATLAS - Quick Goose Configuration Script
# =============================================================================
# –®–≤–∏–¥–∫–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Goose AI –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ GitHub Copilot –∞–±–æ GitHub Models
# =============================================================================

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

echo ""
echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
echo -e "${BLUE}ü¶Ü Goose AI Configuration for ATLAS${NC}"
echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
echo ""

# –°—Ç–≤–æ—Ä–∏—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é config
mkdir -p "$HOME/.config/goose"

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É—é—á–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
if [ -f "$HOME/.config/goose/config.yaml" ]; then
    if grep -q "provider:" "$HOME/.config/goose/config.yaml" 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Goose –≤–∂–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ${NC}"
        echo ""
        echo "–ü–æ—Ç–æ—á–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è:"
        cat "$HOME/.config/goose/config.yaml"
        echo ""
        read -p "–ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é? (y/N): " -n 1 -r
        echo ""
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            echo "–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –í–∏—Ö—ñ–¥."
            exit 0
        fi
    fi
fi

# –°—Ç–≤–æ—Ä–∏—Ç–∏ Goose config –∑ GitHub Models API + MCP Extensions
echo -e "${YELLOW}–°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é Goose –¥–ª—è GitHub Models –∑ MCP Extensions...${NC}"

cat > "$HOME/.config/goose/config.yaml" << 'GOOSE_CONFIG'
# Goose AI Configuration for ATLAS v4.0
# Provider: GitHub Models API
# MCP Extensions: developer, playwright, computercontroller
# Generated: $(date)

provider: openai
model: gpt-4o

# GitHub Models API Configuration
openai:
  api_key: ${GITHUB_TOKEN}
  base_url: https://models.inference.ai.azure.com

# MCP Extensions –¥–ª—è ATLAS –∞–≥–µ–Ω—Ç—ñ–≤ (–¢–µ—Ç—è–Ω–∞, –ì—Ä–∏—à–∞)
extensions:
  # Developer Tools (—Ñ–∞–π–ª–∏, –∫–æ–º–∞–Ω–¥–∏, –ø—Ä–æ—Ü–µ—Å–∏)
  - name: developer
    type: mcp
    config:
      command: npx
      args:
        - -y
        - "@modelcontextprotocol/server-filesystem"
      env:
        ALLOWED_DIRECTORIES: "/Users,/tmp,/Desktop,/Applications"
    
  # Playwright (–±—Ä–∞—É–∑–µ—Ä automation)
  - name: playwright
    type: mcp
    config:
      command: npx
      args:
        - -y
        - "@executeautomation/playwright-mcp-server"
      env:
        HEADLESS: "false"
    
  # Computer Controller (mouse, keyboard, screenshots)
  - name: computercontroller
    type: mcp
    config:
      command: npx
      args:
        - -y
        - "@anthropic/computer-use"
      env:
        DISPLAY_NUM: ":0"

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑–ø–µ–∫–∏
security:
  allow_code_execution: true
  allow_file_access: true
  allow_network_access: true
  
# Available GitHub Models:
# - gpt-4o (recommended)
# - gpt-4o-mini
# - Meta-Llama-3.1-405B-Instruct
# - Meta-Llama-3.1-70B-Instruct
# - Mistral-large-2407
# - Phi-3.5-mini-instruct
# —Ç–∞ –±–∞–≥–∞—Ç–æ —ñ–Ω—à–∏—Ö...
GOOSE_CONFIG

echo -e "${GREEN}‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–∞: ${NC}$HOME/.config/goose/config.yaml"
echo ""

# –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ MCP packages
echo -e "${YELLOW}–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è MCP npm packages...${NC}"
npm install -g @modelcontextprotocol/server-filesystem \
               @executeautomation/playwright-mcp-server \
               @anthropic/computer-use 2>/dev/null || {
    echo -e "${YELLOW}‚ö†Ô∏è  –î–µ—è–∫—ñ MCP packages –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å${NC}"
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ MCP packages
echo ""
echo "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ MCP extensions:"
if npm list -g @modelcontextprotocol/server-filesystem >/dev/null 2>&1; then
    echo -e "  ${GREEN}‚úÖ${NC} developer (filesystem)"
else
    echo -e "  ${RED}‚ùå${NC} developer (filesystem)"
fi

if npm list -g @executeautomation/playwright-mcp-server >/dev/null 2>&1; then
    echo -e "  ${GREEN}‚úÖ${NC} playwright"
else
    echo -e "  ${RED}‚ùå${NC} playwright"
fi

if npm list -g @anthropic/computer-use >/dev/null 2>&1; then
    echo -e "  ${GREEN}‚úÖ${NC} computercontroller"
else
    echo -e "  ${YELLOW}‚ö†Ô∏è${NC}  computercontroller (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)"
fi
echo ""

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ API –∫–ª—é—á—ñ–≤
echo -e "${YELLOW}–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ GitHub Token...${NC}"

if [ -n "$GITHUB_TOKEN" ]; then
    echo -e "${GREEN}‚úÖ GITHUB_TOKEN –∑–Ω–∞–π–¥–µ–Ω–æ –≤ environment${NC}"
    echo "   Goose –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏ –∑ GitHub Models!"
    echo ""
    echo -e "${CYAN}üìä –î–æ—Å—Ç—É–ø–Ω—ñ –º–æ–¥–µ–ª—ñ —á–µ—Ä–µ–∑ GitHub Models:${NC}"
    echo "   ‚Ä¢ gpt-4o (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ)"
    echo "   ‚Ä¢ gpt-4o-mini (—à–≤–∏–¥–∫–∞)"
    echo "   ‚Ä¢ Meta-Llama-3.1-405B-Instruct"
    echo "   ‚Ä¢ Mistral-large-2407"
    echo "   ‚Ä¢ —Ç–∞ –±–∞–≥–∞—Ç–æ —ñ–Ω—à–∏—Ö..."
else
    echo -e "${RED}‚ùå GITHUB_TOKEN –ù–ï –∑–Ω–∞–π–¥–µ–Ω–æ –≤ environment${NC}"
    echo ""
    echo "–ù–∞–ª–∞—à—Ç—É–π—Ç–µ GitHub Token –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ GitHub Models:"
    echo ""
    echo -e "${CYAN}üìã –Ø–∫ –æ—Ç—Ä–∏–º–∞—Ç–∏ GitHub Token:${NC}"
    echo ""
    echo "  1. –í—ñ–¥–∫—Ä–∏–π—Ç–µ: https://github.com/settings/tokens"
    echo "  2. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å 'Generate new token' ‚Üí 'Generate new token (classic)'"
    echo "  3. –í–∏–±–µ—Ä—ñ—Ç—å scopes:"
    echo "     ‚úì read:user"
    echo "     ‚úì read:project"
    echo "  4. Generate token ‚Üí —Å–∫–æ–ø—ñ—é–π—Ç–µ (ghp_...)"
    echo ""
    
    # –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–µ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–ª—é—á–∞
    read -p "–ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ GitHub Token –∑–∞—Ä–∞–∑? (y/N): " -n 1 -r
    echo ""
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo ""
        read -p "–í–≤–µ–¥—ñ—Ç—å GitHub Token (ghp_...): " github_token
        
        if [[ -n "$github_token" ]]; then
            # –î–æ–¥–∞—Ç–∏ –¥–æ ~/.zshrc
            echo "export GITHUB_TOKEN='$github_token'" >> ~/.zshrc
            export GITHUB_TOKEN="$github_token"
            
            # –¢–∞–∫–æ–∂ –¥–æ–¥–∞—Ç–∏ –¥–æ .env —Ñ–∞–π–ª—É –ø—Ä–æ–µ–∫—Ç—É
            if [ -f ".env" ]; then
                # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –≤–∂–µ —î GITHUB_TOKEN
                if grep -q "^GITHUB_TOKEN=" .env; then
                    # –û–Ω–æ–≤–∏—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π
                    sed -i '' "s|^GITHUB_TOKEN=.*|GITHUB_TOKEN=$github_token|" .env
                else
                    # –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π
                    echo "GITHUB_TOKEN=$github_token" >> .env
                fi
            else
                # –°—Ç–≤–æ—Ä–∏—Ç–∏ .env
                echo "GITHUB_TOKEN=$github_token" > .env
            fi
            
            echo -e "${GREEN}‚úÖ GITHUB_TOKEN –¥–æ–¥–∞–Ω–æ –¥–æ ~/.zshrc${NC}"
            echo -e "${GREEN}‚úÖ GITHUB_TOKEN –¥–æ–¥–∞–Ω–æ –¥–æ .env${NC}"
            echo ""
            echo -e "${YELLOW}‚ö†Ô∏è  –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ shell: source ~/.zshrc${NC}"
        else
            echo -e "${YELLOW}–ü—Ä–æ–ø—É—â–µ–Ω–æ - token –ø–æ—Ä–æ–∂–Ω—ñ–π${NC}"
        fi
    fi
fi

echo ""
echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
echo -e "${GREEN}üéâ Goose –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${NC}"
echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
echo ""
echo "–ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:"
if [ -n "$GITHUB_TOKEN" ]; then
    echo "  1. ‚úÖ GitHub Token –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ"
    echo "  2. –¢–µ—Å—Ç—É–π—Ç–µ Goose: goose run 'echo Hello from GitHub Models'"
    echo "  3. –ó–∞–ø—É—Å—Ç—ñ—Ç—å ATLAS: ./restart_system.sh start"
else
    echo "  1. –î–æ–¥–∞–π—Ç–µ GitHub Token (—è–∫—â–æ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏):"
    echo "     export GITHUB_TOKEN='ghp_...'"
    echo "     echo 'export GITHUB_TOKEN=\"ghp_...\"' >> ~/.zshrc"
    echo "  2. –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ shell: source ~/.zshrc"
    echo "  3. –¢–µ—Å—Ç—É–π—Ç–µ Goose: goose run 'echo Hello'"
    echo "  4. –ó–∞–ø—É—Å—Ç—ñ—Ç—å ATLAS: ./restart_system.sh start"
fi
echo ""
echo -e "${CYAN}üìö –î–µ—Ç–∞–ª—å–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è:${NC}"
echo "   ‚Ä¢ Goose config: ~/.config/goose/config.yaml"
echo "   ‚Ä¢ GitHub Models: https://github.com/marketplace/models"
echo "   ‚Ä¢ ATLAS docs: docs/GOOSE_CONFIGURATION_FIX_2025-10-12.md"
echo ""

